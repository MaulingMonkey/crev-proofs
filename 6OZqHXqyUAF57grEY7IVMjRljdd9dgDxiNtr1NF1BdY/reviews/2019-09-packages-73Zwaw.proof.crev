-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T18:17:13.727715100-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: midir
  version: 0.5.0
  digest: s5GKXD-YiSrHuHQcEayi1xVKldmjnjQj0MP73R1tknI
review:
  thoroughness: low
  understanding: low
  rating: negative
comment: |
  Good starting point, and my favorite Rust MIDI API so far, but likely unsound as stands.
  
  Pros:
    - Pure rust, no mucking with building building C/C++ libs like with portmidi
    - To be WASM/Browser compatible (PR made).
  
  Cons:
    - Likely unsound as currently stands (transmute_copy, type punning, sketchy memalloc crate use, haven't vetted thread safety properly, ...)
    - API clunky in spots (mix of known issues and easily fixed surface level stuff)
    - Needs more unit test coverage if possible (are there perhaps virtual MIDI devices for windows that could be added to CI...?)
  
  TODO:
    - rating: netural: Eliminate as much sketchy unsafe as possible.
    - rating: positive: Clean up API design a bit (async, saner member functions, deal with Send inconsistency, maybe make connecting not consume MidiInput s?)
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | examples/test_forward.rs                      | +1 | |
  | examples/test_play.rs                         | +1 | |
  | examples/test_reuse.rs                        | +1 | |
  | examples/test_sysex.rs                        | +1 | |
  | [src/backend/asla/mod.rs](src/backend/asla/mod.rs) | 0 | Some extra `unsafe`, use of uninit data possibly UB
  | src/backend/coremidi/mod.rs                   | 0 | Is Core MIDI thread safe?  (`unsafe impl Send for MidiOutputConnection`)
  | src/jack/mod.rs                               | -1 | Use of transmute_copy on Box is skeeeeeeetchy, uninitialized too :(
  | src/jack/wrappers.rs                          | -1 | Is JACK thread safe?  Ringbuffer::read is unsound!  Lots of unsafe but mostly for sane FFI.
  | src/winmm/handler.rs                          | 0 | unsafe for FFI, some pointer casts I haven't thoroughly vetted |
  | src/winmm/mod.rs                              | 0 | unsafe for FFI, uninitialized :(, sketchy deallocate API.  Is WinMM thread safe?  333: UB &mut violates aliasing?
  | src/backend/mod.rs                            | +1 | |
  | src/os/mod.rs                                 | +1 | |
  | src/os/unix.rs                                | +1 | |
  | src/common.rs                                 | 0 | Consumption of the MidiInput/MidiOutput clients/factories on connect seems a bit strange, especially after the ports refactor.
  | src/errors.rs                                 | +1 | |
  | src/lib.rs                                    | +1 | unsafe, but sound |
  | tests/virtual.rs                              | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | RCE: Downloads/installs jack from the internet |
  | appveyor.yml                                  | +1 | |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | LICENSE                                       | +1 | |
  | README.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | -1    | 99% sure something in here is unsound.  transmute_copy, type punning, use of memalloc crate.
  | fs        | +1    | N/A |
  | io        | 0     | libc... maybe safe? |
  | docs      | +1    | |
  | tests     | 0     | Good examples, but needs more automated unit/integration tests.  Admittedly hard given the lack of MIDI devices on CI servers... |
  
  src/backend/asla/mod.rs
  -----------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  21 | fn poll                             | +1
  |  81 | unsafe impl Send for EventEncoder   | Is ASLA thread safe?
  | 578 | unsafe in handle_input              | Construction of uninitialized vec, UB?
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
S8JnzOR-p0nQ7JNQGb5mtYnMMiIoo-a9GK9SYK5_MXoRPKAgSYhOCVKq7uLGCjJqdcqPh8as-bhXImZukSEEAA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T19:11:39.449625800-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: tiled
  version: 0.8.0
  digest: nbMitPCGxdlRA877oaoOuABkDx61j6YLOs_PJQDvyII
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  Do not use on User Generated Content!
      * Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
      * No obvious protection against zipbombs
      * A couple cases where bad input will panic, a potential DoS vector.
  
  For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)
  
  There's also a few missing features:
      * Wang Tiles
      * Terrains
      * "file" Custom Properties
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | assets/tiled_base64_external.tmx              | +1 | |
  | assets/tiled_base64_gzip.tmx                  | +1 | |
  | assets/tiled_base64_zlib.tmx                  | +1 | |
  | assets/tiled_base64.tmx                       | +1 | |
  | assets/tiled_csv.tmx                          | +1 | |
  | assets/tiled_image_layers.tmx                 | +1 | |
  | assets/tiled_xml.tmx                          | +1 | |
  | tilesheet.png                                 | +1 | Neat looking modern tileset... wonder what the source is!
  | tilesheet.tsx                                 | +1 | |
  | examples/main.rs                              | +1 | |
  | [src/lib.rs](src/lib.rs)                      | +1 | |
  | tests/lib.rs                                  | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | Sparse... no MSRV, beta/nightly, etc. |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | CONTRIBUTORS.md                               | +1 | |
  | README.md                                     | +1 | Dead link to tileset source
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | No unsafe
  | fs        | -1 | See Tileset::new_reference notes
  | io        | 0  | Brittle XML parsing, but OK for limited inputs.
  | docs      | -1 | Barely any.
  | tests     | +1 | |
  
  src/lib.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  28 | get_attrs!              | Eep
  |  53 | parse_tag!              | Mishandles nested tags... fortunately that's probably not necessary.
  |  97 | Colour::from_str        | British... and a possible source of panics.
  | 161 | PropertyValue::new      | No "file" support (see https://doc.mapeditor.org/en/stable/manual/custom-properties/#adding-properties)
  | 238 | Map::new                | My kingdom for some variable names!
  | 256 | Map::new                | Still using try!
  | 385 | Tileset::new_reference  | Possible path traversal attacks, limits ability to inject your own virtual filesystem.
  | 860 | decode_csv              | I've heard decoding arbitrary CSV is way more complicated than this... but this probably works for tile data as used in tmx files.
  | 883 | convert_to_u32          | Kinda want this to be based on iterators to avoid an extra alloc...
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
JQQhh3H5U8EH4kQly3q87dB-cRJEshhtfjUWEM1WViKNBcpH5Mx6uD82Iuesa_A6WE07FQzIPeoxQPYjgRG1DA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T19:12:29.704124700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: tiled
  version: 0.8.0
  digest: nbMitPCGxdlRA877oaoOuABkDx61j6YLOs_PJQDvyII
review:
  thoroughness: medium
  understanding: medium
  rating: negative
comment: |
  Do not use on User Generated Content!
      * Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
      * No obvious protection against zipbombs
      * A couple cases where bad input will panic, a potential DoS vector.
  
  For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)
  
  There's also a few missing features:
      * Wang Tiles
      * Terrains
      * "file" Custom Properties
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | assets/tiled_base64_external.tmx              | +1 | |
  | assets/tiled_base64_gzip.tmx                  | +1 | |
  | assets/tiled_base64_zlib.tmx                  | +1 | |
  | assets/tiled_base64.tmx                       | +1 | |
  | assets/tiled_csv.tmx                          | +1 | |
  | assets/tiled_image_layers.tmx                 | +1 | |
  | assets/tiled_xml.tmx                          | +1 | |
  | tilesheet.png                                 | +1 | Neat looking modern tileset... wonder what the source is!
  | tilesheet.tsx                                 | +1 | |
  | examples/main.rs                              | +1 | |
  | [src/lib.rs](src/lib.rs)                      | +1 | |
  | tests/lib.rs                                  | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | Sparse... no MSRV, beta/nightly, etc. |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | CONTRIBUTORS.md                               | +1 | |
  | README.md                                     | +1 | Dead link to tileset source
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | No unsafe
  | fs        | -1 | See Tileset::new_reference notes
  | io        | 0  | Brittle XML parsing, but OK for limited inputs.
  | docs      | -1 | Barely any.
  | tests     | +1 | |
  
  src/lib.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  28 | get_attrs!              | Eep
  |  53 | parse_tag!              | Mishandles nested tags... fortunately that's probably not necessary.
  |  97 | Colour::from_str        | British... and a possible source of panics.
  | 161 | PropertyValue::new      | No "file" support (see https://doc.mapeditor.org/en/stable/manual/custom-properties/#adding-properties)
  | 238 | Map::new                | My kingdom for some variable names!
  | 256 | Map::new                | Still using try!
  | 385 | Tileset::new_reference  | Possible path traversal attacks, limits ability to inject your own virtual filesystem.
  | 860 | decode_csv              | I've heard decoding arbitrary CSV is way more complicated than this... but this probably works for tile data as used in tmx files.
  | 883 | convert_to_u32          | Kinda want this to be based on iterators to avoid an extra alloc...
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
UPihZNtZegvbMZIxrn4gnusI2LjjAw5iwqLNh10vSj7fEPYtUUBA8cXH47mCajH7E0wFYThxNOEBH0978ZFyBw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T21:25:35.459217300-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: tiled-json-rs
  version: 0.2.6
  revision: 7969464b0bd04471e920d9b5ff825efbf835f08f
  digest: PQ-E8KGi2DKLrvyTGC75JETHI8pShfeB7LO4rmXi7rw
review:
  thoroughness: medium
  understanding: medium
  rating: negative
comment: |
  Do not use on User Generated Content!
  * Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
  * A couple cases where bad input will panic, a potential DoS vector.
  
  For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)
  
  Pros:
  * JSON is lighter weight than XML
  * Fuller format support vs tiled
  
  Cons:
  * No compression
  * API is just as raw in many ways
  * Requires exporting.
  * Slightly unusual license for rust projects (MPL, instead of MIT/Apache 2)
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | [src/layer.rs](src/layer.rs)                  | 0 | Raw structures
  | src/lib.rs                                    | +1 | |
  | src/map.rs                                    | +1 | |
  | src/object.rs                                 | +1 | |
  | [src/parsers.rs](src/parsers.rs)              | 0 | No decompression support, can panic (not suitable for user generated content)
  | [src/tile_set.rs](src/tile_set.rs)            | -1 | Not suitable for user generated content!
  | src/utils.rs                                  | +1 | |
  | src/wangs.rs                                  | +1 | |
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | LICENSE                                       | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | None
  | fs        | -1 | Path traversal
  | io        | +1 | serde
  | docs      | +1 | |
  | tests     | -1 | Not in crate, maybe in repository
  
  src/layer.rs
  ------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  17   | TileLayer::chunks | Option seems kinda pointless, also this API is meh
  | 129   | DrawOrder | There are at least 4 draw modes now for layers - although there's also Map / RenderOrder.... blehrg (top->down left->right, top->down right->left, ...)
  
  src/parsers.rs
  --------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 129   | parse_color blue | Despite earlier padding, no guarantee this is valid / may panic (both for overflowing and for not being a unicode boundary.)
  
  src/tile_set.rs
  ---------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 121   | Deserialize for TileSet | File::open - path traversal attacks, lack of virtual filesystem support, etc.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
raGWyoOiRbsdX4c-qsXMmwq-ndTQadVUKykxQbprgZrEa2hamkgDTCMR-1yny44oX3I_3O6UlzFLwy2jWWkCCQ
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T10:42:32.035056700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: lazy_static
  version: 1.4.0
  revision: 421669662b35fcb455f2902daed2e20bbbba79b6
  digest: 95REZRx8ItDao_V9l7sOsW9-OB6Jc5C7azc9mNC07fI
package-diff-base:
  source: "https://crates.io"
  name: lazy_static
  version: 1.3.0
  revision: 03f62910a94886987cdb686c7509bbdc846481e3
  digest: 21bjQkc4fD-Kvjb0xv1fN7M4oaembbxoEDirmvOQwbg
review:
  thoroughness: high
  understanding: high
  rating: positive
comment: |
  1.4.0:  Read diff, looks fine.
  1.3.0:  Read all of src, skimmed all of tests.  core_lazy.rs looks a little odd, but is 100% safe code - any issues would be in it's core dependency, spin.  inline_lazy.rs contains unsafe blocks... look safe, but downgrades rating to merely positive.  lib.rs is just safe macros.  Tests all pass.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
bW-yCt94w53nltaweNxVLUbUSU6ad8w5h7y_7EbEtdf4TJI7WE9tIitsychEig-ocoOQlHiRj74flYQiELoXAw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:21:11.323775200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: warmy
  version: 0.13.0
  revision: 936c095d3ef1f581897bea7113a6415afb453311
  digest: qtom3iCAxYEF054ycEN79jtrYqfibZMAaLQ8msqc0SY
package-diff-base:
  source: "https://crates.io"
  name: warmy
  version: 0.12.0
  revision: a1e2e8162f8bb9061b58cd66cfc0aaefebd0cbc7
  digest: WrTgwvpdKO6GHtzIY3FcEmEq4Ea_8UFRGAEyBkVvVl4
review:
  thoroughness: low
  understanding: low
  rating: positive
comment: |
  0.13.0:  RON support, lockfile/CI changes.  LGTM.
  0.12.0:  Looks good to me.  Some of the finer points are a little obtuse to me (RE: reloads, dependencies, an the inspect trait.)
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | examples/toml/hello.html                      | +1    | |
  | examples/toml/main.rs                         | +1    | |
  | src/context.rs                                | +1    | |
  | src/json.rs                                   | +1    | |
  | [src/key.rs](src/key.rs)                      | +1    | |
  | src/lib.rs                                    | +1    | |
  | src/load.rs                                   | +1    | |
  | src/res.rs                                    | +1    | |
  | src/toml.rs                                   | +1    | |
  | tests/lib.rs                                  | +1    | |
  | .cargo_vcs_info.json                          | +1    | |
  | .cargo-ok                                     | +1    | |
  | .gitignore                                    | +1    | |
  | .travis.yml                                   | +1    | |
  | Cargo.toml                                    | +1    | |
  | Cargo.toml.orig                               | +1    | |
  | CHANGELOG.md                                  | +1    | |
  | LICENSE                                       | +1    | |
  | README.md                                     | +1    | |
  | rustfmt.toml                                  | +1    | Ew 2 space indents gross
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1    | No unsafe code
  | fs        | +1    | Nothing fishy
  | io        | +1    | Nothing fishy
  | docs      | +1    | Good god there are a lot.  Needs more concrete motivating examples though.
  | tests     | +1    | |
  
  src/key.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 12    | Key   | `'static` lifetime... minor leak? but I probably don't care?
  
  TIL
  ---
  cargo-sync-readme
  cargo-outdated
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
Vq7md231i9xbc2Fuxu_iH35WOQKlHohL-mtOKc1v2E_ZLkxjtm6R7N3jyqIjw4zy_3t0lf_8QySAQtenRXteDA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:29:55.770920200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: require_unsafe_in_body
  version: 0.2.0-alpha
  revision: 23c74e9e01621e331851d2f810150b9241ef94a7
  digest: oUa3rwD3LvMZt2KMy7p9XBY_-Jf5z-JRbg-gsHYw30o
review:
  thoroughness: medium
  understanding: low
  rating: positive
comment: |
  0.2.0-alpha:  Significant refactoring, adding support for generics.  LGTM?
  0.1.2:  Seems solid, although my syn-fu is weak, limiting my ability to review this.
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | src/docs/require_unsafe_in_bodies.md          | +1 | |
  | src/docs/require_unsafe_in_body.md            | +1 | |
  | src/utils/macros.rs                           | +1 | |
  | src/utils/mod.rs                              | +1 | |
  | src/lib.rs                                    | +1 | understanding: low - I'm barely following along
  | src/tests.rs                                  | +1 | |
  | tests/ui/body_on_method_2.rs                  | +1 | |
  | tests/ui/body_on_method_2.stderr              | +1 | |
  | tests/ui/body_on_method.rs                    | +1 | |
  | tests/ui/body_on_method.stderr                | +1 | |
  | tests/ui/readme.rs                            | +1 | |
  | tests/ui/readme.stderr                        | +1 | |
  | tests/impl_method_2.rs                        | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/impl_method.rs                          | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/trait_default_method.rs                 | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/ui.rs                                   | +1 | The cfgs on unit-tests look the wrong way around?
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | Cargo.toml                                    | +1 | MIT
  | Cargo.toml.orig                               | +1 | MIT
  | LICENSE                                       | +1 | MIT
  | Makefile                                      | +1 | Unixy
  | README.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1    | Wrangles unsafe but doesn't actually use it itself
  | fs        | +1    | None
  | io        | +1    | Modifies codegen through syn
  | docs      | +1    | |
  | tests     | +1    | |
  
  TIL
  ---
  ```rs
  let Struct { ref member, ref mut member2, .. } = to_destructure;
  ```
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
8FN3bd_sDtrrpXXA9gGdXe5gPSYXDfyqA-UsAN7ef22COyrKdJjD7qPy-Z9XnH8yVT87cXnbhTXXbE584g3WBw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:34:14.673686500-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: require_unsafe_in_body
  version: 0.2.0
  revision: 0920d4ef6482ceaa2807a17372be3221053b2129
  digest: rkvU8QhHqYup1ET1RLgkQENb1l8bfABNZXIG0TqwpHI
package-diff-base:
  source: "https://crates.io"
  name: require_unsafe_in_body
  version: 0.2.0-alpha
  revision: 23c74e9e01621e331851d2f810150b9241ef94a7
  digest: oUa3rwD3LvMZt2KMy7p9XBY_-Jf5z-JRbg-gsHYw30o
review:
  thoroughness: low
  understanding: low
  rating: positive
comment: |
  0.2.0:  More refactoring surrounding generics.
  0.2.0-alpha:  Significant refactoring, adding support for generics.  LGTM?
  0.1.2:  Seems solid, although my syn-fu is weak, limiting my ability to review this.
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | src/docs/require_unsafe_in_bodies.md          | +1 | |
  | src/docs/require_unsafe_in_body.md            | +1 | |
  | src/utils/macros.rs                           | +1 | |
  | src/utils/mod.rs                              | +1 | |
  | src/lib.rs                                    | +1 | understanding: low - I'm barely following along
  | src/tests.rs                                  | +1 | |
  | tests/ui/body_on_method_2.rs                  | +1 | |
  | tests/ui/body_on_method_2.stderr              | +1 | |
  | tests/ui/body_on_method.rs                    | +1 | |
  | tests/ui/body_on_method.stderr                | +1 | |
  | tests/ui/readme.rs                            | +1 | |
  | tests/ui/readme.stderr                        | +1 | |
  | tests/impl_method_2.rs                        | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/impl_method.rs                          | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/trait_default_method.rs                 | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/ui.rs                                   | +1 | The cfgs on unit-tests look the wrong way around?
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | Cargo.toml                                    | +1 | MIT
  | Cargo.toml.orig                               | +1 | MIT
  | LICENSE                                       | +1 | MIT
  | Makefile                                      | +1 | Unixy
  | README.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1    | Wrangles unsafe but doesn't actually use it itself
  | fs        | +1    | None
  | io        | +1    | Modifies codegen through syn
  | docs      | +1    | |
  | tests     | +1    | |
  
  TIL
  ---
  ```rs
  let Struct { ref member, ref mut member2, .. } = to_destructure;
  ```
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
Ca-__HPuokuxpTXU408SFVoa9ujcipGBmMwyOesYuUisdN2IQinHUocznzFP2OejmjjqXFFqDbZDy0g90xYnBw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:36:01.272632600-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.12
  revision: c7153e4cf9b1694c49385057633ab5ad6b602b38
  digest: WqfZMcbmdwcOg6mLIp2wyihDrMINHBXIxun-uQfUCfc
package-diff-base:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.11
  revision: 4b1fed4d7a2a996c3be5e741e8768e9bb67051bd
  digest: Rd_BtsF4rMcS-YS9C_uuIUJ_6g5ihmmIw9zqOZ2atnQ
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  0.4.12: Trivial version bumps.
  0.4.11: Nice and solid looking code.  100% safe code.
  
  Reviewed:
      src\cli.rs:         +1
      src\main.rs:        +1
          151 run_lldb
              Nonterminating loops are problematic, but I think the side effects here should make this work OK?
              (see https://github.com/rust-lang/rust/issues/28728 )
      Cargo.toml:         +1
      Cargo.toml.orig:    +1
          13  readme path references unpackaged readme
  
  TIL:
      Using traits to extend clap::App so flags can be reused per-subcommand is interesting.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
pMgYPQqb8riFgALG1EDNIE2bdpbUZSGRZE_6_FC99609xFDN6tK4_wAARjsWnPqGKTKS1ZFf1o1ghftki0rEDA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:37:00.391936900-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.12
  revision: 40a232b03d6c5afef18f1101b9a6842d59959726
  digest: DF1MThbK5NP1IwEp0q6MKfIcZxccQSvXdw4ibsinQfc
package-diff-base:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.11
  revision: ac155d160b1d6ed4031d3944dc076f6e5cec508f
  digest: qdzqoM1oVvQiujz5Ym13399xTf_9neZhAUD4tt_UIfY
review:
  thoroughness: low
  understanding: low
  rating: neutral
comment: |
  0.4.12:  Trivial version bumps
  0.4.11
  thoroughness: low - mostly due to iOS FFI, shell stuff not being super thorough, and review fatigue causing my eyes to glaze over in places.
  understanding: low - lots of shell/path stuff that I don't know well enough to verify
  rating: neutral - see concerns bellow.
  
  
  
  Concerns
  ========
  - Looks like lots of stuff might not work on windows... although there *is* windows-specific code, so maybe?
  - Lots of unimplemented!()
  - iOS support is chock full of unsafe { ... } for FFI.  I haven't verified the FFI signatures.
  - iOS support also uses unsafe { ... } for several objective C casts.  Needs some sanity checked utility functions.
  - iOS support has some potential UB during panics due to unwinding over FFI boundaries.
  - Implements some code signing stuff for iOS.  Necessary, and just your local certs, but I haven't fully reasoned through what security impacts if any that has.
  - Few unit tests visible in the crate itself (maybe they're separate and unpackaged?)
  - Sandboxing concerns
      - Remotes into other devices, including over ssh.
      - Frequent use of shell commands could lead to build server RCEs given malicious project metadata
      - Malicious projects will just use a build.rs file though, front door is open so to speak.
  
  
  
  Details
  =======
  src\android\device.rs           +1
      14  Odd place to install...
  src\android\mod.rs              +1
      155 Could also check android studio SDK install path
  
  src\host\device.rs              +1
  src\host\mod.rs                 +1
  src\host\platform.rs            +1
  
  src\ios\device.rs               0
      50  Not sure if the underlying iOS APIs are thread safe, but this seems acceptable.
      277 unsafe { ... } for FFI.  Looks generally safe except for scary mem::transmute(kCFBooleanTrue), but even that may be right.
      303 unsafe { ... } for FFI.  Looks safe to me.
      367 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      419 unsafe { ... } for FFI.  Looks safe to me.  
      440 unsafe { ... } for FFI.  Looks safe to me.
      454 unsafe { ... } for FFI.  Looks safe to me.
      487 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      519 This thread just eats errors.
      683 unsafe { ... } for FFI.  Transmute... probably safe.
      690 unsafe { ... } for FFI.  Looks safe to me.
      691 unsafe { ... } for FFI.  Scary Core Foundation related transmutes... probably OK, but some utilities to sanity check these conversions in debug would be nice.
      696 unsafe { ... } for FFI.  Another scary-but-probably-safe transmute.
  src\ios\helpers.py              +1
  src\ios\mobiledevice_sys.rs     0
      FFI, not perfectly verified since I don't have an OS X machine to check the headers out on.
      Ref: https://github.com/PanayotCankov/device.io/blob/master/idb/MobileDevice.h
      Various minor const differences, a few functions missing in ref, a few likely improved definitions in places.
      33  am_device_notification_callback_info has    "extra" field vs reference, "subscription".  iOS internal struct?
  src\ios\mod.rs                  0
      43  unsafe { ... } for FFI.  Looks safe to me.
      55  technically unsound inner fn (uses ptrs)
      61  Scary looking as hell, but I think this is just going Box (40) -> void* (48) -> Box (here).
      62  UNDEFINED BEHAVIOR:  Possible panic unwind through FFI, technically an hazard.
          I would've missed this edge case but for the comment, so I'm not docking points.
          Unlikely to cause severe problems, but would be worth fixing.
  src\ios\platform.rs             +1
  src\ios\xcode.rs                +1
      25  Dead code not reviewed
      91  I have not thoroughly audited this code signing stuff, but looks OK.
      199 com.zoy.kali.Dinghy?  A bit hardcoded...
  
  src\platform\mod.rs                 +1
  src\platform\regular_platform.rs    +1
      44  Since when does "regular" mean "*nix" - might not work on windows.
  
  src\script\device.rs            +1
  src\script\mod.rs               +1
  
  src\ssh\device.rs               0
  src\ssh\mod.rs                  +1
  
  src\compiler.rs                 +1
      475 Isn't this *unbanned*?
  src\config.rs                   +1
  src\device.rs                   +1
  src\errors.rs                   +1
  src\lib.rs                      +1
      87  random sleep? why?
  src\overlay.rs                  +1
  src\project.rs                  +1
  src\toolchain.rs                +1
  src\utils.rs                    +1
  
  build.rs                        +1
  Cargo.toml                      +1
  Cargo.toml.orig                 +1
  
  
  
  TIL
  ===
  Neat loop pattern:
  
  ```
  for (a,     b,      c) in &[
      ("a",   "b",    "c"),
      ("aa",  "bb",   "cc"),
  ] {
      ...
  }
  ```
  
  Sysroot paths:  ndk/toolchains/llvm/prebuilt/sysroot/usr/lib/{binutils_cpu}-linux-{abi_kind}"
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
KZoetE2dJ7Rcn6Z_oprLII4A6Y3IaYK-UPPNwUn8uFpwpPHHoVXrWacwNGm-OAycj7gzSgI2pfWy-aughKnqDw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:37:52.203782400-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.12
  revision: 86168d7d01de47f06741cd6430ff9af71b13a4c2
  digest: twtDrhKvr5oxpDt61eNL0u42kj49cmH2RGpEAEsFhRA
package-diff-base:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.11
  revision: 1fa5b89b2bb50264a5fd93d9791b843763cf7682
  digest: 70P30qFd_VRtAAJO0wqEDS2TWJFXeQT3T-eQKFXZP7A
review:
  thoroughness: medium
  understanding: low
  rating: positive
comment: |
  0.4.12:  Trivial version bumps.
  0.4.11
  Some of the build/path stuff seems a little off... but might be correct?
  All safe code, no security problems.
  
  Reviewed:
  
      src\build_env.rs    +1
      src\build.rs        +1
      src\lib.rs          0
          102 Is this really correct for specifying the *host* environment?
          105 ..
      src\utils.rs        0
          14  Isn't this generating /../../../ ?  Doesn't seem right...
  
      Cargo.toml          +1
      Cargo.toml.orig     +1
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
hMPd_BrWla3bQKc2DAshtlITnSfRD24vTNdxJ2lQHf9_yms_p4DlNrHaMynbc9U0xlvYghH8Gxv3Xp7Z804WDg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T12:14:03.152727500-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: autocfg
  version: 0.1.6
  revision: 0f87a09a981694844b6f36f105c69d228b772f4f
  digest: 4lc9vVY0Lry7N__5WNBeHUCCfrz3OXbeaGpfr3xXnFk
package-diff-base:
  source: "https://crates.io"
  name: autocfg
  version: 0.1.5
  revision: 81ea9f3120f20d684fb97fe90f2848f137519dfc
  digest: AD50FL3HnA4bDSzoE0-Ga3Lr5K-4Mw-LqEwQQRNMa0U
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |
  0.1.6:  LGTM
  0.1.5:  No unsafe code, minor safe-looking file I/O
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
U9UYpAJTXruQy9cLZN6oS7EKGEpkuQ9g7Cf27u7PrLksadj7SBRYH2C4pvBPpWIfRVcUGRAvdQsS8QdJl2CyDQ
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T12:19:19.957089200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: zip
  version: 0.5.3
  revision: a872278429df5a4cf183dc776173bd4f5bd82d1c
  digest: VAaO3YfPvb4lq8rlcRDvGftGr1PuKn8aTwfY598--K0
package-diff-base:
  source: "https://crates.io"
  name: zip
  version: 0.5.2
  revision: cdbdc008fc3a1a9fb1ba7ebb323a7b8fa4ead931
  digest: D0V4h7lsyRa_pSpI2YkLmzjQikyk5zQHU7KEW9zt-W0
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  0.5.3:  Replaced libflate with flate2, minor touchups.  LGTM.
  0.5.2:  Looks like a solid crate.  A few minor concerns:
  
  * 755 permissions.  Necessary, but bandied about.
  * Unsanitized path names are accessible, easy to misuse.
  * Doesn't ban access to `CON` or similar.
  * Lacks fuzz tests
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | benches/read_entry.rs                         | +1    | |
  | examples/extract_lorem.rs                     | +1    | |
  | examples/extract.rs                           | +1    | |
  | examples/file_info.rs                         | +1    | |
  | examples/stdin_info.rs                        | +1    | |
  | examples/write_dir.rs                         | 0     | 755 permissions make me slightly nervous, but I think it's safe
  | examples/write_sample.rs                      | 0     | 755 permissions make me slightly nervous, but I think it's safe
  | script/doc-upload.cfg                         | +1    | |
  | src/compression.rs                            | +1    | |
  | src/cp437.rs                                  | +1    | |
  | src/crc32.rs                                  | +1    | |
  | src/lib.rs                                    | +1    | |
  | src/read.rs                                   | +1    | |
  | src/result.rs                                 | +1    | |
  | src/spec.rs                                   | +1    | |
  | src/types.rs                                  | 0     | Could be a little more defensive towards misue, but pretty solid.
  | src/write.rs                                  | +1    | |
  | tests/data/*.zip                              |       | Unreviewed... probably OK though
  | tests/end_to_end.rs                           | +1    | |
  | tests/invalid_date.rs                         | +1    | |
  | tests/zip64_large.rs                          | +1    | |
  | .gitignore                                    | +1    | |
  | .travis.yml                                   | -1    | | curl random urls
  | appveyor.yml                                  | -1    | | sourceforge mingw urls
  | Cargo.toml                                    | +1    | |
  | Cargo.toml.orig                               | +1    | |
  | LICENSE                                       | +1    | MIT
  | README.md                                     | +1    | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1    | No unsafe code
  | fs        | +1    | Examples/tests appear safe.
  | io        | +1    | |
  | docs      | +1    | |
  | tests     | +1    | Could use more fuzzing tests
  
  ### src/types.rs
  
  | Line | Notes |
  | ----:| ----- |
  | 215   | I'd like this to have a scarier name... but eh, at least it's sound.
  | 250   | This drops invalid components... I think it should return an error on invalid components.  But at least it's sound and shouldn't be vulnerable to path navigation attacks?
  | 250   | This doesn't forbid `CON` or similar.
  | 298   | *Excellent* test, this is exactly what I want to see!
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
NX8-jHEBNAzDbwU09QTv4PwMAZZielfJC3W3FHAJmLQWBRMRst76bVqWj46lQ1Kz5MVfI7DMO-1mnmJcvG3xAg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T12:35:32.927164300-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: idna
  version: 0.2.0
  revision: f491cb442edab75be54ff5961af6458a474f1f9a
  digest: dK3fU-T5qLxslequASWr_6jEiHti2Z3mSedHiItew9k
package-diff-base:
  source: "https://crates.io"
  name: idna
  version: 0.1.5
  digest: unspUc1JbWkOQabypI-vh-wBDliPWDaGCQTUJWeLp1I
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  0.2.0:  Some minor refactoring and a lot of ugly rustfmt(?) reformatting.
  0.1.5:  Read all code, including skimmed every line of autogenerated rust tables. Looked for any security issues, including any obvious DoS attacks from loops. Did not try to manually verify any of the bidi/punycode/idna logic against a spec, but test coverage looks excellent.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
jXBbpWhvYs8hIOWIvXAVQvwr-2o8keOyII2oc7t-Lzot9hDk4hJLagm5WjbE63up9gbPgH5SnRmXW4I5NQ1jDA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T18:43:46.506174500-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: xml-rs
  version: 0.8.0
  digest: iE1JD2oQTrGPIy1_aD_5nzbmVWqCDROu0AIBOVyzbp0
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |
  Fairly full review.  Looks solid.
  * My eyes glazed over a bit when going through the decode state machine.
  * Some of the namespace stuff too.
  * Caught [netvl/xml-rs#179](https://github.com/netvl/xml-rs/issues/179) at least
  
  Pros:
  * Safe code!
  
  Cons:
  * Probably slower than quick-xml
  * Encoding XML not 100% bug free yet
  * No DTD support (yet?)
  
  | File                                                  | Rating | Notes |
  | ----------------------------------------------------- | ------ | ----- |
  | src/reader/parser/inside_cdata.rs                     | +1 | Going through tokenizer at all unnerves me slightly
  | src/reader/parser/inside_closing_tag_name.rs          | +1 | |
  | src/reader/parser/inside_comment.rs                   | +1 | |
  | src/reader/parser/inside_declaration.rs               | +1 | |
  | src/reader/parser/inside_doctype.rs                   | +1 | |
  | src/reader/parser/inside_opening_tag.rs               | +1 | |
  | src/reader/parser/inside_processing_instruction.rs    | +1 | |
  | [src/reader/parser/inside_reference.rs](src/reader/parser/inside_reference.rs) | +1 | |
  | src/reader/parser/mod.rs                              | +1 | |
  | src/reader/parser/outside_tag.rs                      | +1 | |
  | src/reader/config.rs                                  | +1 | |
  | src/reader/error.rs                                   | +1 | |
  | src/reader/events.rs                                  | +1 | |
  | src/reader/lexer.rs                                   | +1 | |
  | src/reader/mod.rs                                     | +1 | |
  | src/writer/config.rs                                  | +1 | Two space indents by default is heresy but whatever.
  | src/writer/emitter.rs                                 | 0 | Encodings not escaped, namespace URIs not escaped.  General attributes *are* escaped though.  CDATA containing ]]> not fixed.
  | src/writer/events.rs                                  | +1 | |
  | src/writer/mod.rs                                     | +1 | |
  | src/analyze.rs                                        | +1 | Should really be moved to bins or examples or something.
  | src/attribute.rs                                      | +1 | |
  | src/common.rs                                         | 0 | Caught [netvl/xml-rs#179](https://github.com/netvl/xml-rs/issues/179)
  | src/escape.rs                                         | +1 | |
  | src/lib.rs                                            | +1 | |
  | src/macros.rs                                         | +1 | |
  | src/name.rs                                           | +1 | |
  | src/namespace.rs                                      | +1 | |
  | src/util.rs                                           | +1 | |
  | tests/documents/sample_1_full.txt                     | +1 | skimmed
  | tests/documents/sample_1_short.txt                    | +1 | skimmed
  | tests/documents/sample_1.xml                          | +1 | skimmed
  | tests/documents/sample_2_full.txt                     | +1 | skimmed
  | tests/documents/sample_2_short.txt                    | +1 | skimmed
  | tests/documents/sample_2.xml                          | +1 | skimmed
  | tests/documents/sample_3_full.txt                     | +1 | skimmed
  | tests/documents/sample_3_short.txt                    | +1 | skimmed
  | tests/documents/sample_3.xml                          | +1 | skimmed
  | tests/documents/sample_4_full.txt                     | +1 | skimmed
  | tests/documents/sample_4_short.txt                    | +1 | skimmed
  | tests/documents/sample_4.xml                          | +1 | skimmed
  | tests/documents/sample_5_short.txt                    | +1 | skimmed
  | tests/documents/sample_5.xml                          | +1 | skimmed
  | tests/event_reader.rs                                 | +1 | |
  | tests/event_writer.rs                                 | +1 | |
  | tests/streaming.rs                                    | +1 | |
  | .cargo-ok                                             | +1 | |
  | .gitignore                                            | +1 | |
  | .travis.yml                                           | +1 | Installs pip travis-cargo
  | Cargo.toml                                            | +1 | |
  | Cargo.toml.orig                                       | +1 | |
  | Changelog.md                                          | +1 | |
  | design.md                                             | +1 | TODO list
  | LICENSE                                               | +1 | MIT, matching Cargo.toml
  | Readme.md                                             | +1 | MIT Licensed
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1    | One small use in test case, PR to remove upstream and apply deny(unsafe_code) lint.
  | fs        | +1    | Only in analyze (and maybe tests?), and sanely
  | io        | +1    | |
  | docs      | +1    | |
  | tests     | 0     | Needs more fuzz tests
  
  src/reader/parser/inside_reference.rs
  -------------------------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 23    | predefined XML entities   | Apparently these 5 are the only predefined entities in XML.  Don't have to worry about the hundreds HTML supports.
  | 52    | custom XML entities       | Not recursive, no XML bomb here unless DTD constructed a huge entry for `extra_entities` already.
  
  TIL
  ===
  * `&impl ?Sized+AsRef<str>`
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
UiPJg_upDgoDFQKgRd5gx6ThhJQYK7a0WDNdwX24UbJE0SW5sWEEHmpT0eq4w6LjtRF4ta9G3zeKSL70WxSlBw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-05T12:23:36.815798200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: tiled-json-rs
  version: 0.2.6
  revision: 7969464b0bd04471e920d9b5ff825efbf835f08f
  digest: PQ-E8KGi2DKLrvyTGC75JETHI8pShfeB7LO4rmXi7rw
review:
  thoroughness: medium
  understanding: medium
  rating: negative
issues:
  - id: "https://gitlab.com/ljcode/tiled-json-rs/issues/1"
    severity: high
    comment: Path traversal attacks?
  - id: "https://gitlab.com/ljcode/tiled-json-rs/issues/2"
    severity: medium
    comment: Panic on bad data (DoS source via UGC?)
comment: |
  Do not use on User Generated Content!
  * Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
  * A couple cases where bad input will panic, a potential DoS vector.
  
  For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)
  
  Pros:
  * JSON is lighter weight than XML
  * Fuller format support vs tiled
  
  Cons:
  * No compression
  * API is just as raw in many ways
  * Requires exporting.
  * Slightly unusual license for rust projects (MPL, instead of MIT/Apache 2)
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | [src/layer.rs](src/layer.rs)                  | 0 | Raw structures
  | src/lib.rs                                    | +1 | |
  | src/map.rs                                    | +1 | |
  | src/object.rs                                 | +1 | |
  | [src/parsers.rs](src/parsers.rs)              | 0 | No decompression support, can panic (not suitable for user generated content)
  | [src/tile_set.rs](src/tile_set.rs)            | -1 | Not suitable for user generated content!
  | src/utils.rs                                  | +1 | |
  | src/wangs.rs                                  | +1 | |
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | LICENSE                                       | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | None
  | fs        | -1 | Path traversal
  | io        | +1 | serde
  | docs      | +1 | |
  | tests     |  0 | Not in crate, but found in repository (https://gitlab.com/ljcode/tiled-json-rs/tree/master/tests)
  
  src/layer.rs
  ------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  17   | TileLayer::chunks | Option seems kinda pointless, also this API is meh
  | 129   | DrawOrder | There are at least 4 draw modes now for layers - although there's also Map / RenderOrder.... blehrg (top->down left->right, top->down right->left, ...)
  
  src/parsers.rs
  --------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 129   | parse_color blue | Despite earlier padding, no guarantee this is valid / may panic (both for overflowing and for not being a unicode boundary.)
  
  src/tile_set.rs
  ---------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 121   | Deserialize for TileSet | File::open - path traversal attacks, lack of virtual filesystem support, etc.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
U9LkaE4UOH6GbJhFDmwbNm4iOITSjvbuLOHBmMpf2FqhYsb5s7jfT7i2evPWA_Vx3nuxFrg8LvcHh4Xb6iJuBw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-05T15:33:53.100473500-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: macro_rules_attribute-proc_macro
  version: 0.0.1
  revision: a8bc2725982dbfbfa60ffcb0305889d9e6d4fe5c
  digest: _VgSABytmSyaU_F92vRUec8-M8NNQp4XIECjHOqFreU
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |
  Internal implementation detail crate of macro_rules_attribute.  Relatively trivial... LGTM.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
uuv4al-ZhctUK-f7wHc16HBYjRU_LR4-h5H1i1lJ8wnVZurT94ERb-swPRAfw_9e9hFMyXI29JYa4rAiYLpMCw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-05T15:35:14.585389900-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: macro_rules_attribute
  version: 0.0.1
  revision: a8bc2725982dbfbfa60ffcb0305889d9e6d4fe5c
  digest: 4mjLH9t7BIfGz66Y8pOo2ZT3rHM89_EOaMOnT8QFm_Q
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |
  Utility crate... LGTM!
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
lEmB7cOCalWj1vvPWimZUzXuvdBkffxrB8FZiSA13bpm_iSIJXTz1_sQIs7mH4Z99gDslUmA95yd1cR14OQ4BA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-07T23:00:19.914911-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: cargo_metadata
  version: 0.8.2
  revision: b72eaa6475633fdc14f57316855200666e322771
  digest: 7bFGe3GO9u5f7kJeQ5YCy5AddExJGsT7pMBYKgMudSM
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |
  Parse `cargo metadata` and `cargo build --message-format=json` output.
  
  0.8.2
  =====
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | src/dependency.rs                             | +1 | |
  | src/diagnostic.rs                             | +1 | |
  | src/errors.rs                                 | +1 | |
  | [src/lib.rs](src/lib.rs)                      | 0 | MetadataCommand makes me slightly paranoid
  | src/messages.rs                               | +1 | |
  | tests/selftest.rs                             | +1 | |
  | tests/test_samples.rs                         | +1 | |
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | 1.32.0 MSRV
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | LICENSE-MIT                                   | +1 | |
  | README.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1    | None
  | fs        | +1    | None
  | io        | 0     | Can invoke `cargo metadata`.  Looks sane, but if passed malicious feature names etc...
  | docs      | +1    | |
  | tests     | +1    | |
  
  src/lib.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 495 | exec | shell access, and I'm paranoid about shell param escaping...
  | 500 | exec | shell access, and I'm paranoid about shell param escaping...
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
dzDu2Umyu95RSQ6qoai_bWoAFgbNBINw-z1fj452AoegW_oZkAWZ5FobOO-KutbA-uZ1hmWKVZ5Z-2EZMQhmBg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-09T11:36:13.226067700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.13
  revision: 2b73150d29fdd8e8e86a3de54a28a75f6dc38b15
  digest: RRAVghkhaf8N01-fzMW8Pi7sOvKYXe9O7znreQX5xx4
package-diff-base:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.12
  revision: c7153e4cf9b1694c49385057633ab5ad6b602b38
  digest: WqfZMcbmdwcOg6mLIp2wyihDrMINHBXIxun-uQfUCfc
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  0.4.13: Trivial version bumps.
  0.4.12: Trivial version bumps.
  0.4.11: Nice and solid looking code.  100% safe code.
  
  Reviewed:
      src\cli.rs:         +1
      src\main.rs:        +1
          151 run_lldb
              Nonterminating loops are problematic, but I think the side effects here should make this work OK?
              (see https://github.com/rust-lang/rust/issues/28728 )
      Cargo.toml:         +1
      Cargo.toml.orig:    +1
          13  readme path references unpackaged readme
  
  TIL:
      Using traits to extend clap::App so flags can be reused per-subcommand is interesting.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
x0enf4heRps6ORFl2r_Qe33UWjb5T8lLldm4eu1T6euVhDrdx63Xm8OwzubMV1Cl20sRtXv-LBPjqY2OxhlKAA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-09T11:36:39.380923100-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.13
  revision: 564091dd668c287b39175381d79210567a8840f8
  digest: ERkxnmuZ3cmgYqQBQ21xfK_bKcdYbU3nwf_toeQGjuA
package-diff-base:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.12
  revision: 40a232b03d6c5afef18f1101b9a6842d59959726
  digest: DF1MThbK5NP1IwEp0q6MKfIcZxccQSvXdw4ibsinQfc
review:
  thoroughness: low
  understanding: low
  rating: neutral
comment: |
  0.4.13:  Trivial version bumps
  0.4.12:  Trivial version bumps
  0.4.11
  thoroughness: low - mostly due to iOS FFI, shell stuff not being super thorough, and review fatigue causing my eyes to glaze over in places.
  understanding: low - lots of shell/path stuff that I don't know well enough to verify
  rating: neutral - see concerns bellow.
  
  
  
  Concerns
  ========
  - Looks like lots of stuff might not work on windows... although there *is* windows-specific code, so maybe?
  - Lots of unimplemented!()
  - iOS support is chock full of unsafe { ... } for FFI.  I haven't verified the FFI signatures.
  - iOS support also uses unsafe { ... } for several objective C casts.  Needs some sanity checked utility functions.
  - iOS support has some potential UB during panics due to unwinding over FFI boundaries.
  - Implements some code signing stuff for iOS.  Necessary, and just your local certs, but I haven't fully reasoned through what security impacts if any that has.
  - Few unit tests visible in the crate itself (maybe they're separate and unpackaged?)
  - Sandboxing concerns
      - Remotes into other devices, including over ssh.
      - Frequent use of shell commands could lead to build server RCEs given malicious project metadata
      - Malicious projects will just use a build.rs file though, front door is open so to speak.
  
  
  
  Details
  =======
  src\android\device.rs           +1
      14  Odd place to install...
  src\android\mod.rs              +1
      155 Could also check android studio SDK install path
  
  src\host\device.rs              +1
  src\host\mod.rs                 +1
  src\host\platform.rs            +1
  
  src\ios\device.rs               0
      50  Not sure if the underlying iOS APIs are thread safe, but this seems acceptable.
      277 unsafe { ... } for FFI.  Looks generally safe except for scary mem::transmute(kCFBooleanTrue), but even that may be right.
      303 unsafe { ... } for FFI.  Looks safe to me.
      367 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      419 unsafe { ... } for FFI.  Looks safe to me.  
      440 unsafe { ... } for FFI.  Looks safe to me.
      454 unsafe { ... } for FFI.  Looks safe to me.
      487 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      519 This thread just eats errors.
      683 unsafe { ... } for FFI.  Transmute... probably safe.
      690 unsafe { ... } for FFI.  Looks safe to me.
      691 unsafe { ... } for FFI.  Scary Core Foundation related transmutes... probably OK, but some utilities to sanity check these conversions in debug would be nice.
      696 unsafe { ... } for FFI.  Another scary-but-probably-safe transmute.
  src\ios\helpers.py              +1
  src\ios\mobiledevice_sys.rs     0
      FFI, not perfectly verified since I don't have an OS X machine to check the headers out on.
      Ref: https://github.com/PanayotCankov/device.io/blob/master/idb/MobileDevice.h
      Various minor const differences, a few functions missing in ref, a few likely improved definitions in places.
      33  am_device_notification_callback_info has    "extra" field vs reference, "subscription".  iOS internal struct?
  src\ios\mod.rs                  0
      43  unsafe { ... } for FFI.  Looks safe to me.
      55  technically unsound inner fn (uses ptrs)
      61  Scary looking as hell, but I think this is just going Box (40) -> void* (48) -> Box (here).
      62  UNDEFINED BEHAVIOR:  Possible panic unwind through FFI, technically an hazard.
          I would've missed this edge case but for the comment, so I'm not docking points.
          Unlikely to cause severe problems, but would be worth fixing.
  src\ios\platform.rs             +1
  src\ios\xcode.rs                +1
      25  Dead code not reviewed
      91  I have not thoroughly audited this code signing stuff, but looks OK.
      199 com.zoy.kali.Dinghy?  A bit hardcoded...
  
  src\platform\mod.rs                 +1
  src\platform\regular_platform.rs    +1
      44  Since when does "regular" mean "*nix" - might not work on windows.
  
  src\script\device.rs            +1
  src\script\mod.rs               +1
  
  src\ssh\device.rs               0
  src\ssh\mod.rs                  +1
  
  src\compiler.rs                 +1
      475 Isn't this *unbanned*?
  src\config.rs                   +1
  src\device.rs                   +1
  src\errors.rs                   +1
  src\lib.rs                      +1
      87  random sleep? why?
  src\overlay.rs                  +1
  src\project.rs                  +1
  src\toolchain.rs                +1
  src\utils.rs                    +1
  
  build.rs                        +1
  Cargo.toml                      +1
  Cargo.toml.orig                 +1
  
  
  
  TIL
  ===
  Neat loop pattern:
  
  ```
  for (a,     b,      c) in &[
      ("a",   "b",    "c"),
      ("aa",  "bb",   "cc"),
  ] {
      ...
  }
  ```
  
  Sysroot paths:  ndk/toolchains/llvm/prebuilt/sysroot/usr/lib/{binutils_cpu}-linux-{abi_kind}"
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
icmKScbBeCIEMg8mT-YKXhUDxN7rXaEVQEm6tqzPMC5gQDq9V5pgDHTtMHzvfAsS0j-AV8ES19wHHBql-OP3Bg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-09T11:36:57.399562800-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.13
  revision: 6486e7ad8bcd6dc3b2368b90abca2a144c8e2114
  digest: "-WIx-vjiOQNFvXHrfl4Pr6mQ2r8xHzbKGhnB6K8mWf4"
package-diff-base:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.12
  revision: 86168d7d01de47f06741cd6430ff9af71b13a4c2
  digest: twtDrhKvr5oxpDt61eNL0u42kj49cmH2RGpEAEsFhRA
review:
  thoroughness: medium
  understanding: low
  rating: positive
comment: |
  0.4.13:  Trivial version bumps.
  0.4.12:  Trivial version bumps.
  0.4.11
  Some of the build/path stuff seems a little off... but might be correct?
  All safe code, no security problems.
  
  Reviewed:
  
      src\build_env.rs    +1
      src\build.rs        +1
      src\lib.rs          0
          102 Is this really correct for specifying the *host* environment?
          105 ..
      src\utils.rs        0
          14  Isn't this generating /../../../ ?  Doesn't seem right...
  
      Cargo.toml          +1
      Cargo.toml.orig     +1
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
bJWBQXCi_fwcQoPSPw2l9hGiUnMocwlb6rUgXa2SIsKrmc1cEfemXKa1ZfDRTNY5w94K78I8jHECiIH9xhCoCg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-11T12:36:19.410124200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: legion
  version: 0.1.1
  revision: 145969ff1e031b6cd1338da62fa59a9732bd7976
  digest: BDQwQCDIk3wJI4sbllYZjvX7PgqmRLO1Dpjcq4kpWps
review:
  thoroughness: medium
  understanding: low
  rating: negative
comment: |
  A low-boilerplate, high performance [archetype] based ECS.
  
  Pros:
  * Archetypes
  * Low boilerplate
  * MIT Licensed
  
  Cons:
  * Widespread use of 16-bit values is begging for overflows
  * Some O(N) patterns I dislike, fortunately with small C.
  * Not MIRI friendly in even the most trivial of examples.
  * Difficult-to-vet unsafe code, strongly suspect some unsound.
  * Omnipresent low-value logging
  * Tons of dependencies (89)
  
  0.1.1
  =====
  
  | crev  |   |
  |-------|---|
  | thoroughness  | medium
  | understanding | low (thanks to use of unsafe)
  | rating        | negative
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | benches/allocation_stress.rs                  | +1 | No global side effects, no black box use...?
  | benches/pos_vel.rs                            | +1 | No global side effects, no black box use...?
  | examples/hello_world.rs                       | +1 | |
  | [src/borrows.rs](src/borrows.rs)              | +1 | API lock design concerns me... and I suspect this relies on [stable_drop_order] to avoid aliasing violations.
  | [src/lib.rs](src/lib.rs)                      | -1 | Difficult to vet unsafe.  Some O(N) and overflow concerns.
  | [src/query.rs](src/query.rs)                  | -1 | Difficult to vet unsafe.
  | [src/storage.rs](src/storage.rs)              | -1 | Tons of difficult-to-vet UnsafeCell use that leaks some of it's unsafety out to other files.
  | tests/query_api.rs                            | +1 | |
  | tests/world_api.rs                            | +1 | |
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | caching cargo might be a bad idea IME
  | bench.png                                     | +1 | |
  | Cargo.toml                                    | +1 | MIT
  | Cargo.toml.orig                               | +1 | MIT
  | LICENSE                                       | +1 | MIT
  | readme.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | -1 | Lots of hard to reason about unsafe.
  | miri      | -1 | Trivial use chokes up miri.
  | fs        | +1 | |
  | io        | +1 | |
  | docs      | +1 | |
  | tests     | +1 | |
  
  src/borrows.rs
  --------------
  | Line  | What                      | Notes |
  | -----:| ------------------------- | ----- |
  | 17    | Borrow::aquire_read       | Possible race condition source.  Attempts to increment if >= 0.  Theoretically could livelock if sufficiently contested, shouldn't in practice.
  | 33    | Borrow::aquire_write      | Possible race condition source.  Attempts to go from 0 => -1.
  | 43    | Drop for Borrow           | +1
  | 57    | Borrow*ed*                | Safe from aliasing violations by virtue of [stable_drop_order] ?  Cannot drop `Borrow` before `value` lifetime has ended.
  | 92    | PartialEq for Borrowed    | 'b lifetime unused...?
  | 98    | Eq for Borrowed           | 'b lifetime unused...?
  | 128   | Borrow*ed*Mut             | Safe from aliasing violations by virtue of [stable_drop_order] ?  Cannot drop `Borrow` before `value` lifetime has ended.
  | 177   | BorrowedSlice             | Safe from aliasing violations by virtue of [stable_drop_order] ?  Cannot drop `Borrow` before `value` lifetime has ended.
  | 220   | BorrowedMutSlice          | Safe from aliasing violations by virtue of [stable_drop_order] ?  Cannot drop `Borrow` before `value` lifetime has ended.
  | 269   | BorrowedIter              | Safe from aliasing violations by virtue of [stable_drop_order] ?  Cannot drop `Borrow` before `value` lifetime has ended.
  | EOF   | | |
  
  src/lib.rs
  ----------
  | Line  | What                              | Notes |
  | -----:| --------------------------------- | ----- |
  | 1     | Lib doc comments                  | +1
  | 254   | WorldId                           | Only 16-bit world IDs? I could see this overflowing in practice, especially if using the advertized ability to stream stuff in.
  | 264   | ArchetypeId                       | Only 16-bit chunk IDs? Also, poor alignment.
  | 281   | Entity                            | Standard dual generation index, I approve... although hot entity IDs could overflow in practice?
  | 310   | Universe::logger                  | Not entirely sure I'm a fan of this.
  | 365   | ComponentIndex & friends          | These Indexes should be used earlier when defining WorldId etc....
  | 409   | impl EntityBlock                  | +1
  | 431   | EntityBlock::in_range             | Slightly bogus u32 cast - EntityBlock::new should enforce u32 size if you want a u32 len...
  | 498   | impl EntityAllocator              | Full of O(N/1024) operations that could be O(1).  Chunking is fine, but this really should abuse the fact that BLOCK_SIZE is constant more instead of looping.
  | 517   | EntityAllocator::create_entity    | A better allocation strategy (IMO) would be to always start with the block we last allocated from.  Will have degenerate behavior if we're constantly freeing/allocating from the first block.
  | 625   | World::merge doc comment          | Concerning, implies API is unsound
  | 638   | World::merge                      | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self` implying we have exclusive access to self.archetypes[?].chunks()[?].entities()
  | 719   | World::insert                     | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self` implying we have exclusive access to self.archetypes[?].chunks()[?].entities()
  | 720   | World::insert                     | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self` implying we have exclusive access to self.archetypes[?].chunks()[?].entities()
  | 805   | World::entity_data_mut            | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self` implying we have exclusive access to self.archetypes[?].chunks()[?].entities()
  | 841   | World::prep_archetype             | `unsafe { ... }` - Probably sound - index should be valid - but why not just `.map(|(_, a)| a)` instead of using an index?
  | 1016  | EntitySource for IterEntitySource | `unsafe { ... }` - I *think* this might be sound thanks to `&mut Chunk` implying we have exclusive access to chunk.entities()
  | EOF   | | |
  
  src/query.rs
  ------------
  | Line  | What                                  | Notes |
  | -----:| ------------------------------------- | ----- |
  | *     | PhantomData<T>                        | Frequently used when T is already used in the struct, I'm concerned I'm missing something.
  | 196   | impl View for (...) validate()        | `unsafe { ... }` - `0 <= i < j < types.len()`, so both calls to get_unchecked should be sound.
  | 276   | std::ops::Not for Passthrough         | Oooh, operator overloading abuse.  Probably fine?
  | 1065  | impl Iterator for ZipEntities next    | `unsafe { ... }` - Sketchy, assumes data.len() <= entities.len() and that's not a particularly trivial assertion to prove.
  | 1088  | ChunkView::entities                   | `unsafe { ... }` - NFI if this is sound or not.
  | EOF   | | |
  
  src/storage.rs
  --------------
  | Line  | What                                      | Notes |
  | -----:| ----------------------------------------- | ----- |
  | 19    | StorageVec<T>                             | UnsafeCell!  Oh no.
  | 39    | unsafe fn StorageVec::data_mut(&self)     | Because this doesn't take `&mut self`, this forces the caller to enforce borrow checking manually.
  | 47    | ComponentStorage::remove for StorageVec   | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self`
  | 52    | ComponentStorage::len for StorageVec      | `unsafe { ... }` - Unsound?  It's not clear what, if anything, ensures len() isn't being mutated by another borrower.
  | 104   | unsafe fn Chunk::entities_unchecked       | Because this doesn't take `&mut self`, this forces the caller to enforce borrow checking manually.
  | 126   | unsafe fn Chunk::entity_data_unchecked    | +1?
  | 141   | unsafe fn Chunk::entity_data_mut_unchecked| Ditto.
  | 157   | Chunk::entity_data                        | `unsafe { ... }` - Unsound?  "Locks" via borrow types *after* constructing `&T`, which is too late.
  | 174   | Chunk::entity_data_mut                    | `unsafe { ... }` - Unsound?  "Locks" via borrow types *after* constructing `&mut T`, which is too late.
  | 199   | Chunk::shared_data                        | `unsafe { ... }` - NFI if this is sound or not.  Haven't groked why SharedComponentStore is UnsafeCell or what protects it, if anything.
  | 212   | Chunk::remove                             | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self`
  | EOF   | | |
  
  Miri Example
  ------------
  ```rust
  use legion::prelude::*;
  
  [test] // PREPEND YOUR OWN POUND SIGN
  fn test() {
      let universe = Universe::new(None);
      let mut world = universe.create_world();
      world.insert_from((), vec![(1i32,)]);
  }
  ```
  
  ```cmd
  rustup toolchain install nightly-2019-09-11
  rustup component add miri --toolchain=nightly-2019-09-11
  cargo +nightly-2019-09-11 miri test
  ```
  
  ```
  error[E0080]: Miri evaluation error: trying to reborrow for SharedReadWrite, but parent tag <126591> does not have an appropriate item in the borrow stack
      |
      = note: inside call to `<legion::IterEntitySource<std::vec::IntoIter<(i32,)>, (i32,)> as legion::EntitySource>::write` at C:\Users\Mike\.cargo\registry\src\github.com-1ecc6299db9ec823\legion-0.1.1\src\lib.rs:716:29
      = note: inside call to `legion::World::insert::<(), legion::IterEntitySource<std::vec::IntoIter<(i32,)>, (i32,)>>` at C:\Users\Mike\.cargo\registry\src\github.com-1ecc6299db9ec823\legion-0.1.1\src\lib.rs:689:9
  note: inside call to `legion::World::insert_from::<(), std::vec::Vec<(i32,)>>` at src\lib.rs:7:5
      --> src\lib.rs:7:5
       |
  7    |     world.insert_from((), vec![(1i32,)]);
       |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  note: inside call to `test` at src\lib.rs:4:1
      --> src\lib.rs:4:1
       |
  4    | / fn test() {
  5    | |     let universe = Universe::new(None);
  6    | |     let mut world = universe.create_world();
  7    | |     world.insert_from((), vec![(1i32,)]);
  8    | | }
       | |_^
  ```
  
  TIL
  ---
  * `TypeId::of::<T>()`
  
  
  
  [stable_drop_order]:    https://github.com/rust-lang/rfcs/blob/master/text/1857-stabilize-drop-order.md
  [Unity]:                https://unity.com
  [archetype]:            https://github.com/SanderMertens/ecs-faq#what-is-an-archetype-based-ecs
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
WJOvZkLkhiwgFliZJZsycUsUZ7UlsCKKbMFJLTJH9Wn8MsDaLvXKcVJuCiaacgU7dHOLcpfX7aVv_aai_XzxCg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-15T16:24:48.249566200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: shellexpand
  version: 0.1.0
  digest: KzKf6xqhHBTdLilZZX79juTDdId43n-Ospa2-Vow27U
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |
  Pros:
  * 100% safe code.
  * 0 dependencies.
  * Does exactly what it's supposed to do.
  * Great test coverage.
  
  Cons:
  * Might want to feature-gate functions which assume std::env access under the hood.
  * Env access (but that's the whole point)
  * No ~username/ support.
  * No %ENV% support (windows style env var syntax... or maybe that's a feature?).
  
  0.1.0
  =====
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | [src/lib.rs](src/lib.rs)                      | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | Installs travis-cargo
  | Cargo.lock                                    | +1 | |
  | Cargo.toml                                    | +1 | No 3rd party deps
  | LICENSE-APACHE                                | +1 | |
  | LICENSE-MIT                                   | +1 | |
  | Readme.md                                     | +1 | Properly dual licensed
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | None
  | miri      | -1 | "can't call foreign function: GetCurrentProcess"
  | fs        | +1 | None
  | io        |  0 | Hardcoded env fns might need to be featured out for browser WASM targets
  | docs      | +1 | |
  | tests     | +1 | Doc tests
  
  src/lib.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 1     | lib.rs doc comments                       | +1
  | 155   | fn full_with_context                      | +1
  | 229   | fn full_with_context_no_errors            | +1
  | 283   | fn full                                   | +1
  | 295   | struct LookupError                        | +1
  | 303   | impl Display for LookupError              | +1
  | 309   | impl Error for LookupError                | +1
  | 314   | macro_rules try_lookup!                   | +1
  | 323   | fn is_valid_var_name_char                 | +1 - includes unicode, as mentioned in docs
  | 393   | fn env_with_context                       | +1
  | 506   | fn env_with_context_no_errors             | +1
  | 552   | fn env                                    | +1
  | 584   | fn tilde_with_context                     | 0 - example incomplete
  | 633   | fn tilde                                  | +1
  | 637   | mod tilde_tets                            | +1
  | 675   | mod env_test                              | +1
  | 821   | mod full_tests                            | +1
  
  TIL
  ---
  Apparently you *can* use references link style for badge images.  Huh!  I should use that for reviews...
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
F7aVTz9IpnE6Wn-zxwYI2yuVAHbNdme3vFuJaHISvGTg4KW34NbhP98oyqPQ_7WBFHqiPcLH9GFsTOcKAZDTCg
-----END CREV PACKAGE REVIEW-----

