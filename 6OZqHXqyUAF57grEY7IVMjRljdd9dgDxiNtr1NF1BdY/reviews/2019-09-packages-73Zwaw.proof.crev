-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T18:17:13.727715100-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: midir
  version: 0.5.0
  digest: s5GKXD-YiSrHuHQcEayi1xVKldmjnjQj0MP73R1tknI
review:
  thoroughness: low
  understanding: low
  rating: negative
comment: |
  Good starting point, and my favorite Rust MIDI API so far, but likely unsound as stands.
  
  Pros:
    - Pure rust, no mucking with building building C/C++ libs like with portmidi
    - To be WASM/Browser compatible (PR made).
  
  Cons:
    - Likely unsound as currently stands (transmute_copy, type punning, sketchy memalloc crate use, haven't vetted thread safety properly, ...)
    - API clunky in spots (mix of known issues and easily fixed surface level stuff)
    - Needs more unit test coverage if possible (are there perhaps virtual MIDI devices for windows that could be added to CI...?)
  
  TODO:
    - rating: netural: Eliminate as much sketchy unsafe as possible.
    - rating: positive: Clean up API design a bit (async, saner member functions, deal with Send inconsistency, maybe make connecting not consume MidiInput s?)
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | examples/test_forward.rs                      | +1 | |
  | examples/test_play.rs                         | +1 | |
  | examples/test_reuse.rs                        | +1 | |
  | examples/test_sysex.rs                        | +1 | |
  | [src/backend/asla/mod.rs](src/backend/asla/mod.rs) | 0 | Some extra `unsafe`, use of uninit data possibly UB
  | src/backend/coremidi/mod.rs                   | 0 | Is Core MIDI thread safe?  (`unsafe impl Send for MidiOutputConnection`)
  | src/jack/mod.rs                               | -1 | Use of transmute_copy on Box is skeeeeeeetchy, uninitialized too :(
  | src/jack/wrappers.rs                          | -1 | Is JACK thread safe?  Ringbuffer::read is unsound!  Lots of unsafe but mostly for sane FFI.
  | src/winmm/handler.rs                          | 0 | unsafe for FFI, some pointer casts I haven't thoroughly vetted |
  | src/winmm/mod.rs                              | 0 | unsafe for FFI, uninitialized :(, sketchy deallocate API.  Is WinMM thread safe?  333: UB &mut violates aliasing?
  | src/backend/mod.rs                            | +1 | |
  | src/os/mod.rs                                 | +1 | |
  | src/os/unix.rs                                | +1 | |
  | src/common.rs                                 | 0 | Consumption of the MidiInput/MidiOutput clients/factories on connect seems a bit strange, especially after the ports refactor.
  | src/errors.rs                                 | +1 | |
  | src/lib.rs                                    | +1 | unsafe, but sound |
  | tests/virtual.rs                              | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | RCE: Downloads/installs jack from the internet |
  | appveyor.yml                                  | +1 | |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | LICENSE                                       | +1 | |
  | README.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | -1    | 99% sure something in here is unsound.  transmute_copy, type punning, use of memalloc crate.
  | fs        | +1    | N/A |
  | io        | 0     | libc... maybe safe? |
  | docs      | +1    | |
  | tests     | 0     | Good examples, but needs more automated unit/integration tests.  Admittedly hard given the lack of MIDI devices on CI servers... |
  
  src/backend/asla/mod.rs
  -----------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  21 | fn poll                             | +1
  |  81 | unsafe impl Send for EventEncoder   | Is ASLA thread safe?
  | 578 | unsafe in handle_input              | Construction of uninitialized vec, UB?
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
S8JnzOR-p0nQ7JNQGb5mtYnMMiIoo-a9GK9SYK5_MXoRPKAgSYhOCVKq7uLGCjJqdcqPh8as-bhXImZukSEEAA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T19:11:39.449625800-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: tiled
  version: 0.8.0
  digest: nbMitPCGxdlRA877oaoOuABkDx61j6YLOs_PJQDvyII
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  Do not use on User Generated Content!
      * Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
      * No obvious protection against zipbombs
      * A couple cases where bad input will panic, a potential DoS vector.
  
  For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)
  
  There's also a few missing features:
      * Wang Tiles
      * Terrains
      * "file" Custom Properties
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | assets/tiled_base64_external.tmx              | +1 | |
  | assets/tiled_base64_gzip.tmx                  | +1 | |
  | assets/tiled_base64_zlib.tmx                  | +1 | |
  | assets/tiled_base64.tmx                       | +1 | |
  | assets/tiled_csv.tmx                          | +1 | |
  | assets/tiled_image_layers.tmx                 | +1 | |
  | assets/tiled_xml.tmx                          | +1 | |
  | tilesheet.png                                 | +1 | Neat looking modern tileset... wonder what the source is!
  | tilesheet.tsx                                 | +1 | |
  | examples/main.rs                              | +1 | |
  | [src/lib.rs](src/lib.rs)                      | +1 | |
  | tests/lib.rs                                  | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | Sparse... no MSRV, beta/nightly, etc. |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | CONTRIBUTORS.md                               | +1 | |
  | README.md                                     | +1 | Dead link to tileset source
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | No unsafe
  | fs        | -1 | See Tileset::new_reference notes
  | io        | 0  | Brittle XML parsing, but OK for limited inputs.
  | docs      | -1 | Barely any.
  | tests     | +1 | |
  
  src/lib.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  28 | get_attrs!              | Eep
  |  53 | parse_tag!              | Mishandles nested tags... fortunately that's probably not necessary.
  |  97 | Colour::from_str        | British... and a possible source of panics.
  | 161 | PropertyValue::new      | No "file" support (see https://doc.mapeditor.org/en/stable/manual/custom-properties/#adding-properties)
  | 238 | Map::new                | My kingdom for some variable names!
  | 256 | Map::new                | Still using try!
  | 385 | Tileset::new_reference  | Possible path traversal attacks, limits ability to inject your own virtual filesystem.
  | 860 | decode_csv              | I've heard decoding arbitrary CSV is way more complicated than this... but this probably works for tile data as used in tmx files.
  | 883 | convert_to_u32          | Kinda want this to be based on iterators to avoid an extra alloc...
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
JQQhh3H5U8EH4kQly3q87dB-cRJEshhtfjUWEM1WViKNBcpH5Mx6uD82Iuesa_A6WE07FQzIPeoxQPYjgRG1DA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T19:12:29.704124700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: tiled
  version: 0.8.0
  digest: nbMitPCGxdlRA877oaoOuABkDx61j6YLOs_PJQDvyII
review:
  thoroughness: medium
  understanding: medium
  rating: negative
comment: |
  Do not use on User Generated Content!
      * Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
      * No obvious protection against zipbombs
      * A couple cases where bad input will panic, a potential DoS vector.
  
  For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)
  
  There's also a few missing features:
      * Wang Tiles
      * Terrains
      * "file" Custom Properties
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | assets/tiled_base64_external.tmx              | +1 | |
  | assets/tiled_base64_gzip.tmx                  | +1 | |
  | assets/tiled_base64_zlib.tmx                  | +1 | |
  | assets/tiled_base64.tmx                       | +1 | |
  | assets/tiled_csv.tmx                          | +1 | |
  | assets/tiled_image_layers.tmx                 | +1 | |
  | assets/tiled_xml.tmx                          | +1 | |
  | tilesheet.png                                 | +1 | Neat looking modern tileset... wonder what the source is!
  | tilesheet.tsx                                 | +1 | |
  | examples/main.rs                              | +1 | |
  | [src/lib.rs](src/lib.rs)                      | +1 | |
  | tests/lib.rs                                  | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | Sparse... no MSRV, beta/nightly, etc. |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | CONTRIBUTORS.md                               | +1 | |
  | README.md                                     | +1 | Dead link to tileset source
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | No unsafe
  | fs        | -1 | See Tileset::new_reference notes
  | io        | 0  | Brittle XML parsing, but OK for limited inputs.
  | docs      | -1 | Barely any.
  | tests     | +1 | |
  
  src/lib.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  28 | get_attrs!              | Eep
  |  53 | parse_tag!              | Mishandles nested tags... fortunately that's probably not necessary.
  |  97 | Colour::from_str        | British... and a possible source of panics.
  | 161 | PropertyValue::new      | No "file" support (see https://doc.mapeditor.org/en/stable/manual/custom-properties/#adding-properties)
  | 238 | Map::new                | My kingdom for some variable names!
  | 256 | Map::new                | Still using try!
  | 385 | Tileset::new_reference  | Possible path traversal attacks, limits ability to inject your own virtual filesystem.
  | 860 | decode_csv              | I've heard decoding arbitrary CSV is way more complicated than this... but this probably works for tile data as used in tmx files.
  | 883 | convert_to_u32          | Kinda want this to be based on iterators to avoid an extra alloc...
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
UPihZNtZegvbMZIxrn4gnusI2LjjAw5iwqLNh10vSj7fEPYtUUBA8cXH47mCajH7E0wFYThxNOEBH0978ZFyBw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T21:25:35.459217300-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: tiled-json-rs
  version: 0.2.6
  revision: 7969464b0bd04471e920d9b5ff825efbf835f08f
  digest: PQ-E8KGi2DKLrvyTGC75JETHI8pShfeB7LO4rmXi7rw
review:
  thoroughness: medium
  understanding: medium
  rating: negative
comment: |
  Do not use on User Generated Content!
  * Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
  * A couple cases where bad input will panic, a potential DoS vector.
  
  For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)
  
  Pros:
  * JSON is lighter weight than XML
  * Fuller format support vs tiled
  
  Cons:
  * No compression
  * API is just as raw in many ways
  * Requires exporting.
  * Slightly unusual license for rust projects (MPL, instead of MIT/Apache 2)
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | [src/layer.rs](src/layer.rs)                  | 0 | Raw structures
  | src/lib.rs                                    | +1 | |
  | src/map.rs                                    | +1 | |
  | src/object.rs                                 | +1 | |
  | [src/parsers.rs](src/parsers.rs)              | 0 | No decompression support, can panic (not suitable for user generated content)
  | [src/tile_set.rs](src/tile_set.rs)            | -1 | Not suitable for user generated content!
  | src/utils.rs                                  | +1 | |
  | src/wangs.rs                                  | +1 | |
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | LICENSE                                       | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | None
  | fs        | -1 | Path traversal
  | io        | +1 | serde
  | docs      | +1 | |
  | tests     | -1 | Not in crate, maybe in repository
  
  src/layer.rs
  ------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  17   | TileLayer::chunks | Option seems kinda pointless, also this API is meh
  | 129   | DrawOrder | There are at least 4 draw modes now for layers - although there's also Map / RenderOrder.... blehrg (top->down left->right, top->down right->left, ...)
  
  src/parsers.rs
  --------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 129   | parse_color blue | Despite earlier padding, no guarantee this is valid / may panic (both for overflowing and for not being a unicode boundary.)
  
  src/tile_set.rs
  ---------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 121   | Deserialize for TileSet | File::open - path traversal attacks, lack of virtual filesystem support, etc.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
raGWyoOiRbsdX4c-qsXMmwq-ndTQadVUKykxQbprgZrEa2hamkgDTCMR-1yny44oX3I_3O6UlzFLwy2jWWkCCQ
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T10:42:32.035056700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: lazy_static
  version: 1.4.0
  revision: 421669662b35fcb455f2902daed2e20bbbba79b6
  digest: 95REZRx8ItDao_V9l7sOsW9-OB6Jc5C7azc9mNC07fI
package-diff-base:
  source: "https://crates.io"
  name: lazy_static
  version: 1.3.0
  revision: 03f62910a94886987cdb686c7509bbdc846481e3
  digest: 21bjQkc4fD-Kvjb0xv1fN7M4oaembbxoEDirmvOQwbg
review:
  thoroughness: high
  understanding: high
  rating: positive
comment: |
  1.4.0:  Read diff, looks fine.
  1.3.0:  Read all of src, skimmed all of tests.  core_lazy.rs looks a little odd, but is 100% safe code - any issues would be in it's core dependency, spin.  inline_lazy.rs contains unsafe blocks... look safe, but downgrades rating to merely positive.  lib.rs is just safe macros.  Tests all pass.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
bW-yCt94w53nltaweNxVLUbUSU6ad8w5h7y_7EbEtdf4TJI7WE9tIitsychEig-ocoOQlHiRj74flYQiELoXAw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:21:11.323775200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: warmy
  version: 0.13.0
  revision: 936c095d3ef1f581897bea7113a6415afb453311
  digest: qtom3iCAxYEF054ycEN79jtrYqfibZMAaLQ8msqc0SY
package-diff-base:
  source: "https://crates.io"
  name: warmy
  version: 0.12.0
  revision: a1e2e8162f8bb9061b58cd66cfc0aaefebd0cbc7
  digest: WrTgwvpdKO6GHtzIY3FcEmEq4Ea_8UFRGAEyBkVvVl4
review:
  thoroughness: low
  understanding: low
  rating: positive
comment: |
  0.13.0:  RON support, lockfile/CI changes.  LGTM.
  0.12.0:  Looks good to me.  Some of the finer points are a little obtuse to me (RE: reloads, dependencies, an the inspect trait.)
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | examples/toml/hello.html                      | +1    | |
  | examples/toml/main.rs                         | +1    | |
  | src/context.rs                                | +1    | |
  | src/json.rs                                   | +1    | |
  | [src/key.rs](src/key.rs)                      | +1    | |
  | src/lib.rs                                    | +1    | |
  | src/load.rs                                   | +1    | |
  | src/res.rs                                    | +1    | |
  | src/toml.rs                                   | +1    | |
  | tests/lib.rs                                  | +1    | |
  | .cargo_vcs_info.json                          | +1    | |
  | .cargo-ok                                     | +1    | |
  | .gitignore                                    | +1    | |
  | .travis.yml                                   | +1    | |
  | Cargo.toml                                    | +1    | |
  | Cargo.toml.orig                               | +1    | |
  | CHANGELOG.md                                  | +1    | |
  | LICENSE                                       | +1    | |
  | README.md                                     | +1    | |
  | rustfmt.toml                                  | +1    | Ew 2 space indents gross
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1    | No unsafe code
  | fs        | +1    | Nothing fishy
  | io        | +1    | Nothing fishy
  | docs      | +1    | Good god there are a lot.  Needs more concrete motivating examples though.
  | tests     | +1    | |
  
  src/key.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 12    | Key   | `'static` lifetime... minor leak? but I probably don't care?
  
  TIL
  ---
  cargo-sync-readme
  cargo-outdated
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
Vq7md231i9xbc2Fuxu_iH35WOQKlHohL-mtOKc1v2E_ZLkxjtm6R7N3jyqIjw4zy_3t0lf_8QySAQtenRXteDA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:29:55.770920200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: require_unsafe_in_body
  version: 0.2.0-alpha
  revision: 23c74e9e01621e331851d2f810150b9241ef94a7
  digest: oUa3rwD3LvMZt2KMy7p9XBY_-Jf5z-JRbg-gsHYw30o
review:
  thoroughness: medium
  understanding: low
  rating: positive
comment: |
  0.2.0-alpha:  Significant refactoring, adding support for generics.  LGTM?
  0.1.2:  Seems solid, although my syn-fu is weak, limiting my ability to review this.
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | src/docs/require_unsafe_in_bodies.md          | +1 | |
  | src/docs/require_unsafe_in_body.md            | +1 | |
  | src/utils/macros.rs                           | +1 | |
  | src/utils/mod.rs                              | +1 | |
  | src/lib.rs                                    | +1 | understanding: low - I'm barely following along
  | src/tests.rs                                  | +1 | |
  | tests/ui/body_on_method_2.rs                  | +1 | |
  | tests/ui/body_on_method_2.stderr              | +1 | |
  | tests/ui/body_on_method.rs                    | +1 | |
  | tests/ui/body_on_method.stderr                | +1 | |
  | tests/ui/readme.rs                            | +1 | |
  | tests/ui/readme.stderr                        | +1 | |
  | tests/impl_method_2.rs                        | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/impl_method.rs                          | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/trait_default_method.rs                 | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/ui.rs                                   | +1 | The cfgs on unit-tests look the wrong way around?
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | Cargo.toml                                    | +1 | MIT
  | Cargo.toml.orig                               | +1 | MIT
  | LICENSE                                       | +1 | MIT
  | Makefile                                      | +1 | Unixy
  | README.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1    | Wrangles unsafe but doesn't actually use it itself
  | fs        | +1    | None
  | io        | +1    | Modifies codegen through syn
  | docs      | +1    | |
  | tests     | +1    | |
  
  TIL
  ---
  ```rs
  let Struct { ref member, ref mut member2, .. } = to_destructure;
  ```
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
8FN3bd_sDtrrpXXA9gGdXe5gPSYXDfyqA-UsAN7ef22COyrKdJjD7qPy-Z9XnH8yVT87cXnbhTXXbE584g3WBw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:34:14.673686500-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: require_unsafe_in_body
  version: 0.2.0
  revision: 0920d4ef6482ceaa2807a17372be3221053b2129
  digest: rkvU8QhHqYup1ET1RLgkQENb1l8bfABNZXIG0TqwpHI
package-diff-base:
  source: "https://crates.io"
  name: require_unsafe_in_body
  version: 0.2.0-alpha
  revision: 23c74e9e01621e331851d2f810150b9241ef94a7
  digest: oUa3rwD3LvMZt2KMy7p9XBY_-Jf5z-JRbg-gsHYw30o
review:
  thoroughness: low
  understanding: low
  rating: positive
comment: |
  0.2.0:  More refactoring surrounding generics.
  0.2.0-alpha:  Significant refactoring, adding support for generics.  LGTM?
  0.1.2:  Seems solid, although my syn-fu is weak, limiting my ability to review this.
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | src/docs/require_unsafe_in_bodies.md          | +1 | |
  | src/docs/require_unsafe_in_body.md            | +1 | |
  | src/utils/macros.rs                           | +1 | |
  | src/utils/mod.rs                              | +1 | |
  | src/lib.rs                                    | +1 | understanding: low - I'm barely following along
  | src/tests.rs                                  | +1 | |
  | tests/ui/body_on_method_2.rs                  | +1 | |
  | tests/ui/body_on_method_2.stderr              | +1 | |
  | tests/ui/body_on_method.rs                    | +1 | |
  | tests/ui/body_on_method.stderr                | +1 | |
  | tests/ui/readme.rs                            | +1 | |
  | tests/ui/readme.stderr                        | +1 | |
  | tests/impl_method_2.rs                        | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/impl_method.rs                          | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/trait_default_method.rs                 | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/ui.rs                                   | +1 | The cfgs on unit-tests look the wrong way around?
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | Cargo.toml                                    | +1 | MIT
  | Cargo.toml.orig                               | +1 | MIT
  | LICENSE                                       | +1 | MIT
  | Makefile                                      | +1 | Unixy
  | README.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1    | Wrangles unsafe but doesn't actually use it itself
  | fs        | +1    | None
  | io        | +1    | Modifies codegen through syn
  | docs      | +1    | |
  | tests     | +1    | |
  
  TIL
  ---
  ```rs
  let Struct { ref member, ref mut member2, .. } = to_destructure;
  ```
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
Ca-__HPuokuxpTXU408SFVoa9ujcipGBmMwyOesYuUisdN2IQinHUocznzFP2OejmjjqXFFqDbZDy0g90xYnBw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:36:01.272632600-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.12
  revision: c7153e4cf9b1694c49385057633ab5ad6b602b38
  digest: WqfZMcbmdwcOg6mLIp2wyihDrMINHBXIxun-uQfUCfc
package-diff-base:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.11
  revision: 4b1fed4d7a2a996c3be5e741e8768e9bb67051bd
  digest: Rd_BtsF4rMcS-YS9C_uuIUJ_6g5ihmmIw9zqOZ2atnQ
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  0.4.12: Trivial version bumps.
  0.4.11: Nice and solid looking code.  100% safe code.
  
  Reviewed:
      src\cli.rs:         +1
      src\main.rs:        +1
          151 run_lldb
              Nonterminating loops are problematic, but I think the side effects here should make this work OK?
              (see https://github.com/rust-lang/rust/issues/28728 )
      Cargo.toml:         +1
      Cargo.toml.orig:    +1
          13  readme path references unpackaged readme
  
  TIL:
      Using traits to extend clap::App so flags can be reused per-subcommand is interesting.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
pMgYPQqb8riFgALG1EDNIE2bdpbUZSGRZE_6_FC99609xFDN6tK4_wAARjsWnPqGKTKS1ZFf1o1ghftki0rEDA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:37:00.391936900-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.12
  revision: 40a232b03d6c5afef18f1101b9a6842d59959726
  digest: DF1MThbK5NP1IwEp0q6MKfIcZxccQSvXdw4ibsinQfc
package-diff-base:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.11
  revision: ac155d160b1d6ed4031d3944dc076f6e5cec508f
  digest: qdzqoM1oVvQiujz5Ym13399xTf_9neZhAUD4tt_UIfY
review:
  thoroughness: low
  understanding: low
  rating: neutral
comment: |
  0.4.12:  Trivial version bumps
  0.4.11
  thoroughness: low - mostly due to iOS FFI, shell stuff not being super thorough, and review fatigue causing my eyes to glaze over in places.
  understanding: low - lots of shell/path stuff that I don't know well enough to verify
  rating: neutral - see concerns bellow.
  
  
  
  Concerns
  ========
  - Looks like lots of stuff might not work on windows... although there *is* windows-specific code, so maybe?
  - Lots of unimplemented!()
  - iOS support is chock full of unsafe { ... } for FFI.  I haven't verified the FFI signatures.
  - iOS support also uses unsafe { ... } for several objective C casts.  Needs some sanity checked utility functions.
  - iOS support has some potential UB during panics due to unwinding over FFI boundaries.
  - Implements some code signing stuff for iOS.  Necessary, and just your local certs, but I haven't fully reasoned through what security impacts if any that has.
  - Few unit tests visible in the crate itself (maybe they're separate and unpackaged?)
  - Sandboxing concerns
      - Remotes into other devices, including over ssh.
      - Frequent use of shell commands could lead to build server RCEs given malicious project metadata
      - Malicious projects will just use a build.rs file though, front door is open so to speak.
  
  
  
  Details
  =======
  src\android\device.rs           +1
      14  Odd place to install...
  src\android\mod.rs              +1
      155 Could also check android studio SDK install path
  
  src\host\device.rs              +1
  src\host\mod.rs                 +1
  src\host\platform.rs            +1
  
  src\ios\device.rs               0
      50  Not sure if the underlying iOS APIs are thread safe, but this seems acceptable.
      277 unsafe { ... } for FFI.  Looks generally safe except for scary mem::transmute(kCFBooleanTrue), but even that may be right.
      303 unsafe { ... } for FFI.  Looks safe to me.
      367 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      419 unsafe { ... } for FFI.  Looks safe to me.  
      440 unsafe { ... } for FFI.  Looks safe to me.
      454 unsafe { ... } for FFI.  Looks safe to me.
      487 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      519 This thread just eats errors.
      683 unsafe { ... } for FFI.  Transmute... probably safe.
      690 unsafe { ... } for FFI.  Looks safe to me.
      691 unsafe { ... } for FFI.  Scary Core Foundation related transmutes... probably OK, but some utilities to sanity check these conversions in debug would be nice.
      696 unsafe { ... } for FFI.  Another scary-but-probably-safe transmute.
  src\ios\helpers.py              +1
  src\ios\mobiledevice_sys.rs     0
      FFI, not perfectly verified since I don't have an OS X machine to check the headers out on.
      Ref: https://github.com/PanayotCankov/device.io/blob/master/idb/MobileDevice.h
      Various minor const differences, a few functions missing in ref, a few likely improved definitions in places.
      33  am_device_notification_callback_info has    "extra" field vs reference, "subscription".  iOS internal struct?
  src\ios\mod.rs                  0
      43  unsafe { ... } for FFI.  Looks safe to me.
      55  technically unsound inner fn (uses ptrs)
      61  Scary looking as hell, but I think this is just going Box (40) -> void* (48) -> Box (here).
      62  UNDEFINED BEHAVIOR:  Possible panic unwind through FFI, technically an hazard.
          I would've missed this edge case but for the comment, so I'm not docking points.
          Unlikely to cause severe problems, but would be worth fixing.
  src\ios\platform.rs             +1
  src\ios\xcode.rs                +1
      25  Dead code not reviewed
      91  I have not thoroughly audited this code signing stuff, but looks OK.
      199 com.zoy.kali.Dinghy?  A bit hardcoded...
  
  src\platform\mod.rs                 +1
  src\platform\regular_platform.rs    +1
      44  Since when does "regular" mean "*nix" - might not work on windows.
  
  src\script\device.rs            +1
  src\script\mod.rs               +1
  
  src\ssh\device.rs               0
  src\ssh\mod.rs                  +1
  
  src\compiler.rs                 +1
      475 Isn't this *unbanned*?
  src\config.rs                   +1
  src\device.rs                   +1
  src\errors.rs                   +1
  src\lib.rs                      +1
      87  random sleep? why?
  src\overlay.rs                  +1
  src\project.rs                  +1
  src\toolchain.rs                +1
  src\utils.rs                    +1
  
  build.rs                        +1
  Cargo.toml                      +1
  Cargo.toml.orig                 +1
  
  
  
  TIL
  ===
  Neat loop pattern:
  
  ```
  for (a,     b,      c) in &[
      ("a",   "b",    "c"),
      ("aa",  "bb",   "cc"),
  ] {
      ...
  }
  ```
  
  Sysroot paths:  ndk/toolchains/llvm/prebuilt/sysroot/usr/lib/{binutils_cpu}-linux-{abi_kind}"
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
KZoetE2dJ7Rcn6Z_oprLII4A6Y3IaYK-UPPNwUn8uFpwpPHHoVXrWacwNGm-OAycj7gzSgI2pfWy-aughKnqDw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:37:52.203782400-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.12
  revision: 86168d7d01de47f06741cd6430ff9af71b13a4c2
  digest: twtDrhKvr5oxpDt61eNL0u42kj49cmH2RGpEAEsFhRA
package-diff-base:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.11
  revision: 1fa5b89b2bb50264a5fd93d9791b843763cf7682
  digest: 70P30qFd_VRtAAJO0wqEDS2TWJFXeQT3T-eQKFXZP7A
review:
  thoroughness: medium
  understanding: low
  rating: positive
comment: |
  0.4.12:  Trivial version bumps.
  0.4.11
  Some of the build/path stuff seems a little off... but might be correct?
  All safe code, no security problems.
  
  Reviewed:
  
      src\build_env.rs    +1
      src\build.rs        +1
      src\lib.rs          0
          102 Is this really correct for specifying the *host* environment?
          105 ..
      src\utils.rs        0
          14  Isn't this generating /../../../ ?  Doesn't seem right...
  
      Cargo.toml          +1
      Cargo.toml.orig     +1
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
hMPd_BrWla3bQKc2DAshtlITnSfRD24vTNdxJ2lQHf9_yms_p4DlNrHaMynbc9U0xlvYghH8Gxv3Xp7Z804WDg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T12:14:03.152727500-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: autocfg
  version: 0.1.6
  revision: 0f87a09a981694844b6f36f105c69d228b772f4f
  digest: 4lc9vVY0Lry7N__5WNBeHUCCfrz3OXbeaGpfr3xXnFk
package-diff-base:
  source: "https://crates.io"
  name: autocfg
  version: 0.1.5
  revision: 81ea9f3120f20d684fb97fe90f2848f137519dfc
  digest: AD50FL3HnA4bDSzoE0-Ga3Lr5K-4Mw-LqEwQQRNMa0U
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |
  0.1.6:  LGTM
  0.1.5:  No unsafe code, minor safe-looking file I/O
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
U9UYpAJTXruQy9cLZN6oS7EKGEpkuQ9g7Cf27u7PrLksadj7SBRYH2C4pvBPpWIfRVcUGRAvdQsS8QdJl2CyDQ
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T12:19:19.957089200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: zip
  version: 0.5.3
  revision: a872278429df5a4cf183dc776173bd4f5bd82d1c
  digest: VAaO3YfPvb4lq8rlcRDvGftGr1PuKn8aTwfY598--K0
package-diff-base:
  source: "https://crates.io"
  name: zip
  version: 0.5.2
  revision: cdbdc008fc3a1a9fb1ba7ebb323a7b8fa4ead931
  digest: D0V4h7lsyRa_pSpI2YkLmzjQikyk5zQHU7KEW9zt-W0
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  0.5.3:  Replaced libflate with flate2, minor touchups.  LGTM.
  0.5.2:  Looks like a solid crate.  A few minor concerns:
  
  * 755 permissions.  Necessary, but bandied about.
  * Unsanitized path names are accessible, easy to misuse.
  * Doesn't ban access to `CON` or similar.
  * Lacks fuzz tests
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | benches/read_entry.rs                         | +1    | |
  | examples/extract_lorem.rs                     | +1    | |
  | examples/extract.rs                           | +1    | |
  | examples/file_info.rs                         | +1    | |
  | examples/stdin_info.rs                        | +1    | |
  | examples/write_dir.rs                         | 0     | 755 permissions make me slightly nervous, but I think it's safe
  | examples/write_sample.rs                      | 0     | 755 permissions make me slightly nervous, but I think it's safe
  | script/doc-upload.cfg                         | +1    | |
  | src/compression.rs                            | +1    | |
  | src/cp437.rs                                  | +1    | |
  | src/crc32.rs                                  | +1    | |
  | src/lib.rs                                    | +1    | |
  | src/read.rs                                   | +1    | |
  | src/result.rs                                 | +1    | |
  | src/spec.rs                                   | +1    | |
  | src/types.rs                                  | 0     | Could be a little more defensive towards misue, but pretty solid.
  | src/write.rs                                  | +1    | |
  | tests/data/*.zip                              |       | Unreviewed... probably OK though
  | tests/end_to_end.rs                           | +1    | |
  | tests/invalid_date.rs                         | +1    | |
  | tests/zip64_large.rs                          | +1    | |
  | .gitignore                                    | +1    | |
  | .travis.yml                                   | -1    | | curl random urls
  | appveyor.yml                                  | -1    | | sourceforge mingw urls
  | Cargo.toml                                    | +1    | |
  | Cargo.toml.orig                               | +1    | |
  | LICENSE                                       | +1    | MIT
  | README.md                                     | +1    | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1    | No unsafe code
  | fs        | +1    | Examples/tests appear safe.
  | io        | +1    | |
  | docs      | +1    | |
  | tests     | +1    | Could use more fuzzing tests
  
  ### src/types.rs
  
  | Line | Notes |
  | ----:| ----- |
  | 215   | I'd like this to have a scarier name... but eh, at least it's sound.
  | 250   | This drops invalid components... I think it should return an error on invalid components.  But at least it's sound and shouldn't be vulnerable to path navigation attacks?
  | 250   | This doesn't forbid `CON` or similar.
  | 298   | *Excellent* test, this is exactly what I want to see!
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
NX8-jHEBNAzDbwU09QTv4PwMAZZielfJC3W3FHAJmLQWBRMRst76bVqWj46lQ1Kz5MVfI7DMO-1mnmJcvG3xAg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T12:35:32.927164300-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: idna
  version: 0.2.0
  revision: f491cb442edab75be54ff5961af6458a474f1f9a
  digest: dK3fU-T5qLxslequASWr_6jEiHti2Z3mSedHiItew9k
package-diff-base:
  source: "https://crates.io"
  name: idna
  version: 0.1.5
  digest: unspUc1JbWkOQabypI-vh-wBDliPWDaGCQTUJWeLp1I
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  0.2.0:  Some minor refactoring and a lot of ugly rustfmt(?) reformatting.
  0.1.5:  Read all code, including skimmed every line of autogenerated rust tables. Looked for any security issues, including any obvious DoS attacks from loops. Did not try to manually verify any of the bidi/punycode/idna logic against a spec, but test coverage looks excellent.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
jXBbpWhvYs8hIOWIvXAVQvwr-2o8keOyII2oc7t-Lzot9hDk4hJLagm5WjbE63up9gbPgH5SnRmXW4I5NQ1jDA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T18:43:46.506174500-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: xml-rs
  version: 0.8.0
  digest: iE1JD2oQTrGPIy1_aD_5nzbmVWqCDROu0AIBOVyzbp0
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |
  Fairly full review.  Looks solid.
  * My eyes glazed over a bit when going through the decode state machine.
  * Some of the namespace stuff too.
  * Caught [netvl/xml-rs#179](https://github.com/netvl/xml-rs/issues/179) at least
  
  Pros:
  * Safe code!
  
  Cons:
  * Probably slower than quick-xml
  * Encoding XML not 100% bug free yet
  * No DTD support (yet?)
  
  | File                                                  | Rating | Notes |
  | ----------------------------------------------------- | ------ | ----- |
  | src/reader/parser/inside_cdata.rs                     | +1 | Going through tokenizer at all unnerves me slightly
  | src/reader/parser/inside_closing_tag_name.rs          | +1 | |
  | src/reader/parser/inside_comment.rs                   | +1 | |
  | src/reader/parser/inside_declaration.rs               | +1 | |
  | src/reader/parser/inside_doctype.rs                   | +1 | |
  | src/reader/parser/inside_opening_tag.rs               | +1 | |
  | src/reader/parser/inside_processing_instruction.rs    | +1 | |
  | [src/reader/parser/inside_reference.rs](src/reader/parser/inside_reference.rs) | +1 | |
  | src/reader/parser/mod.rs                              | +1 | |
  | src/reader/parser/outside_tag.rs                      | +1 | |
  | src/reader/config.rs                                  | +1 | |
  | src/reader/error.rs                                   | +1 | |
  | src/reader/events.rs                                  | +1 | |
  | src/reader/lexer.rs                                   | +1 | |
  | src/reader/mod.rs                                     | +1 | |
  | src/writer/config.rs                                  | +1 | Two space indents by default is heresy but whatever.
  | src/writer/emitter.rs                                 | 0 | Encodings not escaped, namespace URIs not escaped.  General attributes *are* escaped though.  CDATA containing ]]> not fixed.
  | src/writer/events.rs                                  | +1 | |
  | src/writer/mod.rs                                     | +1 | |
  | src/analyze.rs                                        | +1 | Should really be moved to bins or examples or something.
  | src/attribute.rs                                      | +1 | |
  | src/common.rs                                         | 0 | Caught [netvl/xml-rs#179](https://github.com/netvl/xml-rs/issues/179)
  | src/escape.rs                                         | +1 | |
  | src/lib.rs                                            | +1 | |
  | src/macros.rs                                         | +1 | |
  | src/name.rs                                           | +1 | |
  | src/namespace.rs                                      | +1 | |
  | src/util.rs                                           | +1 | |
  | tests/documents/sample_1_full.txt                     | +1 | skimmed
  | tests/documents/sample_1_short.txt                    | +1 | skimmed
  | tests/documents/sample_1.xml                          | +1 | skimmed
  | tests/documents/sample_2_full.txt                     | +1 | skimmed
  | tests/documents/sample_2_short.txt                    | +1 | skimmed
  | tests/documents/sample_2.xml                          | +1 | skimmed
  | tests/documents/sample_3_full.txt                     | +1 | skimmed
  | tests/documents/sample_3_short.txt                    | +1 | skimmed
  | tests/documents/sample_3.xml                          | +1 | skimmed
  | tests/documents/sample_4_full.txt                     | +1 | skimmed
  | tests/documents/sample_4_short.txt                    | +1 | skimmed
  | tests/documents/sample_4.xml                          | +1 | skimmed
  | tests/documents/sample_5_short.txt                    | +1 | skimmed
  | tests/documents/sample_5.xml                          | +1 | skimmed
  | tests/event_reader.rs                                 | +1 | |
  | tests/event_writer.rs                                 | +1 | |
  | tests/streaming.rs                                    | +1 | |
  | .cargo-ok                                             | +1 | |
  | .gitignore                                            | +1 | |
  | .travis.yml                                           | +1 | Installs pip travis-cargo
  | Cargo.toml                                            | +1 | |
  | Cargo.toml.orig                                       | +1 | |
  | Changelog.md                                          | +1 | |
  | design.md                                             | +1 | TODO list
  | LICENSE                                               | +1 | MIT, matching Cargo.toml
  | Readme.md                                             | +1 | MIT Licensed
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1    | One small use in test case, PR to remove upstream and apply deny(unsafe_code) lint.
  | fs        | +1    | Only in analyze (and maybe tests?), and sanely
  | io        | +1    | |
  | docs      | +1    | |
  | tests     | 0     | Needs more fuzz tests
  
  src/reader/parser/inside_reference.rs
  -------------------------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 23    | predefined XML entities   | Apparently these 5 are the only predefined entities in XML.  Don't have to worry about the hundreds HTML supports.
  | 52    | custom XML entities       | Not recursive, no XML bomb here unless DTD constructed a huge entry for `extra_entities` already.
  
  TIL
  ===
  * `&impl ?Sized+AsRef<str>`
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
UiPJg_upDgoDFQKgRd5gx6ThhJQYK7a0WDNdwX24UbJE0SW5sWEEHmpT0eq4w6LjtRF4ta9G3zeKSL70WxSlBw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-05T12:23:36.815798200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: tiled-json-rs
  version: 0.2.6
  revision: 7969464b0bd04471e920d9b5ff825efbf835f08f
  digest: PQ-E8KGi2DKLrvyTGC75JETHI8pShfeB7LO4rmXi7rw
review:
  thoroughness: medium
  understanding: medium
  rating: negative
issues:
  - id: "https://gitlab.com/ljcode/tiled-json-rs/issues/1"
    severity: high
    comment: Path traversal attacks?
  - id: "https://gitlab.com/ljcode/tiled-json-rs/issues/2"
    severity: medium
    comment: Panic on bad data (DoS source via UGC?)
comment: |
  Do not use on User Generated Content!
  * Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
  * A couple cases where bad input will panic, a potential DoS vector.
  
  For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)
  
  Pros:
  * JSON is lighter weight than XML
  * Fuller format support vs tiled
  
  Cons:
  * No compression
  * API is just as raw in many ways
  * Requires exporting.
  * Slightly unusual license for rust projects (MPL, instead of MIT/Apache 2)
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | [src/layer.rs](src/layer.rs)                  | 0 | Raw structures
  | src/lib.rs                                    | +1 | |
  | src/map.rs                                    | +1 | |
  | src/object.rs                                 | +1 | |
  | [src/parsers.rs](src/parsers.rs)              | 0 | No decompression support, can panic (not suitable for user generated content)
  | [src/tile_set.rs](src/tile_set.rs)            | -1 | Not suitable for user generated content!
  | src/utils.rs                                  | +1 | |
  | src/wangs.rs                                  | +1 | |
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | LICENSE                                       | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | None
  | fs        | -1 | Path traversal
  | io        | +1 | serde
  | docs      | +1 | |
  | tests     |  0 | Not in crate, but found in repository (https://gitlab.com/ljcode/tiled-json-rs/tree/master/tests)
  
  src/layer.rs
  ------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  17   | TileLayer::chunks | Option seems kinda pointless, also this API is meh
  | 129   | DrawOrder | There are at least 4 draw modes now for layers - although there's also Map / RenderOrder.... blehrg (top->down left->right, top->down right->left, ...)
  
  src/parsers.rs
  --------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 129   | parse_color blue | Despite earlier padding, no guarantee this is valid / may panic (both for overflowing and for not being a unicode boundary.)
  
  src/tile_set.rs
  ---------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 121   | Deserialize for TileSet | File::open - path traversal attacks, lack of virtual filesystem support, etc.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
U9LkaE4UOH6GbJhFDmwbNm4iOITSjvbuLOHBmMpf2FqhYsb5s7jfT7i2evPWA_Vx3nuxFrg8LvcHh4Xb6iJuBw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-05T15:33:53.100473500-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: macro_rules_attribute-proc_macro
  version: 0.0.1
  revision: a8bc2725982dbfbfa60ffcb0305889d9e6d4fe5c
  digest: _VgSABytmSyaU_F92vRUec8-M8NNQp4XIECjHOqFreU
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |
  Internal implementation detail crate of macro_rules_attribute.  Relatively trivial... LGTM.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
uuv4al-ZhctUK-f7wHc16HBYjRU_LR4-h5H1i1lJ8wnVZurT94ERb-swPRAfw_9e9hFMyXI29JYa4rAiYLpMCw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-05T15:35:14.585389900-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: macro_rules_attribute
  version: 0.0.1
  revision: a8bc2725982dbfbfa60ffcb0305889d9e6d4fe5c
  digest: 4mjLH9t7BIfGz66Y8pOo2ZT3rHM89_EOaMOnT8QFm_Q
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |
  Utility crate... LGTM!
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
lEmB7cOCalWj1vvPWimZUzXuvdBkffxrB8FZiSA13bpm_iSIJXTz1_sQIs7mH4Z99gDslUmA95yd1cR14OQ4BA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-07T23:00:19.914911-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: cargo_metadata
  version: 0.8.2
  revision: b72eaa6475633fdc14f57316855200666e322771
  digest: 7bFGe3GO9u5f7kJeQ5YCy5AddExJGsT7pMBYKgMudSM
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |
  Parse `cargo metadata` and `cargo build --message-format=json` output.
  
  0.8.2
  =====
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | src/dependency.rs                             | +1 | |
  | src/diagnostic.rs                             | +1 | |
  | src/errors.rs                                 | +1 | |
  | [src/lib.rs](src/lib.rs)                      | 0 | MetadataCommand makes me slightly paranoid
  | src/messages.rs                               | +1 | |
  | tests/selftest.rs                             | +1 | |
  | tests/test_samples.rs                         | +1 | |
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | 1.32.0 MSRV
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | LICENSE-MIT                                   | +1 | |
  | README.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1    | None
  | fs        | +1    | None
  | io        | 0     | Can invoke `cargo metadata`.  Looks sane, but if passed malicious feature names etc...
  | docs      | +1    | |
  | tests     | +1    | |
  
  src/lib.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 495 | exec | shell access, and I'm paranoid about shell param escaping...
  | 500 | exec | shell access, and I'm paranoid about shell param escaping...
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
dzDu2Umyu95RSQ6qoai_bWoAFgbNBINw-z1fj452AoegW_oZkAWZ5FobOO-KutbA-uZ1hmWKVZ5Z-2EZMQhmBg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-09T11:36:13.226067700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.13
  revision: 2b73150d29fdd8e8e86a3de54a28a75f6dc38b15
  digest: RRAVghkhaf8N01-fzMW8Pi7sOvKYXe9O7znreQX5xx4
package-diff-base:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.12
  revision: c7153e4cf9b1694c49385057633ab5ad6b602b38
  digest: WqfZMcbmdwcOg6mLIp2wyihDrMINHBXIxun-uQfUCfc
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  0.4.13: Trivial version bumps.
  0.4.12: Trivial version bumps.
  0.4.11: Nice and solid looking code.  100% safe code.
  
  Reviewed:
      src\cli.rs:         +1
      src\main.rs:        +1
          151 run_lldb
              Nonterminating loops are problematic, but I think the side effects here should make this work OK?
              (see https://github.com/rust-lang/rust/issues/28728 )
      Cargo.toml:         +1
      Cargo.toml.orig:    +1
          13  readme path references unpackaged readme
  
  TIL:
      Using traits to extend clap::App so flags can be reused per-subcommand is interesting.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
x0enf4heRps6ORFl2r_Qe33UWjb5T8lLldm4eu1T6euVhDrdx63Xm8OwzubMV1Cl20sRtXv-LBPjqY2OxhlKAA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-09T11:36:39.380923100-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.13
  revision: 564091dd668c287b39175381d79210567a8840f8
  digest: ERkxnmuZ3cmgYqQBQ21xfK_bKcdYbU3nwf_toeQGjuA
package-diff-base:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.12
  revision: 40a232b03d6c5afef18f1101b9a6842d59959726
  digest: DF1MThbK5NP1IwEp0q6MKfIcZxccQSvXdw4ibsinQfc
review:
  thoroughness: low
  understanding: low
  rating: neutral
comment: |
  0.4.13:  Trivial version bumps
  0.4.12:  Trivial version bumps
  0.4.11
  thoroughness: low - mostly due to iOS FFI, shell stuff not being super thorough, and review fatigue causing my eyes to glaze over in places.
  understanding: low - lots of shell/path stuff that I don't know well enough to verify
  rating: neutral - see concerns bellow.
  
  
  
  Concerns
  ========
  - Looks like lots of stuff might not work on windows... although there *is* windows-specific code, so maybe?
  - Lots of unimplemented!()
  - iOS support is chock full of unsafe { ... } for FFI.  I haven't verified the FFI signatures.
  - iOS support also uses unsafe { ... } for several objective C casts.  Needs some sanity checked utility functions.
  - iOS support has some potential UB during panics due to unwinding over FFI boundaries.
  - Implements some code signing stuff for iOS.  Necessary, and just your local certs, but I haven't fully reasoned through what security impacts if any that has.
  - Few unit tests visible in the crate itself (maybe they're separate and unpackaged?)
  - Sandboxing concerns
      - Remotes into other devices, including over ssh.
      - Frequent use of shell commands could lead to build server RCEs given malicious project metadata
      - Malicious projects will just use a build.rs file though, front door is open so to speak.
  
  
  
  Details
  =======
  src\android\device.rs           +1
      14  Odd place to install...
  src\android\mod.rs              +1
      155 Could also check android studio SDK install path
  
  src\host\device.rs              +1
  src\host\mod.rs                 +1
  src\host\platform.rs            +1
  
  src\ios\device.rs               0
      50  Not sure if the underlying iOS APIs are thread safe, but this seems acceptable.
      277 unsafe { ... } for FFI.  Looks generally safe except for scary mem::transmute(kCFBooleanTrue), but even that may be right.
      303 unsafe { ... } for FFI.  Looks safe to me.
      367 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      419 unsafe { ... } for FFI.  Looks safe to me.  
      440 unsafe { ... } for FFI.  Looks safe to me.
      454 unsafe { ... } for FFI.  Looks safe to me.
      487 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      519 This thread just eats errors.
      683 unsafe { ... } for FFI.  Transmute... probably safe.
      690 unsafe { ... } for FFI.  Looks safe to me.
      691 unsafe { ... } for FFI.  Scary Core Foundation related transmutes... probably OK, but some utilities to sanity check these conversions in debug would be nice.
      696 unsafe { ... } for FFI.  Another scary-but-probably-safe transmute.
  src\ios\helpers.py              +1
  src\ios\mobiledevice_sys.rs     0
      FFI, not perfectly verified since I don't have an OS X machine to check the headers out on.
      Ref: https://github.com/PanayotCankov/device.io/blob/master/idb/MobileDevice.h
      Various minor const differences, a few functions missing in ref, a few likely improved definitions in places.
      33  am_device_notification_callback_info has    "extra" field vs reference, "subscription".  iOS internal struct?
  src\ios\mod.rs                  0
      43  unsafe { ... } for FFI.  Looks safe to me.
      55  technically unsound inner fn (uses ptrs)
      61  Scary looking as hell, but I think this is just going Box (40) -> void* (48) -> Box (here).
      62  UNDEFINED BEHAVIOR:  Possible panic unwind through FFI, technically an hazard.
          I would've missed this edge case but for the comment, so I'm not docking points.
          Unlikely to cause severe problems, but would be worth fixing.
  src\ios\platform.rs             +1
  src\ios\xcode.rs                +1
      25  Dead code not reviewed
      91  I have not thoroughly audited this code signing stuff, but looks OK.
      199 com.zoy.kali.Dinghy?  A bit hardcoded...
  
  src\platform\mod.rs                 +1
  src\platform\regular_platform.rs    +1
      44  Since when does "regular" mean "*nix" - might not work on windows.
  
  src\script\device.rs            +1
  src\script\mod.rs               +1
  
  src\ssh\device.rs               0
  src\ssh\mod.rs                  +1
  
  src\compiler.rs                 +1
      475 Isn't this *unbanned*?
  src\config.rs                   +1
  src\device.rs                   +1
  src\errors.rs                   +1
  src\lib.rs                      +1
      87  random sleep? why?
  src\overlay.rs                  +1
  src\project.rs                  +1
  src\toolchain.rs                +1
  src\utils.rs                    +1
  
  build.rs                        +1
  Cargo.toml                      +1
  Cargo.toml.orig                 +1
  
  
  
  TIL
  ===
  Neat loop pattern:
  
  ```
  for (a,     b,      c) in &[
      ("a",   "b",    "c"),
      ("aa",  "bb",   "cc"),
  ] {
      ...
  }
  ```
  
  Sysroot paths:  ndk/toolchains/llvm/prebuilt/sysroot/usr/lib/{binutils_cpu}-linux-{abi_kind}"
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
icmKScbBeCIEMg8mT-YKXhUDxN7rXaEVQEm6tqzPMC5gQDq9V5pgDHTtMHzvfAsS0j-AV8ES19wHHBql-OP3Bg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-09T11:36:57.399562800-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.13
  revision: 6486e7ad8bcd6dc3b2368b90abca2a144c8e2114
  digest: "-WIx-vjiOQNFvXHrfl4Pr6mQ2r8xHzbKGhnB6K8mWf4"
package-diff-base:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.12
  revision: 86168d7d01de47f06741cd6430ff9af71b13a4c2
  digest: twtDrhKvr5oxpDt61eNL0u42kj49cmH2RGpEAEsFhRA
review:
  thoroughness: medium
  understanding: low
  rating: positive
comment: |
  0.4.13:  Trivial version bumps.
  0.4.12:  Trivial version bumps.
  0.4.11
  Some of the build/path stuff seems a little off... but might be correct?
  All safe code, no security problems.
  
  Reviewed:
  
      src\build_env.rs    +1
      src\build.rs        +1
      src\lib.rs          0
          102 Is this really correct for specifying the *host* environment?
          105 ..
      src\utils.rs        0
          14  Isn't this generating /../../../ ?  Doesn't seem right...
  
      Cargo.toml          +1
      Cargo.toml.orig     +1
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
bJWBQXCi_fwcQoPSPw2l9hGiUnMocwlb6rUgXa2SIsKrmc1cEfemXKa1ZfDRTNY5w94K78I8jHECiIH9xhCoCg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-11T12:36:19.410124200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: legion
  version: 0.1.1
  revision: 145969ff1e031b6cd1338da62fa59a9732bd7976
  digest: BDQwQCDIk3wJI4sbllYZjvX7PgqmRLO1Dpjcq4kpWps
review:
  thoroughness: medium
  understanding: low
  rating: negative
comment: |
  A low-boilerplate, high performance [archetype] based ECS.
  
  Pros:
  * Archetypes
  * Low boilerplate
  * MIT Licensed
  
  Cons:
  * Widespread use of 16-bit values is begging for overflows
  * Some O(N) patterns I dislike, fortunately with small C.
  * Not MIRI friendly in even the most trivial of examples.
  * Difficult-to-vet unsafe code, strongly suspect some unsound.
  * Omnipresent low-value logging
  * Tons of dependencies (89)
  
  0.1.1
  =====
  
  | crev  |   |
  |-------|---|
  | thoroughness  | medium
  | understanding | low (thanks to use of unsafe)
  | rating        | negative
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | benches/allocation_stress.rs                  | +1 | No global side effects, no black box use...?
  | benches/pos_vel.rs                            | +1 | No global side effects, no black box use...?
  | examples/hello_world.rs                       | +1 | |
  | [src/borrows.rs](src/borrows.rs)              | +1 | API lock design concerns me... and I suspect this relies on [stable_drop_order] to avoid aliasing violations.
  | [src/lib.rs](src/lib.rs)                      | -1 | Difficult to vet unsafe.  Some O(N) and overflow concerns.
  | [src/query.rs](src/query.rs)                  | -1 | Difficult to vet unsafe.
  | [src/storage.rs](src/storage.rs)              | -1 | Tons of difficult-to-vet UnsafeCell use that leaks some of it's unsafety out to other files.
  | tests/query_api.rs                            | +1 | |
  | tests/world_api.rs                            | +1 | |
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | caching cargo might be a bad idea IME
  | bench.png                                     | +1 | |
  | Cargo.toml                                    | +1 | MIT
  | Cargo.toml.orig                               | +1 | MIT
  | LICENSE                                       | +1 | MIT
  | readme.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | -1 | Lots of hard to reason about unsafe.
  | miri      | -1 | Trivial use chokes up miri.
  | fs        | +1 | |
  | io        | +1 | |
  | docs      | +1 | |
  | tests     | +1 | |
  
  src/borrows.rs
  --------------
  | Line  | What                      | Notes |
  | -----:| ------------------------- | ----- |
  | 17    | Borrow::aquire_read       | Possible race condition source.  Attempts to increment if >= 0.  Theoretically could livelock if sufficiently contested, shouldn't in practice.
  | 33    | Borrow::aquire_write      | Possible race condition source.  Attempts to go from 0 => -1.
  | 43    | Drop for Borrow           | +1
  | 57    | Borrow*ed*                | Safe from aliasing violations by virtue of [stable_drop_order] ?  Cannot drop `Borrow` before `value` lifetime has ended.
  | 92    | PartialEq for Borrowed    | 'b lifetime unused...?
  | 98    | Eq for Borrowed           | 'b lifetime unused...?
  | 128   | Borrow*ed*Mut             | Safe from aliasing violations by virtue of [stable_drop_order] ?  Cannot drop `Borrow` before `value` lifetime has ended.
  | 177   | BorrowedSlice             | Safe from aliasing violations by virtue of [stable_drop_order] ?  Cannot drop `Borrow` before `value` lifetime has ended.
  | 220   | BorrowedMutSlice          | Safe from aliasing violations by virtue of [stable_drop_order] ?  Cannot drop `Borrow` before `value` lifetime has ended.
  | 269   | BorrowedIter              | Safe from aliasing violations by virtue of [stable_drop_order] ?  Cannot drop `Borrow` before `value` lifetime has ended.
  | EOF   | | |
  
  src/lib.rs
  ----------
  | Line  | What                              | Notes |
  | -----:| --------------------------------- | ----- |
  | 1     | Lib doc comments                  | +1
  | 254   | WorldId                           | Only 16-bit world IDs? I could see this overflowing in practice, especially if using the advertized ability to stream stuff in.
  | 264   | ArchetypeId                       | Only 16-bit chunk IDs? Also, poor alignment.
  | 281   | Entity                            | Standard dual generation index, I approve... although hot entity IDs could overflow in practice?
  | 310   | Universe::logger                  | Not entirely sure I'm a fan of this.
  | 365   | ComponentIndex & friends          | These Indexes should be used earlier when defining WorldId etc....
  | 409   | impl EntityBlock                  | +1
  | 431   | EntityBlock::in_range             | Slightly bogus u32 cast - EntityBlock::new should enforce u32 size if you want a u32 len...
  | 498   | impl EntityAllocator              | Full of O(N/1024) operations that could be O(1).  Chunking is fine, but this really should abuse the fact that BLOCK_SIZE is constant more instead of looping.
  | 517   | EntityAllocator::create_entity    | A better allocation strategy (IMO) would be to always start with the block we last allocated from.  Will have degenerate behavior if we're constantly freeing/allocating from the first block.
  | 625   | World::merge doc comment          | Concerning, implies API is unsound
  | 638   | World::merge                      | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self` implying we have exclusive access to self.archetypes[?].chunks()[?].entities()
  | 719   | World::insert                     | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self` implying we have exclusive access to self.archetypes[?].chunks()[?].entities()
  | 720   | World::insert                     | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self` implying we have exclusive access to self.archetypes[?].chunks()[?].entities()
  | 805   | World::entity_data_mut            | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self` implying we have exclusive access to self.archetypes[?].chunks()[?].entities()
  | 841   | World::prep_archetype             | `unsafe { ... }` - Probably sound - index should be valid - but why not just `.map(|(_, a)| a)` instead of using an index?
  | 1016  | EntitySource for IterEntitySource | `unsafe { ... }` - I *think* this might be sound thanks to `&mut Chunk` implying we have exclusive access to chunk.entities()
  | EOF   | | |
  
  src/query.rs
  ------------
  | Line  | What                                  | Notes |
  | -----:| ------------------------------------- | ----- |
  | *     | PhantomData<T>                        | Frequently used when T is already used in the struct, I'm concerned I'm missing something.
  | 196   | impl View for (...) validate()        | `unsafe { ... }` - `0 <= i < j < types.len()`, so both calls to get_unchecked should be sound.
  | 276   | std::ops::Not for Passthrough         | Oooh, operator overloading abuse.  Probably fine?
  | 1065  | impl Iterator for ZipEntities next    | `unsafe { ... }` - Sketchy, assumes data.len() <= entities.len() and that's not a particularly trivial assertion to prove.
  | 1088  | ChunkView::entities                   | `unsafe { ... }` - NFI if this is sound or not.
  | EOF   | | |
  
  src/storage.rs
  --------------
  | Line  | What                                      | Notes |
  | -----:| ----------------------------------------- | ----- |
  | 19    | StorageVec<T>                             | UnsafeCell!  Oh no.
  | 39    | unsafe fn StorageVec::data_mut(&self)     | Because this doesn't take `&mut self`, this forces the caller to enforce borrow checking manually.
  | 47    | ComponentStorage::remove for StorageVec   | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self`
  | 52    | ComponentStorage::len for StorageVec      | `unsafe { ... }` - Unsound?  It's not clear what, if anything, ensures len() isn't being mutated by another borrower.
  | 104   | unsafe fn Chunk::entities_unchecked       | Because this doesn't take `&mut self`, this forces the caller to enforce borrow checking manually.
  | 126   | unsafe fn Chunk::entity_data_unchecked    | +1?
  | 141   | unsafe fn Chunk::entity_data_mut_unchecked| Ditto.
  | 157   | Chunk::entity_data                        | `unsafe { ... }` - Unsound?  "Locks" via borrow types *after* constructing `&T`, which is too late.
  | 174   | Chunk::entity_data_mut                    | `unsafe { ... }` - Unsound?  "Locks" via borrow types *after* constructing `&mut T`, which is too late.
  | 199   | Chunk::shared_data                        | `unsafe { ... }` - NFI if this is sound or not.  Haven't groked why SharedComponentStore is UnsafeCell or what protects it, if anything.
  | 212   | Chunk::remove                             | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self`
  | EOF   | | |
  
  Miri Example
  ------------
  ```rust
  use legion::prelude::*;
  
  [test] // PREPEND YOUR OWN POUND SIGN
  fn test() {
      let universe = Universe::new(None);
      let mut world = universe.create_world();
      world.insert_from((), vec![(1i32,)]);
  }
  ```
  
  ```cmd
  rustup toolchain install nightly-2019-09-11
  rustup component add miri --toolchain=nightly-2019-09-11
  cargo +nightly-2019-09-11 miri test
  ```
  
  ```
  error[E0080]: Miri evaluation error: trying to reborrow for SharedReadWrite, but parent tag <126591> does not have an appropriate item in the borrow stack
      |
      = note: inside call to `<legion::IterEntitySource<std::vec::IntoIter<(i32,)>, (i32,)> as legion::EntitySource>::write` at C:\Users\Mike\.cargo\registry\src\github.com-1ecc6299db9ec823\legion-0.1.1\src\lib.rs:716:29
      = note: inside call to `legion::World::insert::<(), legion::IterEntitySource<std::vec::IntoIter<(i32,)>, (i32,)>>` at C:\Users\Mike\.cargo\registry\src\github.com-1ecc6299db9ec823\legion-0.1.1\src\lib.rs:689:9
  note: inside call to `legion::World::insert_from::<(), std::vec::Vec<(i32,)>>` at src\lib.rs:7:5
      --> src\lib.rs:7:5
       |
  7    |     world.insert_from((), vec![(1i32,)]);
       |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  note: inside call to `test` at src\lib.rs:4:1
      --> src\lib.rs:4:1
       |
  4    | / fn test() {
  5    | |     let universe = Universe::new(None);
  6    | |     let mut world = universe.create_world();
  7    | |     world.insert_from((), vec![(1i32,)]);
  8    | | }
       | |_^
  ```
  
  TIL
  ---
  * `TypeId::of::<T>()`
  
  
  
  [stable_drop_order]:    https://github.com/rust-lang/rfcs/blob/master/text/1857-stabilize-drop-order.md
  [Unity]:                https://unity.com
  [archetype]:            https://github.com/SanderMertens/ecs-faq#what-is-an-archetype-based-ecs
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
WJOvZkLkhiwgFliZJZsycUsUZ7UlsCKKbMFJLTJH9Wn8MsDaLvXKcVJuCiaacgU7dHOLcpfX7aVv_aai_XzxCg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-15T16:24:48.249566200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: shellexpand
  version: 0.1.0
  digest: KzKf6xqhHBTdLilZZX79juTDdId43n-Ospa2-Vow27U
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |
  Pros:
  * 100% safe code.
  * 0 dependencies.
  * Does exactly what it's supposed to do.
  * Great test coverage.
  
  Cons:
  * Might want to feature-gate functions which assume std::env access under the hood.
  * Env access (but that's the whole point)
  * No ~username/ support.
  * No %ENV% support (windows style env var syntax... or maybe that's a feature?).
  
  0.1.0
  =====
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | [src/lib.rs](src/lib.rs)                      | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | Installs travis-cargo
  | Cargo.lock                                    | +1 | |
  | Cargo.toml                                    | +1 | No 3rd party deps
  | LICENSE-APACHE                                | +1 | |
  | LICENSE-MIT                                   | +1 | |
  | Readme.md                                     | +1 | Properly dual licensed
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | None
  | miri      | -1 | "can't call foreign function: GetCurrentProcess"
  | fs        | +1 | None
  | io        |  0 | Hardcoded env fns might need to be featured out for browser WASM targets
  | docs      | +1 | |
  | tests     | +1 | Doc tests
  
  src/lib.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 1     | lib.rs doc comments                       | +1
  | 155   | fn full_with_context                      | +1
  | 229   | fn full_with_context_no_errors            | +1
  | 283   | fn full                                   | +1
  | 295   | struct LookupError                        | +1
  | 303   | impl Display for LookupError              | +1
  | 309   | impl Error for LookupError                | +1
  | 314   | macro_rules try_lookup!                   | +1
  | 323   | fn is_valid_var_name_char                 | +1 - includes unicode, as mentioned in docs
  | 393   | fn env_with_context                       | +1
  | 506   | fn env_with_context_no_errors             | +1
  | 552   | fn env                                    | +1
  | 584   | fn tilde_with_context                     | 0 - example incomplete
  | 633   | fn tilde                                  | +1
  | 637   | mod tilde_tets                            | +1
  | 675   | mod env_test                              | +1
  | 821   | mod full_tests                            | +1
  
  TIL
  ---
  Apparently you *can* use references link style for badge images.  Huh!  I should use that for reviews...
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
F7aVTz9IpnE6Wn-zxwYI2yuVAHbNdme3vFuJaHISvGTg4KW34NbhP98oyqPQ_7WBFHqiPcLH9GFsTOcKAZDTCg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-15T16:28:51.901011600-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: shellexpand
  version: 1.0.0
  digest: c_Ny9coanQ3j1lRrZWbKxDrkbK9TRfyIRQr_ygrNw-E
package-diff-base:
  source: "https://crates.io"
  name: shellexpand
  version: 0.1.0
  digest: KzKf6xqhHBTdLilZZX79juTDdId43n-Ospa2-Vow27U
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |
  Pros:
  * 100% safe code.
  * 0 dependencies.
  * Does exactly what it's supposed to do.
  * Great test coverage.
  
  Cons:
  * Might want to feature-gate functions which assume std::env access under the hood.
  * Env access (but that's the whole point)
  * No ~username/ support.
  * No %ENV% support (windows style env var syntax... or maybe that's a feature?).
  
  1.0.0
  =====
  * Minor breaking changes
  * Typo fixes
  * Missing example fixes
  
  0.1.0
  =====
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | [src/lib.rs](src/lib.rs)                      | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | Installs travis-cargo
  | Cargo.lock                                    | +1 | |
  | Cargo.toml                                    | +1 | No 3rd party deps
  | LICENSE-APACHE                                | +1 | |
  | LICENSE-MIT                                   | +1 | |
  | Readme.md                                     | +1 | Properly dual licensed
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | None
  | miri      | -1 | "can't call foreign function: GetCurrentProcess"
  | fs        | +1 | None
  | io        |  0 | Hardcoded env fns might need to be featured out for browser WASM targets
  | docs      | +1 | |
  | tests     | +1 | Doc tests
  
  src/lib.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 1     | lib.rs doc comments                       | +1
  | 155   | fn full_with_context                      | +1
  | 229   | fn full_with_context_no_errors            | +1
  | 283   | fn full                                   | +1
  | 295   | struct LookupError                        | +1
  | 303   | impl Display for LookupError              | +1
  | 309   | impl Error for LookupError                | +1
  | 314   | macro_rules try_lookup!                   | +1
  | 323   | fn is_valid_var_name_char                 | +1 - includes unicode, as mentioned in docs
  | 393   | fn env_with_context                       | +1
  | 506   | fn env_with_context_no_errors             | +1
  | 552   | fn env                                    | +1
  | 584   | fn tilde_with_context                     | 0 - example incomplete
  | 633   | fn tilde                                  | +1
  | 637   | mod tilde_tets                            | +1
  | 675   | mod env_test                              | +1
  | 821   | mod full_tests                            | +1
  
  TIL
  ---
  Apparently you *can* use references link style for badge images.  Huh!  I should use that for reviews...
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
3vxlYF-ULKpDRg-_Sl3-bNJCfzltTAduxOSAhDCd9fzckIe_Vq-_KfoJuEYqIkEw1tNq8_hYgRUrL46jsHgMCA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-17T12:01:12.483828-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.14
  revision: 24a21cda25281dd2b204fd59984d3e22cb23d9d9
  digest: di1-UAmmy6yreCnr9xN4m34AL90OpgCjhiNxkp2RYcQ
package-diff-base:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.13
  revision: 2b73150d29fdd8e8e86a3de54a28a75f6dc38b15
  digest: RRAVghkhaf8N01-fzMW8Pi7sOvKYXe9O7znreQX5xx4
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  0.4.14: Trivial version bumps, mass reformatting.
  0.4.13: Trivial version bumps.
  0.4.12: Trivial version bumps.
  0.4.11: Nice and solid looking code.  100% safe code.
  
  Reviewed:
      src\cli.rs:         +1
      src\main.rs:        +1
          151 run_lldb
              Nonterminating loops are problematic, but I think the side effects here should make this work OK?
              (see https://github.com/rust-lang/rust/issues/28728 )
      Cargo.toml:         +1
      Cargo.toml.orig:    +1
          13  readme path references unpackaged readme
  
  TIL:
      Using traits to extend clap::App so flags can be reused per-subcommand is interesting.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
5EvR2ajDKl2kfUYbDYwEfL2bFeqd0623sgvfQ_BRQfR7TV70ouPSEIuYesYk-NRmPztwKG7y-ZnnFXe1Nj_3Ag
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-17T12:16:31.883282100-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.14
  revision: bc11c0be7c4a2c2459d78451c4cb1050e8bddd01
  digest: sJWLWAZy_GAt8tkkCwWfHtRSG8E3x0hN09pA4gOhyDY
package-diff-base:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.13
  revision: 564091dd668c287b39175381d79210567a8840f8
  digest: ERkxnmuZ3cmgYqQBQ21xfK_bKcdYbU3nwf_toeQGjuA
review:
  thoroughness: low
  understanding: low
  rating: neutral
comment: |
  0.4.14:  Trivial version bumps, lots of pointless style changes, a few warning fixes (missing `dyn`s etc.)
  0.4.13:  Trivial version bumps
  0.4.12:  Trivial version bumps
  0.4.11
  thoroughness: low - mostly due to iOS FFI, shell stuff not being super thorough, and review fatigue causing my eyes to glaze over in places.
  understanding: low - lots of shell/path stuff that I don't know well enough to verify
  rating: neutral - see concerns bellow.
  
  
  
  Concerns
  ========
  - Looks like lots of stuff might not work on windows... although there *is* windows-specific code, so maybe?
  - Lots of unimplemented!()
  - iOS support is chock full of unsafe { ... } for FFI.  I haven't verified the FFI signatures.
  - iOS support also uses unsafe { ... } for several objective C casts.  Needs some sanity checked utility functions.
  - iOS support has some potential UB during panics due to unwinding over FFI boundaries.
  - Implements some code signing stuff for iOS.  Necessary, and just your local certs, but I haven't fully reasoned through what security impacts if any that has.
  - Few unit tests visible in the crate itself (maybe they're separate and unpackaged?)
  - Sandboxing concerns
      - Remotes into other devices, including over ssh.
      - Frequent use of shell commands could lead to build server RCEs given malicious project metadata
      - Malicious projects will just use a build.rs file though, front door is open so to speak.
  
  
  
  Details
  =======
  src\android\device.rs           +1
      14  Odd place to install...
  src\android\mod.rs              +1
      155 Could also check android studio SDK install path
  
  src\host\device.rs              +1
  src\host\mod.rs                 +1
  src\host\platform.rs            +1
  
  src\ios\device.rs               0
      50  Not sure if the underlying iOS APIs are thread safe, but this seems acceptable.
      277 unsafe { ... } for FFI.  Looks generally safe except for scary mem::transmute(kCFBooleanTrue), but even that may be right.
      303 unsafe { ... } for FFI.  Looks safe to me.
      367 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      419 unsafe { ... } for FFI.  Looks safe to me.  
      440 unsafe { ... } for FFI.  Looks safe to me.
      454 unsafe { ... } for FFI.  Looks safe to me.
      487 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      519 This thread just eats errors.
      683 unsafe { ... } for FFI.  Transmute... probably safe.
      690 unsafe { ... } for FFI.  Looks safe to me.
      691 unsafe { ... } for FFI.  Scary Core Foundation related transmutes... probably OK, but some utilities to sanity check these conversions in debug would be nice.
      696 unsafe { ... } for FFI.  Another scary-but-probably-safe transmute.
  src\ios\helpers.py              +1
  src\ios\mobiledevice_sys.rs     0
      FFI, not perfectly verified since I don't have an OS X machine to check the headers out on.
      Ref: https://github.com/PanayotCankov/device.io/blob/master/idb/MobileDevice.h
      Various minor const differences, a few functions missing in ref, a few likely improved definitions in places.
      33  am_device_notification_callback_info has    "extra" field vs reference, "subscription".  iOS internal struct?
  src\ios\mod.rs                  0
      43  unsafe { ... } for FFI.  Looks safe to me.
      55  technically unsound inner fn (uses ptrs)
      61  Scary looking as hell, but I think this is just going Box (40) -> void* (48) -> Box (here).
      62  UNDEFINED BEHAVIOR:  Possible panic unwind through FFI, technically an hazard.
          I would've missed this edge case but for the comment, so I'm not docking points.
          Unlikely to cause severe problems, but would be worth fixing.
  src\ios\platform.rs             +1
  src\ios\xcode.rs                +1
      25  Dead code not reviewed
      91  I have not thoroughly audited this code signing stuff, but looks OK.
      199 com.zoy.kali.Dinghy?  A bit hardcoded...
  
  src\platform\mod.rs                 +1
  src\platform\regular_platform.rs    +1
      44  Since when does "regular" mean "*nix" - might not work on windows.
  
  src\script\device.rs            +1
  src\script\mod.rs               +1
  
  src\ssh\device.rs               0
  src\ssh\mod.rs                  +1
  
  src\compiler.rs                 +1
      475 Isn't this *unbanned*?
  src\config.rs                   +1
  src\device.rs                   +1
  src\errors.rs                   +1
  src\lib.rs                      +1
      87  random sleep? why?
  src\overlay.rs                  +1
  src\project.rs                  +1
  src\toolchain.rs                +1
  src\utils.rs                    +1
  
  build.rs                        +1
  Cargo.toml                      +1
  Cargo.toml.orig                 +1
  
  
  
  TIL
  ===
  Neat loop pattern:
  
  ```
  for (a,     b,      c) in &[
      ("a",   "b",    "c"),
      ("aa",  "bb",   "cc"),
  ] {
      ...
  }
  ```
  
  Sysroot paths:  ndk/toolchains/llvm/prebuilt/sysroot/usr/lib/{binutils_cpu}-linux-{abi_kind}"
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
yGPimnTsU28m2qBST8cehZyCuOiWXb6SoQfMUOBN-OyjExa0odZG3bXEOjVEoFmAFwDw8xBR-7d4P_OQ77yBBQ
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-17T12:18:32.652845400-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.14
  revision: 664a76c0ea07e750abf9e1ea924bc5dd4b9f7bbc
  digest: 4izl26lmAykViPUdVHW1qdCNAa8Xx_0moS5zlloQxkc
package-diff-base:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.13
  revision: 6486e7ad8bcd6dc3b2368b90abca2a144c8e2114
  digest: "-WIx-vjiOQNFvXHrfl4Pr6mQ2r8xHzbKGhnB6K8mWf4"
review:
  thoroughness: medium
  understanding: low
  rating: positive
comment: |
  0.4.14:  Trivial version bumps, style changes.
  0.4.13:  Trivial version bumps.
  0.4.12:  Trivial version bumps.
  0.4.11
  Some of the build/path stuff seems a little off... but might be correct?
  All safe code, no security problems.
  
  Reviewed:
  
      src\build_env.rs    +1
      src\build.rs        +1
      src\lib.rs          0
          102 Is this really correct for specifying the *host* environment?
          105 ..
      src\utils.rs        0
          14  Isn't this generating /../../../ ?  Doesn't seem right...
  
      Cargo.toml          +1
      Cargo.toml.orig     +1
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
KVs_8kGBOdozMLTkNbSml2Q4Wh2SorQp_4j4mY1S9tovP3NQt8sNAj0MAhmUa2zD-JiPr1oUcrXz9lS0w2FFDg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-17T12:20:06.983263600-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.15
  revision: b9d207b57ca3f5cafadf7a7d540d41eea4022271
  digest: _OQIM7YkwqsWZOvmWX5qBHyDQ0TFK_JrRb_d7kL61Xw
package-diff-base:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.14
  revision: 24a21cda25281dd2b204fd59984d3e22cb23d9d9
  digest: di1-UAmmy6yreCnr9xN4m34AL90OpgCjhiNxkp2RYcQ
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  0.4.15: Trivial version bumps.
  0.4.14: Trivial version bumps, mass reformatting.
  0.4.13: Trivial version bumps.
  0.4.12: Trivial version bumps.
  0.4.11: Nice and solid looking code.  100% safe code.
  
  Reviewed:
      src\cli.rs:         +1
      src\main.rs:        +1
          151 run_lldb
              Nonterminating loops are problematic, but I think the side effects here should make this work OK?
              (see https://github.com/rust-lang/rust/issues/28728 )
      Cargo.toml:         +1
      Cargo.toml.orig:    +1
          13  readme path references unpackaged readme
  
  TIL:
      Using traits to extend clap::App so flags can be reused per-subcommand is interesting.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
cKvDBnZzXz8AIwpwkPpjXCCA8K5XtteCqrR3NONb_NYey8RXOhbwfM1us5Qz_bGH3RARNqvT8pX3dLZI_RbaDg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-17T12:20:28.243946700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.15
  revision: 473c7d9db0c85dfaea3fc1e6282f031fb6f2f6f5
  digest: y8d1-gs_qThbo8FPjtlgfmUi6f5OgB7WIGQ0D_FAvHo
package-diff-base:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.14
  revision: bc11c0be7c4a2c2459d78451c4cb1050e8bddd01
  digest: sJWLWAZy_GAt8tkkCwWfHtRSG8E3x0hN09pA4gOhyDY
review:
  thoroughness: low
  understanding: low
  rating: neutral
comment: |
  0.4.15:  Trivial version bumps
  0.4.14:  Trivial version bumps, lots of pointless style changes, a few warning fixes (missing `dyn`s etc.)
  0.4.13:  Trivial version bumps
  0.4.12:  Trivial version bumps
  0.4.11
  thoroughness: low - mostly due to iOS FFI, shell stuff not being super thorough, and review fatigue causing my eyes to glaze over in places.
  understanding: low - lots of shell/path stuff that I don't know well enough to verify
  rating: neutral - see concerns bellow.
  
  
  
  Concerns
  ========
  - Looks like lots of stuff might not work on windows... although there *is* windows-specific code, so maybe?
  - Lots of unimplemented!()
  - iOS support is chock full of unsafe { ... } for FFI.  I haven't verified the FFI signatures.
  - iOS support also uses unsafe { ... } for several objective C casts.  Needs some sanity checked utility functions.
  - iOS support has some potential UB during panics due to unwinding over FFI boundaries.
  - Implements some code signing stuff for iOS.  Necessary, and just your local certs, but I haven't fully reasoned through what security impacts if any that has.
  - Few unit tests visible in the crate itself (maybe they're separate and unpackaged?)
  - Sandboxing concerns
      - Remotes into other devices, including over ssh.
      - Frequent use of shell commands could lead to build server RCEs given malicious project metadata
      - Malicious projects will just use a build.rs file though, front door is open so to speak.
  
  
  
  Details
  =======
  src\android\device.rs           +1
      14  Odd place to install...
  src\android\mod.rs              +1
      155 Could also check android studio SDK install path
  
  src\host\device.rs              +1
  src\host\mod.rs                 +1
  src\host\platform.rs            +1
  
  src\ios\device.rs               0
      50  Not sure if the underlying iOS APIs are thread safe, but this seems acceptable.
      277 unsafe { ... } for FFI.  Looks generally safe except for scary mem::transmute(kCFBooleanTrue), but even that may be right.
      303 unsafe { ... } for FFI.  Looks safe to me.
      367 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      419 unsafe { ... } for FFI.  Looks safe to me.  
      440 unsafe { ... } for FFI.  Looks safe to me.
      454 unsafe { ... } for FFI.  Looks safe to me.
      487 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      519 This thread just eats errors.
      683 unsafe { ... } for FFI.  Transmute... probably safe.
      690 unsafe { ... } for FFI.  Looks safe to me.
      691 unsafe { ... } for FFI.  Scary Core Foundation related transmutes... probably OK, but some utilities to sanity check these conversions in debug would be nice.
      696 unsafe { ... } for FFI.  Another scary-but-probably-safe transmute.
  src\ios\helpers.py              +1
  src\ios\mobiledevice_sys.rs     0
      FFI, not perfectly verified since I don't have an OS X machine to check the headers out on.
      Ref: https://github.com/PanayotCankov/device.io/blob/master/idb/MobileDevice.h
      Various minor const differences, a few functions missing in ref, a few likely improved definitions in places.
      33  am_device_notification_callback_info has    "extra" field vs reference, "subscription".  iOS internal struct?
  src\ios\mod.rs                  0
      43  unsafe { ... } for FFI.  Looks safe to me.
      55  technically unsound inner fn (uses ptrs)
      61  Scary looking as hell, but I think this is just going Box (40) -> void* (48) -> Box (here).
      62  UNDEFINED BEHAVIOR:  Possible panic unwind through FFI, technically an hazard.
          I would've missed this edge case but for the comment, so I'm not docking points.
          Unlikely to cause severe problems, but would be worth fixing.
  src\ios\platform.rs             +1
  src\ios\xcode.rs                +1
      25  Dead code not reviewed
      91  I have not thoroughly audited this code signing stuff, but looks OK.
      199 com.zoy.kali.Dinghy?  A bit hardcoded...
  
  src\platform\mod.rs                 +1
  src\platform\regular_platform.rs    +1
      44  Since when does "regular" mean "*nix" - might not work on windows.
  
  src\script\device.rs            +1
  src\script\mod.rs               +1
  
  src\ssh\device.rs               0
  src\ssh\mod.rs                  +1
  
  src\compiler.rs                 +1
      475 Isn't this *unbanned*?
  src\config.rs                   +1
  src\device.rs                   +1
  src\errors.rs                   +1
  src\lib.rs                      +1
      87  random sleep? why?
  src\overlay.rs                  +1
  src\project.rs                  +1
  src\toolchain.rs                +1
  src\utils.rs                    +1
  
  build.rs                        +1
  Cargo.toml                      +1
  Cargo.toml.orig                 +1
  
  
  
  TIL
  ===
  Neat loop pattern:
  
  ```
  for (a,     b,      c) in &[
      ("a",   "b",    "c"),
      ("aa",  "bb",   "cc"),
  ] {
      ...
  }
  ```
  
  Sysroot paths:  ndk/toolchains/llvm/prebuilt/sysroot/usr/lib/{binutils_cpu}-linux-{abi_kind}"
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
bsTFN6qVso5WxEWEQ0XubQkPjD24HYRxFzFbkvd3VU8uZuowVi1-pgwYgnEw3d1BflKQIT2_yI8ycqEesuQXDQ
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-17T12:20:47.787733300-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.15
  revision: 820c5920f837cdc1470547fbfab247e3638fe2e8
  digest: CqjWRIFHU9d1Dv0qFODaMqW3u3DhZGtshtGO5YvMNVk
package-diff-base:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.14
  revision: 664a76c0ea07e750abf9e1ea924bc5dd4b9f7bbc
  digest: 4izl26lmAykViPUdVHW1qdCNAa8Xx_0moS5zlloQxkc
review:
  thoroughness: medium
  understanding: low
  rating: positive
comment: |
  0.4.15:  Trivial version bumps.
  0.4.14:  Trivial version bumps, style changes.
  0.4.13:  Trivial version bumps.
  0.4.12:  Trivial version bumps.
  0.4.11
  Some of the build/path stuff seems a little off... but might be correct?
  All safe code, no security problems.
  
  Reviewed:
  
      src\build_env.rs    +1
      src\build.rs        +1
      src\lib.rs          0
          102 Is this really correct for specifying the *host* environment?
          105 ..
      src\utils.rs        0
          14  Isn't this generating /../../../ ?  Doesn't seem right...
  
      Cargo.toml          +1
      Cargo.toml.orig     +1
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
XgWQSZfCEWj8RJWadxapbg-utSzdh-irG6lCQRnKLyyKDVPMuBlW6HphkgyOeNKiVOD3JeOcWsRazLAyYR-cAQ
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-17T12:21:51.869509600-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.16
  revision: ddeac04631eb11cb4d0e5d635df48e4dd72cecc2
  digest: QrODDMVdsPYOssL-BakJfFXygxLNisSI4Ot2At8vrmA
package-diff-base:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.15
  revision: b9d207b57ca3f5cafadf7a7d540d41eea4022271
  digest: _OQIM7YkwqsWZOvmWX5qBHyDQ0TFK_JrRb_d7kL61Xw
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  0.4.16: Trivial version bumps.
  0.4.15: Trivial version bumps.
  0.4.14: Trivial version bumps, mass reformatting.
  0.4.13: Trivial version bumps.
  0.4.12: Trivial version bumps.
  0.4.11: Nice and solid looking code.  100% safe code.
  
  Reviewed:
      src\cli.rs:         +1
      src\main.rs:        +1
          151 run_lldb
              Nonterminating loops are problematic, but I think the side effects here should make this work OK?
              (see https://github.com/rust-lang/rust/issues/28728 )
      Cargo.toml:         +1
      Cargo.toml.orig:    +1
          13  readme path references unpackaged readme
  
  TIL:
      Using traits to extend clap::App so flags can be reused per-subcommand is interesting.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
mFbYD9_lM8z6alFX2xELkr9S9gfQ8kLdL9cYzDhK2-axE9pgBgWmi2-eLpSneGyQ2zqEHdh5YxCuotRzDgzgCw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-17T12:22:11.698502900-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.16
  revision: d9a23c379beda7aec61431787cac1a1674737b6a
  digest: LeMZaCEiNvw00iG5pUnD9H5W8yyWbzlm2P-4279-ZOk
package-diff-base:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.15
  revision: 473c7d9db0c85dfaea3fc1e6282f031fb6f2f6f5
  digest: y8d1-gs_qThbo8FPjtlgfmUi6f5OgB7WIGQ0D_FAvHo
review:
  thoroughness: low
  understanding: low
  rating: neutral
comment: |
  0.4.16:  Trivial version bumps, thread -> std::thread
  0.4.15:  Trivial version bumps
  0.4.14:  Trivial version bumps, lots of pointless style changes, a few warning fixes (missing `dyn`s etc.)
  0.4.13:  Trivial version bumps
  0.4.12:  Trivial version bumps
  0.4.11
  thoroughness: low - mostly due to iOS FFI, shell stuff not being super thorough, and review fatigue causing my eyes to glaze over in places.
  understanding: low - lots of shell/path stuff that I don't know well enough to verify
  rating: neutral - see concerns bellow.
  
  
  
  Concerns
  ========
  - Looks like lots of stuff might not work on windows... although there *is* windows-specific code, so maybe?
  - Lots of unimplemented!()
  - iOS support is chock full of unsafe { ... } for FFI.  I haven't verified the FFI signatures.
  - iOS support also uses unsafe { ... } for several objective C casts.  Needs some sanity checked utility functions.
  - iOS support has some potential UB during panics due to unwinding over FFI boundaries.
  - Implements some code signing stuff for iOS.  Necessary, and just your local certs, but I haven't fully reasoned through what security impacts if any that has.
  - Few unit tests visible in the crate itself (maybe they're separate and unpackaged?)
  - Sandboxing concerns
      - Remotes into other devices, including over ssh.
      - Frequent use of shell commands could lead to build server RCEs given malicious project metadata
      - Malicious projects will just use a build.rs file though, front door is open so to speak.
  
  
  
  Details
  =======
  src\android\device.rs           +1
      14  Odd place to install...
  src\android\mod.rs              +1
      155 Could also check android studio SDK install path
  
  src\host\device.rs              +1
  src\host\mod.rs                 +1
  src\host\platform.rs            +1
  
  src\ios\device.rs               0
      50  Not sure if the underlying iOS APIs are thread safe, but this seems acceptable.
      277 unsafe { ... } for FFI.  Looks generally safe except for scary mem::transmute(kCFBooleanTrue), but even that may be right.
      303 unsafe { ... } for FFI.  Looks safe to me.
      367 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      419 unsafe { ... } for FFI.  Looks safe to me.  
      440 unsafe { ... } for FFI.  Looks safe to me.
      454 unsafe { ... } for FFI.  Looks safe to me.
      487 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      519 This thread just eats errors.
      683 unsafe { ... } for FFI.  Transmute... probably safe.
      690 unsafe { ... } for FFI.  Looks safe to me.
      691 unsafe { ... } for FFI.  Scary Core Foundation related transmutes... probably OK, but some utilities to sanity check these conversions in debug would be nice.
      696 unsafe { ... } for FFI.  Another scary-but-probably-safe transmute.
  src\ios\helpers.py              +1
  src\ios\mobiledevice_sys.rs     0
      FFI, not perfectly verified since I don't have an OS X machine to check the headers out on.
      Ref: https://github.com/PanayotCankov/device.io/blob/master/idb/MobileDevice.h
      Various minor const differences, a few functions missing in ref, a few likely improved definitions in places.
      33  am_device_notification_callback_info has    "extra" field vs reference, "subscription".  iOS internal struct?
  src\ios\mod.rs                  0
      43  unsafe { ... } for FFI.  Looks safe to me.
      55  technically unsound inner fn (uses ptrs)
      61  Scary looking as hell, but I think this is just going Box (40) -> void* (48) -> Box (here).
      62  UNDEFINED BEHAVIOR:  Possible panic unwind through FFI, technically an hazard.
          I would've missed this edge case but for the comment, so I'm not docking points.
          Unlikely to cause severe problems, but would be worth fixing.
  src\ios\platform.rs             +1
  src\ios\xcode.rs                +1
      25  Dead code not reviewed
      91  I have not thoroughly audited this code signing stuff, but looks OK.
      199 com.zoy.kali.Dinghy?  A bit hardcoded...
  
  src\platform\mod.rs                 +1
  src\platform\regular_platform.rs    +1
      44  Since when does "regular" mean "*nix" - might not work on windows.
  
  src\script\device.rs            +1
  src\script\mod.rs               +1
  
  src\ssh\device.rs               0
  src\ssh\mod.rs                  +1
  
  src\compiler.rs                 +1
      475 Isn't this *unbanned*?
  src\config.rs                   +1
  src\device.rs                   +1
  src\errors.rs                   +1
  src\lib.rs                      +1
      87  random sleep? why?
  src\overlay.rs                  +1
  src\project.rs                  +1
  src\toolchain.rs                +1
  src\utils.rs                    +1
  
  build.rs                        +1
  Cargo.toml                      +1
  Cargo.toml.orig                 +1
  
  
  
  TIL
  ===
  Neat loop pattern:
  
  ```
  for (a,     b,      c) in &[
      ("a",   "b",    "c"),
      ("aa",  "bb",   "cc"),
  ] {
      ...
  }
  ```
  
  Sysroot paths:  ndk/toolchains/llvm/prebuilt/sysroot/usr/lib/{binutils_cpu}-linux-{abi_kind}"
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
xBgSnGiay3qVAbr7ODzS-LrcFImubV4YlExuSI27BQ9ZKAxktCpr2zoApQhmeqa0nGEveL3AapWMVNf1zEsEDw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-17T12:22:47.384722700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.16
  revision: 07567444c15e9fc9ce25f501aa2d2eb70b4c81df
  digest: nw2-iQS2lGLJgNH_ma_uc3kjha8CXVUr399ezFif8kU
package-diff-base:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.15
  revision: 820c5920f837cdc1470547fbfab247e3638fe2e8
  digest: CqjWRIFHU9d1Dv0qFODaMqW3u3DhZGtshtGO5YvMNVk
review:
  thoroughness: medium
  understanding: low
  rating: positive
comment: |
  0.4.16:  Trivial version bumps.
  0.4.15:  Trivial version bumps.
  0.4.14:  Trivial version bumps, style changes.
  0.4.13:  Trivial version bumps.
  0.4.12:  Trivial version bumps.
  0.4.11
  Some of the build/path stuff seems a little off... but might be correct?
  All safe code, no security problems.
  
  Reviewed:
  
      src\build_env.rs    +1
      src\build.rs        +1
      src\lib.rs          0
          102 Is this really correct for specifying the *host* environment?
          105 ..
      src\utils.rs        0
          14  Isn't this generating /../../../ ?  Doesn't seem right...
  
      Cargo.toml          +1
      Cargo.toml.orig     +1
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
u8gFzAd8TjMktT4Gl02_U9oXlZQ5sqZTvek3xE3UTZACg2KRo180ebugXBcFp8jAxP5718SSer9UzCpKSaneAQ
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-19T13:50:21.622165500-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: specs
  version: 0.15.1
  revision: 9ffc149b850614a390c3229b82220c19491e411b
  digest: WGEEXt1TxgOdyPEbwLNqP1M4T72ZcCpfhVRSk1PnQkQ
review:
  thoroughness: medium
  understanding: medium
  rating: neutral
comment: |
  Pros:
  * Very well documented
  * Well tested
  * Good attention to detail WRT unsafe code.
  
  Cons:
  * Issue [#644] Scary partially uninitialized Vec\<T\>s
  * PR [#645] `println!()`s for !is_unconstrained() joins is lame / a perf hazard in and of itself.
  * Complicated as heck
  * I'm not yet convinced the ParJoin s are sound
  * Plenty of unsafe code
      * Some scary lifetime extensions
      * Comments like "// This is horribly unsafe."
  * See `-1`s for more details
  
  0.15.1
  ======
  
  Misc. notes:
  * I still don't have a firm grasp on when `world.maintain()` is necessary
  
  | crev          |   |
  | ------------- |---|
  | thoroughness  | medium
  | understanding | medium
  | rating        | neutral
  
  | File                                                  | Rating | Notes |
  | ----------------------------------------------------- | ------ | ----- |
  | .github/ISSUE_TEMPLATE/bug_report.md                  | +1 | |
  | .github/ISSUE_TEMPLATE/feature_request.md             | +1 | |
  | .github/stale.yml                                     | +1 | |
  | benches/benches_main.rs                               | +1 | criterion
  | benches/big_or_small.rs                               | +1 | nalgebra, shred
  | benches/parallel.rs                                   | +1 | |
  | benches/storage_cmp.rs                                | +1 | |
  | benches/storage_sparse.rs                             | +1 | |
  | benches/world.rs                                      | +1 | rayon
  | docs/reference/src/01_system.md                       |  0 | ~empty
  | docs/reference/src/intro.md                           | +1 | |
  | docs/reference/src/SUMMARY.md                         | +1 | TOC
  | docs/reference/book.toml                              | +1 | |
  | docs/tutorials/src/images/component-tables.svg        | +1 | \<switch\>?  \<foreignObject\>?  What is this madness...
  | docs/tutorials/src/images/entity-component.svg        | +1 | |
  | docs/tutorials/src/images/system.svg                  | +1 | |
  | docs/tutorials/src/01_intro.md                        | +1 | Java?
  | docs/tutorials/src/02_hello_world.md                  |  0 | specs 0.15.0, lots of `rust,ignore`s, poor link names
  | docs/tutorials/src/03_dispatcher.md                   | +1 | |
  | docs/tutorials/src/04_resources.md                    | +1 | Option\<Read\<...\>\>
  | docs/tutorials/src/05_storages.md                     | +1 | |
  | docs/tutorials/src/06_system_data.md                  | +1 | |
  | docs/tutorials/src/07_setup.md                        | +1 | |
  | docs/tutorials/src/08_join.md                         | +1 | |
  | docs/tutorials/src/09_parallel_join.md                | +1 | |
  | docs/tutorials/src/10_rendering.md                    | +1 | |
  | docs/tutorials/src/11_advanced_component.md           | +1 | |
  | docs/tutorials/src/12_tracked.md                      | +1 | |
  | docs/tutorials/src/13_saveload.md                     | +1 | |
  | docs/tutorials/src/14_troubleshooting.md              | +1 | |
  | docs/tutorials/src/SUMMARY.md                         | +1 | TOC
  | docs/tutorials/book.toml                              | +1 | |
  | docs/website/content/pages/about.md                   | +1 | |
  | docs/website/content/pages/docs.md                    | +1 | |
  | docs/website/content/_index.md                        | +1 | |
  | docs/website/content/specs-0.15.md                    | +1 | draft, "Test"
  | docs/website/themes/hyde/sass/hyde.scss               | +1 | |
  | docs/website/themes/hyde/sass/poole.scss              | +1 | |
  | docs/website/themes/hyde/sass/print.scss              | +1 | |
  | docs/website/themes/hyde/static/.gitkeep              | +1 | |
  | docs/website/themes/hyde/templates/404.html           | +1 | some templating engine used
  | docs/website/themes/hyde/templates/index.html         | +1 | |
  | docs/website/themes/hyde/templates/page-nodate.html   | +1 | |
  | docs/website/themes/hyde/templates/page.html          | +1 | |
  | docs/website/themes/hyde/.gitignore                   | +1 | |
  | docs/website/themes/hyde/config.toml                  | +1 | |
  | docs/website/themes/hyde/LICENSE                      | +1 | MIT
  | docs/website/themes/hyde/README.md                    | +1 | |
  | docs/website/themes/hyde/theme.toml                   | +1 | |
  | docs/website/config.toml                              | +1 | |
  | examples/async.rs                                     | +1 | |
  | examples/basic.rs                                     | +1 | |
  | examples/bitset.rs                                    | +1 | fizzbuzz!  Hah.
  | examples/cluster_bomb.rs                              | +1 | |
  | examples/full.rs                                      | +1 | `dispatcher.with_barrier()`
  | examples/ordered_track.rs                             | +1 | |
  | examples/saveload.rs                                  | +1 | ron, structs/impls inside fns
  | examples/track.rs                                     | +1 | |
  | scripts/build-netlify.sh                              |  0 | Installing things from the internet (zola, mdbook, rustup)
  | scripts/kcov.sh                                       | -1 | docker - owns/deletes mykcov1, runs images, disables seccomp
  | [src/join/mod.rs](src/join/mod.rs)                    |  0 | I don't fully grok the ParJoin limitations yet, nor the underlying reason behind unsafe fn open/get.
  | [src/join/par_join.rs](src/join/par_join.rs)          | -1 | "[...] technically not allowed" (ab)use of UnsafeCell
  | src/saveload/de.rs                                    | +1 | |
  | src/saveload/marker.rs                                | +1 | |
  | src/saveload/mod.rs                                   | +1 | |
  | src/saveload/ser.rs                                   | +1 | |
  | src/saveload/tests.rs                                 | +1 | |
  | src/saveload/uuid.rs                                  | +1 | |
  | src/storage/data.rs                                   | +1 | |
  | [src/storage/drain.rs](src/storage/drain.rs)          | +1 | |
  | [src/storage/entry.rs](src/storage/entry.rs)          | -1 | `Entries::get` seems sketchy
  | [src/storage/flagged.rs](src/storage/flagged.rs)      | +1 | |
  | src/storage/generic.rs                                | +1 | |
  | [src/storage/mod.rs](src/storage/mod.rs)              | -1 | `&mut Storage::get_mut` is sketchy as heck
  | [src/storage/restrict.rs](src/storage/restrict.rs)    | -1 | More `ParJoin` I can't wrap my head around, `_unchecked` fns sound unsafe but aren't marked as such.
  | [src/storage/storages.rs](src/storage/storages.rs)    | -1 | [#644], `UnprotectedStorage` is a scary API in general for perf reasons.
  | [src/storage/tests.rs](src/storage/tests.rs)          | +1 | needs more 
  | [src/storage/track.rs](src/storage/track.rs)          |  0 | |
  | src/world/comp.rs                                     | +1 | |
  | [src/world/entity.rs](src/world/entity.rs)            |  0 | Possibly missing some `self.killed.contains(...)` checks in `Allocator`, ungrokked `ParJoin`
  | src/world/lazy.rs                                     | +1 | |
  | src/world/mod.rs                                      | +1 | |
  | src/world/tests.rs                                    | +1 | |
  | [src/world/world_ext.rs](src/world/world_ext.rs)      |  0 | Some concerns about `create_entity_unchecked`, `is_alive`
  | [src/bitset.rs](src/bitset.rs)                        | +1 | |
  | [src/changeset.rs](src/changeset.rs)                  | -1 | Bypasses lifetime checks
  | src/error.rs                                          | +1 | |
  | src/lib.rs                                            | +1 | |
  | src/prelude.rs                                        | +1 | |
  | tests/saveload.rs                                     | +1 | |
  | tests/tests.rs                                        | +1 | |
  | .cargo_vcs_info.json                                  | +1 | |
  | .cargo-ok                                             | +1 | |
  | .gitignore                                            | +1 | |
  | .rustfmt.toml                                         | +1 | |
  | Cargo.lock                                            | +1 | |
  | Cargo.toml                                            | +1 | |
  | Cargo.toml.orig                                       | +1 | |
  | CHANGELOG.md                                          | +1 | I like the link format here
  | CODE_OF_CONDUCT.md                                    | +1 | |
  | codecov.yml                                           | +1 | |
  | CONTRIBUTING.md                                       | +1 | |
  | LICENSE-APACHE                                        | +1 | |
  | LICENSE-MIT                                           | +1 | |
  | netlify.toml                                          | +1 | |
  | PULL_REQUEST_TEMPLATE.md                              | +1 | |
  | README.md                                             | +1 | Dual MIT/Apache 2.0, could use a deps badge
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | -1 | ParJoin sounds unsound, scary comments like "// This is horribly unsafe."
  | miri      | -1 | N/A (atomics)
  | fs        | +1 | N/A
  | io        | +1 | N/A
  | docs      | +1 | Sets the golden standard for how to document unsafe code in many places... but sadly not all.
  | tests     | 0  | Some gaps on a per-module basis, which really seem necessary for some of the scarier nests of unsafe code.
  
  src/join/mod.rs
  ---------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 227   | unsafe fn Join::open                          | Hmm... will this truly be unsound?  Will need to read more...
  | 237   | unsafe fn Join::get                           | "The implementation [...] has no invariants to meet" - I don't grok why this is unsafe yet, but tat least the doc comments seem clear.
  | 273   | unsafe fn MaybeJoin::open                     | +1, just forwards, good doc comments about held constraints
  | 280   | unsafe fn MaybeJoin::get                      | +1, meets documented constraints, good doc comments about held constraints
  | 305   | fn JoinIter::new                              | 0, fix pending: [#645] println! isn't an appropriate mechanism for this and possibly adds another perf issue.  PR switches to log crate.
  | 312   | fn JoinIter::new                              | 0, relies on constraint of impl
  | 370   | fn JoinIter::get                              | +1, documents and abides by safety constraints
  | 386   | fn JoinIter::get_unchecked                    | +1, documents and abides by safety constraints
  | 399   | fn JoinIter::next                             | +1, documents and abides by safety constraints
  | 422   | unsafe fn (A,B,...)::open                     | +1, documents and abides by safety constraints
  | 434   | unsafe fn (A,B,...)::get                      | +1, documents and abides by safety constraints
  | 440   |        fn (A,B,...)::is_unconstrained         | +1
  | 451   | unsafe impl ParJoin for (A,B,...)             | 0, sounds accurate but I don't fully grok
  | 500   | unsafe fn \_Readers\_::open                   | +1, just forwards sanely
  | 506   | unsafe fn \_Readers\_::get                    | +1, just forwards sanely
  | 511   | unsafe fn \_Readers\_::is_unconstrained       | +1
  | 519   | unsafe impl ParJoin for \_Readers\_           | 0, sounds accurate but I don't fully grok
  | 542   | unsafe fn \_Writers\_::open                   | +1, just forwards sanely
  | 548   | unsafe fn \_Writers\_::get                    | +1, just forwards sanely
  | 553   | unsafe fn \_Writers\_::is_unconstrained       | +1
  | 561   | unsafe impl ParJoin for \_Writers\_           | 0, sounds accurate but I don't fully grok
  | EOF   | | |
  
  src/join/par_join.rs
  --------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  21   | fn ParJoin::par_join comment                  | -1, "NOTE: This is currently unspecified behavior." - concerning...
  |  30   | fn ParJoin::par_join                          | 0, fix pending: [#645] println! isn't an appropriate mechanism for this and possibly adds another perf issue.  PR switches to log crate.
  |  56   | fn JoinParIter::drive_unindexed               | 0, `unsafe { ... }` relies on constraint of impl
  |  98   | unsafe impl Send for JoinProducer             | -1, "[...] technically not allowed" abuse of UnsafeCell
  | 130   | fn UnindexedProducer::fold_with               | 0, logic makes sense to me here
  | EOF   | | |
  
  src/storage/drain.rs
  --------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  25   | unsafe fn Drain::open                         | +1, just forwards sanely
  |  32   | unsafe fn Drain::get                          | +1, uses remove sanely
  | EOF   | | |
  
  src/storage/entry.rs
  --------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  41   | fn Storage::entry                             | +1, `unsafe { ... }` documents and abides by safety constraints
  | 121   | fn Storage::entries                           | +1
  | 140   | unsafe fn Entries::open                       | +1
  | 146   | unsafe fn Entries::get                        | -1, `unsafe { ... }` - I can't verify how this lifetime extension is possibly sound either.
  | 164   | fn Entries::is_unconstrained                  | +1
  | 184   | fn OccupiedEntry::get                         | +1, `unsafe { ... }` - documents and abides by safety constraints
  | 197   | fn OccupiedEntry::get_mut                     | +1, `unsafe { ... }` - documents and abides by safety constraints
  | 205   | fn OccupiedEntry::into_mut                    | +1, `unsafe { ... }` - documents and abides by safety constraints
  | 209   | fn OccupiedEntry::insert                      | +1
  | 215   | fn OccupiedEntry::remove                      | +1
  | 236   | fn VacantEntry::insert                        | +1, `unsafe { ... }` - documents and abides by safety constraints
  | EOF   | | |
  
  src/storage/flagged.rs
  ----------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 203   | unsafe fn FlaggedStorage::clean               | +1, just forwards sanely
  | 210   | unsafe fn FlaggedStorage::get                 | +1, just forwards sanely
  | 214   | unsafe fn FlaggedStorage::get_mut             | +1, just forwards sanely
  | 221   | unsafe fn FlaggedStorage::insert              | +1, just forwards sanely
  | 228   | unsafe fn FlaggedStorage::remove              | +1, just forwards sanely
  | EOF   | | |
  
  src/storage/mod.rs
  ------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  57   | unsafe fn AntiStorage::open                   | +1, safe and sound
  |  62   | unsafe fn AntiStorage::get                    | +1, safe and sound
  |  66   | unsafe impl DistinctStorage for AntiStorage   | +1, safe and sound
  |  70   | unsafe impl ParJoin for AntiStorage           | +1, safe and sound
  |  78   | unsafe impl CastFrom for dyn AnyStorage       | 0, don't fully grok why this is unsafe, but looks 100% safe and sound and matches shred examples.
  | 122   | unsafe trait DistinctStorage                  | +1, safe and sound
  | 155   | fn MaskedStorage::clear                       | +1, `unsafe { ... }` - documents and abides by safety constraints
  | 165   | fn MaskedStorage::remove                      | +1, `unsafe { ... }` - documents and abides by safety constraints
  | 175   | fn MaskedStorage::drop                        | +1, `unsafe { ... }` - documents and abides by safety constraints
  | 231   | fn Storage::get                               | +1, `unsafe { ... }` - documents and abides by safety constraints
  | 274   | unsafe fn Storage::unprotected_storage_mut    | +1, documents constraints
  | 282   | fn Storage::get_mut                           | +1, `unsafe { ... }` - documents and abides by safety constraints
  | 299   | fn Storage::insert                            | +1, `unsafe { ... }` - documents and abides by safety constraints
  | 304   | fn Storage::insert                            | +1, `unsafe { ... }` - documents and abides by safety constraints
  | 341   | unsafe impl DistinctStorage for Storage       | +1, proper constraints
  | 356   | unsafe fn &Storage::open                      | +1, documents constraints
  | 362   | unsafe fn &Storage::get                       | +1, just forwards sanely
  | 400   | unsafe fn &mut Storage::open                  | +1, documents constraints
  | 409   | unsafe fn &mut Storage::get                   | -1, WTF? Lifetime extension? Can't this just be v.get_mut(i)?
  | 449   | trait UnprotectedStorage                      | -1, needs to make it clearer that `clear` *must* be called before dropping as currently stands, unless that's just a bug.
  | 457   | unsafe fn UnprotectedStorage::clear           | +1, documents constraints
  | 472   | unsafe fn UnprotectedStorage::get             | +1, documents constraints
  | 485   | unsafe fn UnprotectedStorage::get_mut         | +1, documents constraints
  | 496   | unsafe fn UnprotectedStorage::insert          | +1, documents constraints
  | 504   | unsafe fn UnprotectedStorage::remove          | +1, documents constraints
  | 514   | unsafe fn UnprotectedStorage::drop            | +1, documents constraints, default impl sane/sound
  | EOF   | | |
  
  src/storage/restrict.rs
  -----------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  83   | unsafe impl ParJoin for &mut RestrictedStorage\<..., MutableParallelRestriction\> | -1, no idea
  |  93   | unsafe impl ParJoin for &RestrictedStorage\<..., ImmutableAliasing\>              | -1, no idea
  | 113   | unsafe fn &RestrictedStorage::open                                                | 0, could maybe document safety more, but I believe sound?
  | 118   | unsafe fn &RestrictedStorage::get                                                 | 0, could maybe document safety more, but I believe sound?
  | 144   | unsafe fn &mut RestrictedStorage::open                                            | 0, could maybe document safety more, but I believe sound?
  | 149   | unsafe fn &mut RestrictedStorage::get                                             | 0, could maybe document safety more, but I believe sound?
  | 239   | fn PairedStorage::get_unchecked                                                   | -1, `unsafe { ... }` - maybe fine, but safety undocumented and get_unchecked sounds like something that should itself be an unsafe fn?
  | 252   | fn PariedStorage::get_mut_unchecked                                               | -1, `unsafe { ... }` - maybe fine, but safety undocumented and get_unchecked sounds like something that should itself be an unsafe fn?
  | 272   | fn PairedStorage::get                                                             | +1, abides by safety constraints
  | 294   | fn PairedStorage::get_mut                                                         | +1, abides by safety constraints
  | EOF   | | |
  
  src/storage/storages.rs
  -----------------------
  Careful auditing gives a good idea for what the actual API requirements of `UnprotectedStorage` are, and it's a doozy.
  
  1. VecStorage makes it unsound to not call `clean`
  2. Noop `clean`s on several storages make me think it should consume `self` instead of taking `&mut self` - maybe can't due to API limitations?
  3. Need clearer UnprotectedStorage docs
  
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  20   | unsafe fn BTreeStorage::clean                     | 0, should maybe clear storage?
  |  27   | unsafe fn BTreeStorage::get                       | +1
  |  31   | unsafe fn BTreeStorage::get_mut                   | +1
  |  35   | unsafe fn BTreeStorage::insert                    | +1
  |  39   | unsafe fn BTreeStorage::remove                    | +1
  |  44   | unsafe impl DistinctStorage for BTreeStorage      | +1 as I grok DistinctStorage
  |  54   | unsafe fn HashMapStorage::clean                   | 0, should maybe clear storage?
  |  61   | unsafe fn HashMapStorage::get                     | +1
  |  65   | unsafe fn HashMapStorage::get_mut                 | +1
  |  69   | unsafe fn HashMapStorage::insert                  | +1
  |  73   | unsafe fn HashMapStorage::remove                  | +1
  |  78   | unsafe impl DistinctStorage for HashMapStorage    | +1
  |  95   | unsafe fn DenseVecStorage::clean                  | 0, should maybe clear storage?
  | 102   | unsafe fn DenseVecStorage::get                    | 0, unsound on bad index, but fn is unsafe.  Otherwise sound.
  | 107   | unsafe fn DenseVecStorage::get_mut                | 0, unsound on bad index, but fn is unsafe.  Otherwise sound.
  | 112   | unsafe fn DenseVecStorage::insert                 | 0, `set_len` leaves uninitialized gaps in the data_id Vec.  Maybe sound, but at least violates std docs.  See [#644]
  | 124   | unsafe fn DenseVecStorage::remove                 | 0, unsound on bad index, but fn is unsafe.  Otherwise sound.
  | 133   | unsafe impl DistinctStorage for DenseVecStorage   | +1
  | 143   | unsafe fn NullStorage::clean                      | +1
  | 149   | unsafe fn NullStorage::get                        | +1
  | 153   | unsafe fn NullStorage::get_mut                    | +1
  | 157   | unsafe fn NullStorage::insert                     | +1
  | 159   | unsafe fn NullStorage::remove                     | +1
  | 178   | unsafe impl DistinctStorage for NullStorage       | +1, precondition enforced by `Default::default()`
  | 187   | unsafe fn VecStorage::clean                       | +1
  | 200   | unsafe fn VecStorage::get                         | 0, unsound on bad index, but fn is unsafe.  Otherwise sound.
  | 204   | unsafe fn VecStorage::get_mut                     | 0, unsound on bad index, but fn is unsafe.  Otherwise sound.
  | 208   | unsafe fn VecStorage::insert                      | -1, `set_len` leaves uninitialized gaps in the data_id Vec, making it unsound to drop before calling clean.  Sound if perfectly used (e.g. call clean), but a timebomb as stands IMO.  See [#644]
  | 222   | unsafe fn VecStorage::remove                      | 0, unsound on bad index, but fn is unsafe.  Otherwise sound.
  | 229   | unsafe impl DistinctStorage for VecStorage        | +1
  | EOF   | | |
  
  src/storage/tests.rs
  --------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 460   | vec_arc                                       | +1, `unsafe { ... }`
  |       |                                               | -1, would like to see more tests involving drop types
  |       |                                               | -1, would like to see more tests involving specific storages
  | EOF   | | |
  
  src/storage/track.rs
  --------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  53   | fn Storage::channel                           | 0, `unsafe { ... }` - I don't grok the safety invariants we need to hold here
  |  59   | fn Storage::event_emission                    | 0, `unsafe { ... }` - I don't grok the safety invariants we need to hold here
  |  72   | fn Storage::channel_mut                       | 0, `unsafe { ... }` - I don't grok the safety invariants we need to hold here
  |  92   | fn Storage::set_event_emission                | 0, `unsafe { ... }` - I don't grok the safety invariants we need to hold here
  | EOF   | | |
  
  src/world/entity.rs
  -------------------
  Well, this is a bit more complicated than simply doing generational indicies.  Atomics... oh boy.
  
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  51   | struct Allocator                              | 0, interplay of fields is underdocumented
  |       | Allocator::alive                              | Lagging bitset derived from aliveness of `generations`, used for `Join` and not much else.  Lags behind when *\_atomic is used.
  |       | Allocator::raised, killed                     | Tracks atomic ops specifically for later merge, otherwise ignored/internal.
  |       | Allocator::cache                              | LIFO queue of entity IDs to reuse
  |       | Allocator::max_id                             | next entity ID if no entity IDs to reuse
  |  90   | fn Allocator::kill_atomic                     | 0, leaves generations alone?  Is this an async kill?
  | 114   | fn Allocator::is_alive                        | -1, doesn't this need to check !self.killed.contains(id) too?
  | 131   | fn Allocator::entity                          | -1, doesn't this need to check !self.killed.contains(id) too?
  | 188   | fn Allocator::merge                           | 0, why not push directly into cache?
  | 211   | struct CreateIterAtomic                       | +1
  | 223   | struct Entity                                 | +1
  | 256   | struct EntitiesRes                            | +1
  | 321   | unsafe fn EntitiesRes::open                   | +1? don't fully grok preconds but this seems fine/safe
  | 321   | unsafe fn EntitiesRes::get                    | +1? don't fully grok preconds but this seems fine/safe
  | 336   | unsafe impl ParJoin for EntitiesRes           | -1, don't fully grok preconds
  | 341   | struct EntityResBuilder                       | +1
  | 376   | struct Generation                             | +1, should maybe have a struct-level comment that negative = dead though?  Although obvious from fn is_alive...
  | 420   | struct ZeroableGeneration                     | +1
  | 441   | fn ZeroableGeneration::die                    | 0, is debug_assert! enough?  Seems like it'll go super off the rails in release builds, and other fns like raised panic.  Internal method though...
  | 451   | fn ZeroableGeneration::raised                 | 0, explicit checked_sub vs implicit for Generation::raised
  | 470   | struct EntityCache                            | 0, needs better docs.  Seems to be a semi-concurrent FILO index list for entity realloc.
  | EOF   | | |
  
  src/world/world_ext.rs
  ----------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 240   | fn WorldExt::create_entity_unchecked          | -1, does this need to be an `unsafe fn`?  What isn't checked?  Just that you have exclusive world access?
  | 281   | fn WorldExt::is_alive                         | 0, sketchy edge cases
  | 392   | fn World::is_alive                            | 0, should this really be panicing on a dead generation?  Doesn't that just mean the entity is dead?!?
  | EOF   | | |
  
  src/bitset.rs
  -------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  24   | unsafe fn BitSet\*::open                      | +1, sure?
  |  29   | unsafe fn BitSet\*::get                       | +1, sure?
  |  35   | unsafe impl ParJoin for BitSet\*              | 0, think this is fine?
  | EOF   | | |
  
  src/changeset.rs
  ----------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 61    | fn ChangeSet::add                             | +1, `unsafe { ... }` - documents and abides by safety constraints
  | 66    | fn ChangeSet::add                             | +1, `unsafe { ... }` - abides by safety constraints, docs seem a little off
  | 77    | fn ChangeSet::clear                           | +1, `unsafe { ... }` - documents and abides by safety constraints
  | 115   | unsafe fn &mut ChangeSet::open                | +1, sure?
  | 123   | unsafe fn &mut ChangeSet::get                 | -1, bypasses lifetime checks!
  | 134   | unsafe fn &ChangeSet::open                    | +1, sure?
  | 141   | unsafe fn &ChangeSet::get                     | +1, sure?
  | 154   | unsafe fn ChangeSet::open                     | +1, sure?
  | 161   | unsafe fn ChangeSet::get                      | +1, sure?
  | EOF   | | |
  
  TIL
  ---
  * std::num::NonZeroI32
  * std::fmt::Formatter .debug_tuple().field().finish()
  * `#[must_use]` makes a lot of sense for builder patterns terminating in `.build()`
  
  [#644]:     https://github.com/slide-rs/specs/issues/644
  [#645]:     https://github.com/slide-rs/specs/pull/645
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
WK9DfXi1UrIErL-c_h0kPE1awJU67GFuXejs_mSPO3YDU2vnGh_oH-0-tqsFnZ1422gEn6qDgbS2nuVZUPY6Ag
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-23T17:01:19.953825900-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: cargo-edit
  version: 0.3.3
  revision: ad517e456fe901d32c5033d586d9cd67b2a7a335
  digest: ZLLOIq-75CktDhfqmSWOZr2_F9rRdlyjxDgAM4CyNV0
review:
  thoroughness: low
  understanding: medium
  rating: neutral
comment: |
  Add/remove/update Cargo.toml dependencies from the command line.
  
  Pros:
  * Safe, probably works
  
  Cons:
  * Lots of code
  * Lots of dependencies, some of which I haven't fully audited.
  * No Cargo.lock so not installable with `--frozen`
  * License ambiguity (is this MIT or Apache-2.0/MIT licensed?)
  
  0.3.3
  =====
  | crev          |   |
  | ------------- |---|
  | thoroughness  | low
  | understanding | medium
  | rating        | neutral
  
  | File                                                  | Rating | Notes |
  | ----------------------------------------------------- | ------ | ----- |
  | src/bin/add/args.rs                                   | +1 | |
  | src/bin/add/main.rs                                   | +1 | |
  | src/bin/add/manifest_test.rs                          | +1 | |
  | src/bin/rm/main.rs                                    | +1 | |
  | src/bin/upgrade/main.rs                               | +1 | |
  | src/crate_name.rs                                     | -1 | .contains(url) seems wrong
  | src/dependency.rs                                     | -1 | No branch support for dependencies?
  | src/errors.rs                                         | +1 | |
  | src/fetch.rs                                          | +1 | |
  | src/lib.rs                                            | +1 | |
  | src/manifest.rs                                       | 0 | find/search duplicate some of `cargo metadata`'s effort I believe
  | tests/fixtures/add/local/Cargo.toml.sample            | +1 | |
  | tests/fixtures/add/Cargo.toml.sample                  | +1 | |
  | tests/fixtures/manifest-invalid/Cargo.toml.sample     | +1 | |
  | tests/fixtures/rm/Cargo.toml.sample                   | +1 | |
  | tests/fixtures/upgrade/Cargo.toml.invalid             | +1 | |
  | tests/fixtures/upgrade/Cargo.toml.source              | +1 | |
  | tests/fixtures/upgrade/Cargo.toml.target              | +1 | |
  | tests/cargo-add.rs                                    | 0 | 191: Duplicate assert!s for no reason?
  | tests/cargo-rm.rs                                     | +1 | Tests are admittedly a bit brittle
  | tests/cargo-upgrade.rs                                | +1 | |
  | tests/test_manifest.rs                                | +1 | |
  | tests/utils.rs                                        | 0 | 17: Pointless clone, beware execute_* passes to exec.
  | .cargo_vcs_info.json                                  | +1 | |
  | .cargo-ok                                             | +1 | |
  | .editorconfig                                         | +1 | |
  | .gitignore                                            | +1 | |
  | .travis.yml                                           | 0 | rustfmt, clippy, travis-cargo, libcurl4-openssl-dev, libelf-dev, libdw-dev, coveralls
  | appveyor.yml                                          | +1 | |
  | bors.toml                                             | +1 | |
  | Cargo.toml                                            | 0 | Apache-2.0/MIT.  That's a lot of deps.
  | Cargo.toml.orig                                       | 0 | ^
  | Cargo.lock                                            | -1 | N/A, would nice to be able to --frozen(?) to install fully audited bins
  | CONTRIBUTING.md                                       | +1 | |
  | LICENSE                                               | 0 | Just MIT listed here, Cargo.toml references Apache-2.0/MIT.
  | README.md                                             | 0 | "Apache-2.0/MIT" could be clearer in a Readme.
  | rustfmt.toml                                          | 0 | Empty file
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | None, warn if introduced
  | miri      | N/A | Not bothering with
  | fs        | 0 | Manifest related, looks safe?
  | io        | 0 | Manifest related
  | docs      | +1 | |
  | tests     | +1 | |
  
  TIL
  ---
  * crates.io API string format
  * Refresher on format! placeholders
  ```rust
  format!(
      "{host}/api/v1/crates/{crate_name}",
      host = REGISTRY_HOST,
      crate_name = crate_name
  );
  ```
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
D6MPZtLfzOJ9UmqFFdtAR8YrSFnJ5985CfRZuhobXppiYPLWAJrqq9i1l--P_SHD6HeP3uQfJos_p1uz8iW8BA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-24T07:58:23.190730800-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: cargo-edit
  version: 0.4.0
  revision: 8f8028e90fb535f09d07751570cb607cd040a257
  digest: 454DZ0hOB4kIBQ3qj94hv89MN-vOBEf5IsR5hoTwTQk
package-diff-base:
  source: "https://crates.io"
  name: cargo-edit
  version: 0.3.3
  revision: ad517e456fe901d32c5033d586d9cd67b2a7a335
  digest: ZLLOIq-75CktDhfqmSWOZr2_F9rRdlyjxDgAM4CyNV0
review:
  thoroughness: low
  understanding: medium
  rating: neutral
comment: |
  Add/remove/update Cargo.toml dependencies from the command line.
  
  Pros:
  * Safe, probably works
  
  Cons:
  * Lots of code
  * Lots of dependencies, some of which I haven't fully audited.
  * License ambiguity (is this MIT or Apache-2.0/MIT licensed?)
  
  0.4.0
  =====
  | crev          |   |
  | ------------- |---|
  | thoroughness  | low
  | understanding | medium
  | rating        | neutral
  
  | Diff                                                  | Rating | Notes |
  | ----------------------------------------------------- | ------ | ----- |
  | Cargo.lock                                            | +1 | Added since 0.3.3, enabling frozen installs.  Approx [200 indirect deps](https://github.com/killercup/cargo-edit/blob/e131c92b8e1d5617fb9dca2e095ed7d7c91776ae/Cargo.lock#L1819).
  | Cargo.toml                                            | +1 | Version bumps
  | Cargo.toml.orig                                       | +1 | Version bumps
  | README.md                                             | +1 | Mentions new `--sort` option
  | appveyor.yml                                          | +1 | Disables gnu targets
  | src/bin/add/args.rs                                   | +1 | New `--sort` and `--offline` options
  | src/bin/add/main.rs                                   | +1 | |
  | src/bin/upgrade/main.rs                               | +1 | |
  | src/errors.rs                                         | +1 | |
  | src/fetch.rs                                          | +1 | |
  | src/lib.rs                                            | +1 | |
  | src/manifest.rs                                       | +1 | |
  | src/registry.rs                                       | +1 | |
  | tests/cargo-add.rs                                    | +1 | |
  | tests/fixtures/add/Cargo.toml.unsorted                | +1 | |
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
5JUoJX5qg9cYzNHEjOT30s9SFnM3aeQ0hOG4Hr_TwoLe2sNbcqcMbSPYA90yvWecMMg3LgzBen-ItUXGO3t0CA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-24T12:10:11.114960800-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: glsl-include
  version: 0.3.1
  revision: bc801e322b8a045d89ad5e0f21d7e87df6de803a
  digest: B8bO3XrnqFnPpvwmtlqJGV3eN-ldYqNheX1IpisFsNA
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |
  Handle basic #include s for GLSL.
  
  Pros:
  * 100% Safe/Sandboxed
  
  Cons:
  * No `#file` directives emitted
  * No callback option for `#include`, must pre-register all possible includes.
  * Repeat #include s simply ignored instead of interacting with preprocessor.
  
  0.3.1
  =====
  | crev          |   |
  | ------------- |---|
  | thoroughness  | medium
  | understanding | high
  | rating        | positive
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | src/error.rs                                  | +1 | Display for Error not double-clickable but provides good context.
  | src/lib.rs                                    |  0 | Doesn't disambiguate quote style, no callbacks so you must pre-define every includable file.
  | .cargo_vs_info.json                           | +1 | |
  | .cargo-ok                                     | +1 | |
  | Cargo.toml                                    | +1 | Apache 2.0 or MIT |
  | Cargo.toml.orig                               | +1 | regex, lazy_static, \[dev\] indoc, criterion
  | LICENSE-APACHE                                | +1 | |
  | LICENSE-MIT                                   | +1 | |
  | README.md                                     | +1 | Apache 2.0 or MIT, Contributions section
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | None, 100% safe
  | miri      |
  | fs        | +1 | None, instead you need to pre-`include(path, into_string)`.
  | io        | +1 | |
  | docs      | +1 | |
  | tests     | +1 | Not in .crate, but appears to be there/fine in original repository
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
xNFaCUobAsw-JWq3JBl1jUiMEuyijJI-5d_P8cTc4UfBFlo2ieT0GXSAIEwLVIFIr03m1GMTS8L64tw1f2hWDQ
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-25T14:41:28.389206600-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: cfg-if
  version: 0.1.10
  revision: 4484a6faf816ff8058088ad857b0c6bb2f4b02b2
  digest: 8G3k47B_-Vb15yCM466l9Xi4MZIALe6o2egoIhh3CMU
package-diff-base:
  source: "https://crates.io"
  name: cfg-if
  version: 0.1.9
  digest: gDrZ_GLiGjle6RhSqttA6kWgzJsLrkIOE_in6us34N0
review:
  thoroughness: low
  understanding: low
  rating: positive
comment: |
  Macro black magic... I trust the author and what I do understand looks good.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
AK1WTT1gqRKzY6eiS5Y8qrb76_meYTyq3Vwe4r_k-RLveglGCgDX7qCy9AosNnNphyPPI34y2mTloS0w2njBBA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-25T15:24:19.548200900-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: arrayvec
  version: 0.5.0
  revision: ea591bc2de5202790c600638c96efa392413001c
  digest: 3r8WHcSBZQlVWMztXEoti0owtKbDkZujK9--6_TNlgM
package-diff-base:
  source: "https://crates.io"
  name: arrayvec
  version: 0.4.11
  revision: 97925027920f7a284774f76a48c3126297d2fd13
  digest: KpEAh6TMg7CZJEN4AtElrISdVHCISCfvU4-w4eEeoFg
review:
  thoroughness: medium
  understanding: medium
  rating: neutral
comment: |
  Stack/value variable length arrays without heap fallback.
  
  Pros:
  * Maybe sound?
  * Better than what you'll write.
  
  Cons:
  * History of unsoundness (0.4.10 and earlier)
  * Disturbing amounts of unsafe
  
  | Diff                          | Rating | Notes |
  | ----------------------------- | ------ | ----- |
  | .cargo_vs_info.json           | +1 | |
  | .travis.yml                   | +1 | MSRV bumped to 1.36.0, features tweaked.
  | Cargo.toml                    | +1 | feature "serde-1" -> "serde", 2018 edition, drop cruft
  | Cargo.toml.orig               | +1 | |
  | README.rst                    | 0  | "(not yet released)" no longer accurate.
  | benches/extend.rs             | +1 | +black_box
  | build.rs                      | +1 | Dropped?
  | src/array.rs                  | +1 | Improved safety docs, although could use more explaination of what relies on the invariants.  () and bool indexing for 1/2-len arrays.
  | src/array_string.rs           | 0  | mem::zeroed -> MaybeUninitCopy::uninitialized.  Lots of Copy constraints, one transmute -> from_utf8_unchecked_mut (safer).
  | src/lib.rs                    | 0  | truncate now unsafe (but sound), new try_extend_from_slice is unsafe (but sound).  ArrayVec::extend ZST handling is obtuse, would be unsound in C++, but I believe sound in Rust, maybe?
  | src/maybe_uninit.rs           | +1 | |
  | src/maybe_uninit_nodrop.rs    | +1 | Removed
  | src/maybe_uninit_stable.rs    | +1 | Removed
  | src/range.rs                  | +1 | Removed
  | tests/serde.rs                | +1 | |
  | tests/tests.rs                | +1 | New test cases
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
S6cNAOkEEIZhkADOOSLaNLQ6VX2Qw6LCsAP9xPNmFmekNdPjlD2oNu_GFac-SFDYaHG-V2B5WmjVl1Xn8Ht-DA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-25T20:48:40.430389900-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: crossterm_cursor
  version: 0.3.1
  revision: f81fc52cba2ac87cf6c214296364a326f6b76f99
  digest: LjYPW2AwWt0C_ddTEvOxy-Na9zC2t-tYi046MZF4pw8
review:
  thoroughness: medium
  understanding: medium
  rating: negative
issues:
  - id: "https://github.com/crossterm-rs/crossterm-cursor/issues/3"
    severity: medium
    comment: Getting the cursor pos in ANSI mode can drop stdin data
  - id: "https://github.com/crossterm-rs/crossterm-cursor/issues/4"
    severity: high
    comment: "Winapi save/restore cursor invokes undefined behavior: `static mut SAVED_CURSOR_POS` not guarded"
  - id: "https://github.com/crossterm-rs/crossterm-cursor/issues/5"
    severity: high
    comment: "Unsound access of possibly invalid `HANDLE`s"
comment: |
  Pros:
  * Cross platform
  
  Cons:
  * Soundness issues
  * Data races
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | .github/CODEOWNERS                            | +1 | |
  | docs/CONTRIBUTING.md                          | +1 | |
  | src/cursor/ansi_cursor.rs                     | +1 | |
  | src/cursor/cursor.rs                          | +1 | |
  | src/cursor/winapi_cursor.rs                   | +1 | |
  | src/sys/unix.rs                               | -1 | \[[#3]\] 45: Getting the cursor pos can drop stdin data
  | [src/sys/winapi.rs](src/sys/winapi.rs)        | -1 | \[[#4], [#5]\] Multiple soundness issues
  | src/cursor.rs                                 | +1 | |
  | src/lib.rs                                    | +1 | |
  | src/sys.rs                                    | +1 | |
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | |
  | Cargo.toml                                    | +1 | MIT, dep: winapi
  | Cargo.toml.orig                               | +1 | MIT, dep: winapi
  | CHANGELOG.md                                  | +1 | |
  | LICENSE                                       | +1 | MIT
  | README.md                                     | +1 | |
  
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | -1 | Soundness issues
  | fs        | +1 | None
  | io        |  0 | Drops stdin
  | docs      | +1 | |
  | tests     | +1 | |
  
  src/sys/winapi.rs
  -----------------
  | Line  | What                          | Notes |
  | -----:| ----------------------------- | ----- |
  | 26    | unsafe mut SAVED_CURSOR_POS   | -1, \[[#4]\] Access to static mut is unguarded!  Undefined behavior!  Unsound!
  | 68    | fn Cursor::goto               | 0,  \[[#5]\] `unsafe { ... }` - would be valid if screen buffer handle was guaranteed valid
  | 86    | fn Cursor::set_visibility     | 0,  \[[#5]\] `unsafe { ... }` - would be valid if screen buffer handle was guaranteed valid
  | 101   | fn Cursor::restore_cursor_pos | -1, \[[#4]\] Access to static mut is unguarded!  Undefined behavior!  Unsound!
  | 114   | fn Cursor::save_cursor_pos    | -1, \[[#4]\] Access to static mut is unguarded!  Undefined behavior!  Unsound!
  | 121   | impl From<Handle> for Cusror  | ??, \[[#5]\] Not sure if Handle is guaranteed to be valid
  | 129   | impl From<HANDLE> for Cursor  | -1, \[[#5]\] no guarantee HANDLE is valid, unsound!
  
  [#3]:   https://github.com/crossterm-rs/crossterm-cursor/issues/3
  [#4]:   https://github.com/crossterm-rs/crossterm-cursor/issues/4
  [#5]:   https://github.com/crossterm-rs/crossterm-cursor/issues/5
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
BHi3mQqTwDrORDtnN0HXAlP1oDqqHifBr2SYhsnclUbq2i5MYHfSiP3FHj44-xmRZgnqRGhBFKyK1MGg729eBA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-25T21:50:43.932286400-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: crossterm_input
  version: 0.4.1
  revision: b594d9cf65859559aaf473e8dc60f251b8ec56d3
  digest: RjLbSSvWeIy-J_MJ9yIhK7_9fcdk7cWJQkgq70ytR3o
review:
  thoroughness: medium
  understanding: medium
  rating: negative
issues:
  - id: "https://github.com/crossterm-rs/crossterm/issues/245"
    severity: high
    comment: Unguarded access of static mut ORIG_MODE is unsound
comment: |
  Pros:
  * Handles console input
  
  Cons:
  * Soundness issues
  * Not browser compatible
  
  | File                                                      | Rating | Notes |
  | ---------------------------------------------             | ------ | ----- |
  | .github/CODEOWNERS                                        | +1 | |
  | docs/CONTRIBUTING.md                                      | +1 | |
  | src/input/input.rs                                        | +1 | |
  | [src/input/unix_input.rs](src/input/unix_input.rs)        | -1 | Parsing looks off, panicy internals
  | [src/input/windows_input.rs](src/input/windows_input.rs)  | -1 | Unsound \[[#245]\], very strange keyboard handling.
  | [src/sys/unix.rs](src/sys/unix.rs)                        |  0 | Mishandles `read == 0`? |
  | src/input.rs                                              | +1 | |
  | src/lib.rs                                                | +1 | |
  | src/sys.rs                                                | +1 | |
  | .cargo_vcs_info.json                                      | +1 | |
  | .cargo-ok                                                 | +1 | |
  | .gitignore                                                | +1 | |
  | travis.yml                                                | +1 | |
  | Cargo.toml                                                | +1 | MIT, winapi, libc, optional serde
  | Cargo.toml.orig                                           | +1 | MIT, winapi, libc, optional serde
  | CHANGELOG.md                                              | +1 | |
  | LICENSE                                                   | +1 | MIT
  | README.md                                                 | +1 | MIT
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | -1 | Unsound
  | fs        | +1 | `/dev/tty` access, but that's expected
  | io        | +1 | Sound... probably
  | docs      | +1 | |
  | tests     |  0 | Admittedly hard to unit test
  
  src/input/unix_input.rs
  -----------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 198   | fn SyncReader::next   | -1, Disambiguating ESC like this seems super sketchy/brittle.
  | 261   | fn parse_event        | -1, This is more like what ESC parsing *should* look like...?
  | 269   | fn parse_event        | -1, \\r\\n -> Enter Enter?  Seems wrong...
  | 312   | fn parse_csi          | -1, `.unwrap` Panic city
  | EOF   | | |
  
  src/input/windows_input.rs
  --------------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 42    | static mut ORIG_MODE                  | -1, More unsound access \[[#2]\]
  | 47    | WindowsInput::read_char               | +1, `unsafe { ... }` - willing to assume `_getwche` is sound.
  | 110   | fn WindowsInput::enable_mouse_mode    | -1, `unsafe { ... }` - unsound access of ORIG_MODE! \[[#245]\]
  | 116   | fn WindowsInput::disable_mouse_mode   | -1, `unsafe { ... }` - unsound access of ORIG_MODE! \[[#245]\]
  | 225   | fn read_single_event                  | 0, `unsafe { ... }` - `KeyEventRecord::from(*input.event.KeyEvent())` is *probably* sound/safe?
  | 228   | fn read_single_event                  | 0, `unsafe { ... }` - `MouseEvent::from(*input.event.MouseEvent())` is *probably* sound/safe?
  | 249   | fn read_input_events                  | 0, `unsafe { ... }` - `KeyEventRecord::from(*input.event.KeyEvent())` is *probably* sound/safe?
  | 256   | fn read_input_events                  | 0, `unsafe { ... }` - `MouseEvent::from(*input.event.MouseEvent())` is *probably* sound/safe?
  | 291   | fn parse_key_event_record             | 0, Several keys are dead, apparently
  | 303   | fn parse_key_event_record             | 0, Strange enumeration values for KeyEvent
  | 345   | fn parse_key_event_record             | -1, either VK_PRIOR \| VK_NEXT can be sanely simplified a lot or something is super fucky.
  | 354   | fn parse_key_event_record             | -1, either VK_END \| VK_HOME can be sanely simplified a lot or something is super fucky.
  | 367   | fn parse_key_event_record             | 0, `unsafe { ... }` assumes UnicodeChar is valid.  Private fn only called on win32 results... technically unsound of winapi only populated AsciiChar, but that would be super dumb.
  | EOF   | | |
  
  src/sys/unix.rs
  ---------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 19    | fn get_tty_fd                         | +1, `unsafe { ... }` looks sound
  | 45    | fn read_char_raw                      | 0, `read == 0` can probably happen when pipe broken? generates extra ' '?
  | EOF   | | |
  
  [#245]: https://github.com/crossterm-rs/crossterm/issues/245
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
qlV94pOogjH9EAREELmPzzIoXfh4D0dOQj9a9BAwwip5MZYoYNK6UB7NevoiER142wW_YG-mymGhYKj9a3HqBg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-26T11:10:33.332788700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: crossterm_cursor
  version: 0.3.1
  revision: f81fc52cba2ac87cf6c214296364a326f6b76f99
  digest: LjYPW2AwWt0C_ddTEvOxy-Na9zC2t-tYi046MZF4pw8
review:
  thoroughness: medium
  understanding: medium
  rating: negative
issues:
  - id: "https://github.com/crossterm-rs/crossterm/issues/199"
    severity: medium
    comment: Getting the cursor pos in ANSI mode can drop stdin data
  - id: "https://github.com/crossterm-rs/crossterm/issues/245"
    severity: high
    comment: "Winapi save/restore cursor invokes undefined behavior: `static mut SAVED_CURSOR_POS` not guarded"
  - id: "https://github.com/crossterm-rs/crossterm/issues/252"
    severity: high
    comment: "Unsound access of possibly invalid `HANDLE`s"
comment: |
  Pros:
  * Cross platform
  
  Cons:
  * Soundness issues
  * Data races
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | .github/CODEOWNERS                            | +1 | |
  | docs/CONTRIBUTING.md                          | +1 | |
  | src/cursor/ansi_cursor.rs                     | +1 | |
  | src/cursor/cursor.rs                          | +1 | |
  | src/cursor/winapi_cursor.rs                   | +1 | |
  | src/sys/unix.rs                               | -1 | \[[#199]\] 45: Getting the cursor pos can drop stdin data
  | [src/sys/winapi.rs](src/sys/winapi.rs)        | -1 | \[[#245], [#252]\] Multiple soundness issues
  | src/cursor.rs                                 | +1 | |
  | src/lib.rs                                    | +1 | |
  | src/sys.rs                                    | +1 | |
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | |
  | Cargo.toml                                    | +1 | MIT, dep: winapi
  | Cargo.toml.orig                               | +1 | MIT, dep: winapi
  | CHANGELOG.md                                  | +1 | |
  | LICENSE                                       | +1 | MIT
  | README.md                                     | +1 | |
  
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | -1 | Soundness issues
  | fs        | +1 | None
  | io        |  0 | Drops stdin
  | docs      | +1 | |
  | tests     | +1 | |
  
  src/sys/winapi.rs
  -----------------
  | Line  | What                          | Notes |
  | -----:| ----------------------------- | ----- |
  | 26    | unsafe mut SAVED_CURSOR_POS   | -1, \[[#245]\] Access to static mut is unguarded!  Undefined behavior!  Unsound!
  | 68    | fn Cursor::goto               | 0,  \[[#252]\] `unsafe { ... }` - would be valid if screen buffer handle was guaranteed valid
  | 86    | fn Cursor::set_visibility     | 0,  \[[#252]\] `unsafe { ... }` - would be valid if screen buffer handle was guaranteed valid
  | 101   | fn Cursor::restore_cursor_pos | -1, \[[#245]\] Access to static mut is unguarded!  Undefined behavior!  Unsound!
  | 114   | fn Cursor::save_cursor_pos    | -1, \[[#245]\] Access to static mut is unguarded!  Undefined behavior!  Unsound!
  | 121   | impl From<Handle> for Cusror  | ??, \[[#252]\] Not sure if Handle is guaranteed to be valid
  | 129   | impl From<HANDLE> for Cursor  | -1, \[[#252]\] no guarantee HANDLE is valid, unsound!
  
  [#199]: https://github.com/crossterm-rs/crossterm-cursor/issues/3
  [#245]: https://github.com/crossterm-rs/crossterm-cursor/issues/4
  [#252]: https://github.com/crossterm-rs/crossterm-cursor/issues/5
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
OP5Wbk4ws2snrkQosEedmfkYHfJvXL-za28Rse64x-J86uMYPc94sgQknSHrNBjTnn8FsTyoFSUhGdAFuwf_AQ
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-27T11:36:28.545128200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: froggy
  version: 0.4.4
  digest: 1F4tMzp0OBgUjt9T9kzOzXxo2YxSZQOKawnRcb9FJpM
review:
  thoroughness: none
  understanding: none
  rating: negative
issues:
  - id: "https://github.com/kvark/froggy/issues/72"
    severity: high
    comment: Unsound API due to debug-only bounds checks
comment: |
  Yet another unsound ECS.  Saw more 16-bit counters too.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
my7KCWVw-JvVlu28q2M1l1yrdfLZEDmqkHzQVK43BCO8HcXpnMjuxozgaA8FJKaCSsD_t88t85NjZ9CkAAeyBg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-28T15:12:54.568733700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: crossterm_screen
  version: 0.3.1
  revision: b8a610403cc4cd3b244f79e58d7bd6c8bfbb0eff
  digest: 4QC4OOzjTBcxaQnLi8L81a8_-WSChL53YddSHeTE_TU
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |
  Pros:
  * Abstracts platform specific bits
  * This part is safe code
  
  0.3.1
  =====
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | .github/CODEOWNERS                            | +1 | |
  | docs/CONTRIBUTING.md                          | +1 | |
  | src/screen/alternate.rs                       | +1 | |
  | src/sceren/raw.rs                             | +1 | |
  | src/sys/unix.rs                               | +1 | |
  | src/sys/winapi.rs                             | +1 | |
  | src/lib.rs                                    | +1 | |
  | src/screen.rs                                 | +1 | |
  | src/sys.rs                                    | +1 | |
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travvis.yml                                  | +1 | No MSRV
  | Cargo.toml                                    | +1 | MIT, winapi, crossterm_*
  | Cargo.toml.orig                               | +1 | MIT, winapi, crossterm_*
  | CHANGELOG.md                                  | +1 | |
  | LICENSE                                       | +1 | MIT
  | README.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | Not in this crate
  | fs        | +1 | Not in this crate
  | io        | +1 | Indirect / stdio
  | docs      | +1 | |
  | tests     | ?? | Not in this crate
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
3IgjMtG7a3WFE4Ax4ahK4JanNO6pnLNbgK7G_FxZZFZ6fFhvKwL9hOxaYObBa5tFE906O0IRUwuHRll971PmBw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-28T17:06:50.939552300-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: crossterm_style
  version: 0.5.1
  revision: bfc10e4efda544148871912cfdbc2bfda1c854df
  digest: ha8VFJHESP3VSJTIp1sPSERtu8BuRl3K6MyH0UM4ZUk
review:
  thoroughness: medium
  understanding: medium
  rating: negative
issues:
  - id: "https://github.com/crossterm-rs/crossterm/issues/245"
    severity: high
    comment: Unguarded access of static mut ORIGINAL_CONSOLE_COLOR is unsound
comment: |
  Pros:
  * Styling!
  
  Cons:
  * Poor win7 support
  * Unsound
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | .github/CODEOWNERS                            | +1 | |
  | docs/CONTRIBUTING.md                          | +1 | |
  | src/enums/attribute.rs                        | +1 | Verified codes vs https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters
  | src/enums/color.rs                            |  0 | FromStr for Color doesn't implement RGB parsing despite supporting RGB
  | src/enums/colored.rs                          | +1 | |
  | src/ansi_color.rs                             |  0 | Verified codes vs https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit .  Could've simplified match logic a bit.
  | src/color.rs                                  | -1 | Bugs ([#261], [#263])
  | src/enums.rs                                  | +1 | |
  | src/lib.rs                                    | +1 | |
  | src/macros.rs                                 | +1 | |
  | src/objectstyle.rs                            | +1 | |
  | src/styledobject.rs                           |  0 | Odd fg/bg naming style.  Also reset seems suboptimal if nesting styles?
  | src/traits.rs                                 | +1 | Not sure how wild I am about &str extension methods, but it works.
  | [src/winapi_color.rs](src/winapi_color.rs)    | -1 | Unsound static mut ORIGINAL_CONSOLE_COLOR if original_console_color ever called before init_console_color, which appears possible [#245]
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | No MSRV
  | Cargo.toml                                    | +1 | MIT, winapi, crossterm_winapi, serde
  | Cargo.toml.orig                               | +1 | MIT, winapi, crossterm_winapi, serde
  | CHANGELOG.md                                  | +1 | |
  | LICENSE                                       | +1 | MIT
  | README.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | -1 | [#245] unsound static mut
  | fs        | +1 | None
  | io        |  0 | Not sure what to blame for win7 styling failures
  | docs      | +1 | |
  | tests     | -1 | Few, hard anyways
  
  src/winapi_color.rs
  -------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 46    | fn WinApiColor::set_fg            | mask should be 0x00F0 instead of special casing BACKGROUND_INTENSITY
  | 78    | fn WinApiColor::set_bg            | mask should be 0x000F instead of special casing FOREGROUND_INTENSITY
  | 118   | fn color_value                    | Isn't Color::White and Color::Grey here swapped in terms of colors to be used?
  | 119   | fn color_value                    | Isn't Color::White and Color::Grey here swapped in terms of colors to be used?
  | 133   | fn color_value                    | 0 seems like a poor choice for fallback fg color, especially when it's also used for bg color
  | 153   | fn color_value                    | Isn't Color::White and Color::Grey here swapped in terms of colors to be used?
  | 154   | fn color_value                    | Isn't Color::White and Color::Grey here swapped in terms of colors to be used?
  | 133   | fn color_value                    | 0 seems like a mediocre choice for fallback bg color, especially when it's also used for fg color
  | 172   | fn color_value                    | Wait why the heck are we going to/from strings that makes 0 sense
  | 191   | static mut ORIGINAL_CONSOLE_COLOR | Unsound access if reset called before set_??, which appears possible [#245]
  
  [#245]: https://github.com/crossterm-rs/crossterm/issues/245
  [#261]: https://github.com/crossterm-rs/crossterm/issues/261
  [#262]: https://github.com/crossterm-rs/crossterm/issues/262
  [#263]: https://github.com/crossterm-rs/crossterm/issues/263
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
VSbwPOkKakIKea_zTmTNmBNgc7yXbOC_RTEHhdl2Iwc29hso4bjO8f4Hshooc6XinTOxizUBv7vKcD1sYagUDw
-----END CREV PACKAGE REVIEW-----

