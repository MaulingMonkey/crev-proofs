-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T18:17:13.727715100-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: midir
  version: 0.5.0
  digest: s5GKXD-YiSrHuHQcEayi1xVKldmjnjQj0MP73R1tknI
review:
  thoroughness: low
  understanding: low
  rating: negative
comment: |
  Good starting point, and my favorite Rust MIDI API so far, but likely unsound as stands.
  
  Pros:
    - Pure rust, no mucking with building building C/C++ libs like with portmidi
    - To be WASM/Browser compatible (PR made).
  
  Cons:
    - Likely unsound as currently stands (transmute_copy, type punning, sketchy memalloc crate use, haven't vetted thread safety properly, ...)
    - API clunky in spots (mix of known issues and easily fixed surface level stuff)
    - Needs more unit test coverage if possible (are there perhaps virtual MIDI devices for windows that could be added to CI...?)
  
  TODO:
    - rating: netural: Eliminate as much sketchy unsafe as possible.
    - rating: positive: Clean up API design a bit (async, saner member functions, deal with Send inconsistency, maybe make connecting not consume MidiInput s?)
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | examples/test_forward.rs                      | +1 | |
  | examples/test_play.rs                         | +1 | |
  | examples/test_reuse.rs                        | +1 | |
  | examples/test_sysex.rs                        | +1 | |
  | [src/backend/asla/mod.rs](src/backend/asla/mod.rs) | 0 | Some extra `unsafe`, use of uninit data possibly UB
  | src/backend/coremidi/mod.rs                   | 0 | Is Core MIDI thread safe?  (`unsafe impl Send for MidiOutputConnection`)
  | src/jack/mod.rs                               | -1 | Use of transmute_copy on Box is skeeeeeeetchy, uninitialized too :(
  | src/jack/wrappers.rs                          | -1 | Is JACK thread safe?  Ringbuffer::read is unsound!  Lots of unsafe but mostly for sane FFI.
  | src/winmm/handler.rs                          | 0 | unsafe for FFI, some pointer casts I haven't thoroughly vetted |
  | src/winmm/mod.rs                              | 0 | unsafe for FFI, uninitialized :(, sketchy deallocate API.  Is WinMM thread safe?  333: UB &mut violates aliasing?
  | src/backend/mod.rs                            | +1 | |
  | src/os/mod.rs                                 | +1 | |
  | src/os/unix.rs                                | +1 | |
  | src/common.rs                                 | 0 | Consumption of the MidiInput/MidiOutput clients/factories on connect seems a bit strange, especially after the ports refactor.
  | src/errors.rs                                 | +1 | |
  | src/lib.rs                                    | +1 | unsafe, but sound |
  | tests/virtual.rs                              | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | RCE: Downloads/installs jack from the internet |
  | appveyor.yml                                  | +1 | |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | LICENSE                                       | +1 | |
  | README.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | -1    | 99% sure something in here is unsound.  transmute_copy, type punning, use of memalloc crate.
  | fs        | +1    | N/A |
  | io        | 0     | libc... maybe safe? |
  | docs      | +1    | |
  | tests     | 0     | Good examples, but needs more automated unit/integration tests.  Admittedly hard given the lack of MIDI devices on CI servers... |
  
  src/backend/asla/mod.rs
  -----------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  21 | fn poll                             | +1
  |  81 | unsafe impl Send for EventEncoder   | Is ASLA thread safe?
  | 578 | unsafe in handle_input              | Construction of uninitialized vec, UB?
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
S8JnzOR-p0nQ7JNQGb5mtYnMMiIoo-a9GK9SYK5_MXoRPKAgSYhOCVKq7uLGCjJqdcqPh8as-bhXImZukSEEAA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T19:11:39.449625800-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: tiled
  version: 0.8.0
  digest: nbMitPCGxdlRA877oaoOuABkDx61j6YLOs_PJQDvyII
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  Do not use on User Generated Content!
      * Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
      * No obvious protection against zipbombs
      * A couple cases where bad input will panic, a potential DoS vector.
  
  For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)
  
  There's also a few missing features:
      * Wang Tiles
      * Terrains
      * "file" Custom Properties
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | assets/tiled_base64_external.tmx              | +1 | |
  | assets/tiled_base64_gzip.tmx                  | +1 | |
  | assets/tiled_base64_zlib.tmx                  | +1 | |
  | assets/tiled_base64.tmx                       | +1 | |
  | assets/tiled_csv.tmx                          | +1 | |
  | assets/tiled_image_layers.tmx                 | +1 | |
  | assets/tiled_xml.tmx                          | +1 | |
  | tilesheet.png                                 | +1 | Neat looking modern tileset... wonder what the source is!
  | tilesheet.tsx                                 | +1 | |
  | examples/main.rs                              | +1 | |
  | [src/lib.rs](src/lib.rs)                      | +1 | |
  | tests/lib.rs                                  | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | Sparse... no MSRV, beta/nightly, etc. |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | CONTRIBUTORS.md                               | +1 | |
  | README.md                                     | +1 | Dead link to tileset source
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | No unsafe
  | fs        | -1 | See Tileset::new_reference notes
  | io        | 0  | Brittle XML parsing, but OK for limited inputs.
  | docs      | -1 | Barely any.
  | tests     | +1 | |
  
  src/lib.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  28 | get_attrs!              | Eep
  |  53 | parse_tag!              | Mishandles nested tags... fortunately that's probably not necessary.
  |  97 | Colour::from_str        | British... and a possible source of panics.
  | 161 | PropertyValue::new      | No "file" support (see https://doc.mapeditor.org/en/stable/manual/custom-properties/#adding-properties)
  | 238 | Map::new                | My kingdom for some variable names!
  | 256 | Map::new                | Still using try!
  | 385 | Tileset::new_reference  | Possible path traversal attacks, limits ability to inject your own virtual filesystem.
  | 860 | decode_csv              | I've heard decoding arbitrary CSV is way more complicated than this... but this probably works for tile data as used in tmx files.
  | 883 | convert_to_u32          | Kinda want this to be based on iterators to avoid an extra alloc...
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
JQQhh3H5U8EH4kQly3q87dB-cRJEshhtfjUWEM1WViKNBcpH5Mx6uD82Iuesa_A6WE07FQzIPeoxQPYjgRG1DA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T19:12:29.704124700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: tiled
  version: 0.8.0
  digest: nbMitPCGxdlRA877oaoOuABkDx61j6YLOs_PJQDvyII
review:
  thoroughness: medium
  understanding: medium
  rating: negative
comment: |
  Do not use on User Generated Content!
      * Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
      * No obvious protection against zipbombs
      * A couple cases where bad input will panic, a potential DoS vector.
  
  For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)
  
  There's also a few missing features:
      * Wang Tiles
      * Terrains
      * "file" Custom Properties
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | assets/tiled_base64_external.tmx              | +1 | |
  | assets/tiled_base64_gzip.tmx                  | +1 | |
  | assets/tiled_base64_zlib.tmx                  | +1 | |
  | assets/tiled_base64.tmx                       | +1 | |
  | assets/tiled_csv.tmx                          | +1 | |
  | assets/tiled_image_layers.tmx                 | +1 | |
  | assets/tiled_xml.tmx                          | +1 | |
  | tilesheet.png                                 | +1 | Neat looking modern tileset... wonder what the source is!
  | tilesheet.tsx                                 | +1 | |
  | examples/main.rs                              | +1 | |
  | [src/lib.rs](src/lib.rs)                      | +1 | |
  | tests/lib.rs                                  | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | Sparse... no MSRV, beta/nightly, etc. |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | CONTRIBUTORS.md                               | +1 | |
  | README.md                                     | +1 | Dead link to tileset source
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | No unsafe
  | fs        | -1 | See Tileset::new_reference notes
  | io        | 0  | Brittle XML parsing, but OK for limited inputs.
  | docs      | -1 | Barely any.
  | tests     | +1 | |
  
  src/lib.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  28 | get_attrs!              | Eep
  |  53 | parse_tag!              | Mishandles nested tags... fortunately that's probably not necessary.
  |  97 | Colour::from_str        | British... and a possible source of panics.
  | 161 | PropertyValue::new      | No "file" support (see https://doc.mapeditor.org/en/stable/manual/custom-properties/#adding-properties)
  | 238 | Map::new                | My kingdom for some variable names!
  | 256 | Map::new                | Still using try!
  | 385 | Tileset::new_reference  | Possible path traversal attacks, limits ability to inject your own virtual filesystem.
  | 860 | decode_csv              | I've heard decoding arbitrary CSV is way more complicated than this... but this probably works for tile data as used in tmx files.
  | 883 | convert_to_u32          | Kinda want this to be based on iterators to avoid an extra alloc...
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
UPihZNtZegvbMZIxrn4gnusI2LjjAw5iwqLNh10vSj7fEPYtUUBA8cXH47mCajH7E0wFYThxNOEBH0978ZFyBw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T21:25:35.459217300-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: tiled-json-rs
  version: 0.2.6
  revision: 7969464b0bd04471e920d9b5ff825efbf835f08f
  digest: PQ-E8KGi2DKLrvyTGC75JETHI8pShfeB7LO4rmXi7rw
review:
  thoroughness: medium
  understanding: medium
  rating: negative
comment: |
  Do not use on User Generated Content!
  * Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
  * A couple cases where bad input will panic, a potential DoS vector.
  
  For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)
  
  Pros:
  * JSON is lighter weight than XML
  * Fuller format support vs tiled
  
  Cons:
  * No compression
  * API is just as raw in many ways
  * Requires exporting.
  * Slightly unusual license for rust projects (MPL, instead of MIT/Apache 2)
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | [src/layer.rs](src/layer.rs)                  | 0 | Raw structures
  | src/lib.rs                                    | +1 | |
  | src/map.rs                                    | +1 | |
  | src/object.rs                                 | +1 | |
  | [src/parsers.rs](src/parsers.rs)              | 0 | No decompression support, can panic (not suitable for user generated content)
  | [src/tile_set.rs](src/tile_set.rs)            | -1 | Not suitable for user generated content!
  | src/utils.rs                                  | +1 | |
  | src/wangs.rs                                  | +1 | |
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | LICENSE                                       | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | None
  | fs        | -1 | Path traversal
  | io        | +1 | serde
  | docs      | +1 | |
  | tests     | -1 | Not in crate, maybe in repository
  
  src/layer.rs
  ------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  17   | TileLayer::chunks | Option seems kinda pointless, also this API is meh
  | 129   | DrawOrder | There are at least 4 draw modes now for layers - although there's also Map / RenderOrder.... blehrg (top->down left->right, top->down right->left, ...)
  
  src/parsers.rs
  --------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 129   | parse_color blue | Despite earlier padding, no guarantee this is valid / may panic (both for overflowing and for not being a unicode boundary.)
  
  src/tile_set.rs
  ---------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 121   | Deserialize for TileSet | File::open - path traversal attacks, lack of virtual filesystem support, etc.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
raGWyoOiRbsdX4c-qsXMmwq-ndTQadVUKykxQbprgZrEa2hamkgDTCMR-1yny44oX3I_3O6UlzFLwy2jWWkCCQ
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T10:42:32.035056700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: lazy_static
  version: 1.4.0
  revision: 421669662b35fcb455f2902daed2e20bbbba79b6
  digest: 95REZRx8ItDao_V9l7sOsW9-OB6Jc5C7azc9mNC07fI
package-diff-base:
  source: "https://crates.io"
  name: lazy_static
  version: 1.3.0
  revision: 03f62910a94886987cdb686c7509bbdc846481e3
  digest: 21bjQkc4fD-Kvjb0xv1fN7M4oaembbxoEDirmvOQwbg
review:
  thoroughness: high
  understanding: high
  rating: positive
comment: |
  1.4.0:  Read diff, looks fine.
  1.3.0:  Read all of src, skimmed all of tests.  core_lazy.rs looks a little odd, but is 100% safe code - any issues would be in it's core dependency, spin.  inline_lazy.rs contains unsafe blocks... look safe, but downgrades rating to merely positive.  lib.rs is just safe macros.  Tests all pass.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
bW-yCt94w53nltaweNxVLUbUSU6ad8w5h7y_7EbEtdf4TJI7WE9tIitsychEig-ocoOQlHiRj74flYQiELoXAw
-----END CREV PACKAGE REVIEW-----

