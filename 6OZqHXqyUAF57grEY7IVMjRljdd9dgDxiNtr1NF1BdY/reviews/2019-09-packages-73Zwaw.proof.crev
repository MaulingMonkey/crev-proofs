-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T18:17:13.727715100-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: midir
  version: 0.5.0
  digest: s5GKXD-YiSrHuHQcEayi1xVKldmjnjQj0MP73R1tknI
review:
  thoroughness: low
  understanding: low
  rating: negative
comment: |
  Good starting point, and my favorite Rust MIDI API so far, but likely unsound as stands.
  
  Pros:
    - Pure rust, no mucking with building building C/C++ libs like with portmidi
    - To be WASM/Browser compatible (PR made).
  
  Cons:
    - Likely unsound as currently stands (transmute_copy, type punning, sketchy memalloc crate use, haven't vetted thread safety properly, ...)
    - API clunky in spots (mix of known issues and easily fixed surface level stuff)
    - Needs more unit test coverage if possible (are there perhaps virtual MIDI devices for windows that could be added to CI...?)
  
  TODO:
    - rating: netural: Eliminate as much sketchy unsafe as possible.
    - rating: positive: Clean up API design a bit (async, saner member functions, deal with Send inconsistency, maybe make connecting not consume MidiInput s?)
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | examples/test_forward.rs                      | +1 | |
  | examples/test_play.rs                         | +1 | |
  | examples/test_reuse.rs                        | +1 | |
  | examples/test_sysex.rs                        | +1 | |
  | [src/backend/asla/mod.rs](src/backend/asla/mod.rs) | 0 | Some extra `unsafe`, use of uninit data possibly UB
  | src/backend/coremidi/mod.rs                   | 0 | Is Core MIDI thread safe?  (`unsafe impl Send for MidiOutputConnection`)
  | src/jack/mod.rs                               | -1 | Use of transmute_copy on Box is skeeeeeeetchy, uninitialized too :(
  | src/jack/wrappers.rs                          | -1 | Is JACK thread safe?  Ringbuffer::read is unsound!  Lots of unsafe but mostly for sane FFI.
  | src/winmm/handler.rs                          | 0 | unsafe for FFI, some pointer casts I haven't thoroughly vetted |
  | src/winmm/mod.rs                              | 0 | unsafe for FFI, uninitialized :(, sketchy deallocate API.  Is WinMM thread safe?  333: UB &mut violates aliasing?
  | src/backend/mod.rs                            | +1 | |
  | src/os/mod.rs                                 | +1 | |
  | src/os/unix.rs                                | +1 | |
  | src/common.rs                                 | 0 | Consumption of the MidiInput/MidiOutput clients/factories on connect seems a bit strange, especially after the ports refactor.
  | src/errors.rs                                 | +1 | |
  | src/lib.rs                                    | +1 | unsafe, but sound |
  | tests/virtual.rs                              | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | RCE: Downloads/installs jack from the internet |
  | appveyor.yml                                  | +1 | |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | LICENSE                                       | +1 | |
  | README.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | -1    | 99% sure something in here is unsound.  transmute_copy, type punning, use of memalloc crate.
  | fs        | +1    | N/A |
  | io        | 0     | libc... maybe safe? |
  | docs      | +1    | |
  | tests     | 0     | Good examples, but needs more automated unit/integration tests.  Admittedly hard given the lack of MIDI devices on CI servers... |
  
  src/backend/asla/mod.rs
  -----------------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  21 | fn poll                             | +1
  |  81 | unsafe impl Send for EventEncoder   | Is ASLA thread safe?
  | 578 | unsafe in handle_input              | Construction of uninitialized vec, UB?
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
S8JnzOR-p0nQ7JNQGb5mtYnMMiIoo-a9GK9SYK5_MXoRPKAgSYhOCVKq7uLGCjJqdcqPh8as-bhXImZukSEEAA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T19:11:39.449625800-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: tiled
  version: 0.8.0
  digest: nbMitPCGxdlRA877oaoOuABkDx61j6YLOs_PJQDvyII
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  Do not use on User Generated Content!
      * Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
      * No obvious protection against zipbombs
      * A couple cases where bad input will panic, a potential DoS vector.
  
  For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)
  
  There's also a few missing features:
      * Wang Tiles
      * Terrains
      * "file" Custom Properties
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | assets/tiled_base64_external.tmx              | +1 | |
  | assets/tiled_base64_gzip.tmx                  | +1 | |
  | assets/tiled_base64_zlib.tmx                  | +1 | |
  | assets/tiled_base64.tmx                       | +1 | |
  | assets/tiled_csv.tmx                          | +1 | |
  | assets/tiled_image_layers.tmx                 | +1 | |
  | assets/tiled_xml.tmx                          | +1 | |
  | tilesheet.png                                 | +1 | Neat looking modern tileset... wonder what the source is!
  | tilesheet.tsx                                 | +1 | |
  | examples/main.rs                              | +1 | |
  | [src/lib.rs](src/lib.rs)                      | +1 | |
  | tests/lib.rs                                  | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | Sparse... no MSRV, beta/nightly, etc. |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | CONTRIBUTORS.md                               | +1 | |
  | README.md                                     | +1 | Dead link to tileset source
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | No unsafe
  | fs        | -1 | See Tileset::new_reference notes
  | io        | 0  | Brittle XML parsing, but OK for limited inputs.
  | docs      | -1 | Barely any.
  | tests     | +1 | |
  
  src/lib.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  28 | get_attrs!              | Eep
  |  53 | parse_tag!              | Mishandles nested tags... fortunately that's probably not necessary.
  |  97 | Colour::from_str        | British... and a possible source of panics.
  | 161 | PropertyValue::new      | No "file" support (see https://doc.mapeditor.org/en/stable/manual/custom-properties/#adding-properties)
  | 238 | Map::new                | My kingdom for some variable names!
  | 256 | Map::new                | Still using try!
  | 385 | Tileset::new_reference  | Possible path traversal attacks, limits ability to inject your own virtual filesystem.
  | 860 | decode_csv              | I've heard decoding arbitrary CSV is way more complicated than this... but this probably works for tile data as used in tmx files.
  | 883 | convert_to_u32          | Kinda want this to be based on iterators to avoid an extra alloc...
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
JQQhh3H5U8EH4kQly3q87dB-cRJEshhtfjUWEM1WViKNBcpH5Mx6uD82Iuesa_A6WE07FQzIPeoxQPYjgRG1DA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T19:12:29.704124700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: tiled
  version: 0.8.0
  digest: nbMitPCGxdlRA877oaoOuABkDx61j6YLOs_PJQDvyII
review:
  thoroughness: medium
  understanding: medium
  rating: negative
comment: |
  Do not use on User Generated Content!
      * Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
      * No obvious protection against zipbombs
      * A couple cases where bad input will panic, a potential DoS vector.
  
  For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)
  
  There's also a few missing features:
      * Wang Tiles
      * Terrains
      * "file" Custom Properties
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | assets/tiled_base64_external.tmx              | +1 | |
  | assets/tiled_base64_gzip.tmx                  | +1 | |
  | assets/tiled_base64_zlib.tmx                  | +1 | |
  | assets/tiled_base64.tmx                       | +1 | |
  | assets/tiled_csv.tmx                          | +1 | |
  | assets/tiled_image_layers.tmx                 | +1 | |
  | assets/tiled_xml.tmx                          | +1 | |
  | tilesheet.png                                 | +1 | Neat looking modern tileset... wonder what the source is!
  | tilesheet.tsx                                 | +1 | |
  | examples/main.rs                              | +1 | |
  | [src/lib.rs](src/lib.rs)                      | +1 | |
  | tests/lib.rs                                  | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | .travis.yml                                   | +1 | Sparse... no MSRV, beta/nightly, etc. |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | CONTRIBUTORS.md                               | +1 | |
  | README.md                                     | +1 | Dead link to tileset source
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | No unsafe
  | fs        | -1 | See Tileset::new_reference notes
  | io        | 0  | Brittle XML parsing, but OK for limited inputs.
  | docs      | -1 | Barely any.
  | tests     | +1 | |
  
  src/lib.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  28 | get_attrs!              | Eep
  |  53 | parse_tag!              | Mishandles nested tags... fortunately that's probably not necessary.
  |  97 | Colour::from_str        | British... and a possible source of panics.
  | 161 | PropertyValue::new      | No "file" support (see https://doc.mapeditor.org/en/stable/manual/custom-properties/#adding-properties)
  | 238 | Map::new                | My kingdom for some variable names!
  | 256 | Map::new                | Still using try!
  | 385 | Tileset::new_reference  | Possible path traversal attacks, limits ability to inject your own virtual filesystem.
  | 860 | decode_csv              | I've heard decoding arbitrary CSV is way more complicated than this... but this probably works for tile data as used in tmx files.
  | 883 | convert_to_u32          | Kinda want this to be based on iterators to avoid an extra alloc...
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
UPihZNtZegvbMZIxrn4gnusI2LjjAw5iwqLNh10vSj7fEPYtUUBA8cXH47mCajH7E0wFYThxNOEBH0978ZFyBw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-02T21:25:35.459217300-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: tiled-json-rs
  version: 0.2.6
  revision: 7969464b0bd04471e920d9b5ff825efbf835f08f
  digest: PQ-E8KGi2DKLrvyTGC75JETHI8pShfeB7LO4rmXi7rw
review:
  thoroughness: medium
  understanding: medium
  rating: negative
comment: |
  Do not use on User Generated Content!
  * Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
  * A couple cases where bad input will panic, a potential DoS vector.
  
  For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)
  
  Pros:
  * JSON is lighter weight than XML
  * Fuller format support vs tiled
  
  Cons:
  * No compression
  * API is just as raw in many ways
  * Requires exporting.
  * Slightly unusual license for rust projects (MPL, instead of MIT/Apache 2)
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | [src/layer.rs](src/layer.rs)                  | 0 | Raw structures
  | src/lib.rs                                    | +1 | |
  | src/map.rs                                    | +1 | |
  | src/object.rs                                 | +1 | |
  | [src/parsers.rs](src/parsers.rs)              | 0 | No decompression support, can panic (not suitable for user generated content)
  | [src/tile_set.rs](src/tile_set.rs)            | -1 | Not suitable for user generated content!
  | src/utils.rs                                  | +1 | |
  | src/wangs.rs                                  | +1 | |
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | Cargo.toml                                    | +1 | |
  | Cargo.toml.orig                               | +1 | |
  | LICENSE                                       | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1 | None
  | fs        | -1 | Path traversal
  | io        | +1 | serde
  | docs      | +1 | |
  | tests     | -1 | Not in crate, maybe in repository
  
  src/layer.rs
  ------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  |  17   | TileLayer::chunks | Option seems kinda pointless, also this API is meh
  | 129   | DrawOrder | There are at least 4 draw modes now for layers - although there's also Map / RenderOrder.... blehrg (top->down left->right, top->down right->left, ...)
  
  src/parsers.rs
  --------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 129   | parse_color blue | Despite earlier padding, no guarantee this is valid / may panic (both for overflowing and for not being a unicode boundary.)
  
  src/tile_set.rs
  ---------------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 121   | Deserialize for TileSet | File::open - path traversal attacks, lack of virtual filesystem support, etc.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
raGWyoOiRbsdX4c-qsXMmwq-ndTQadVUKykxQbprgZrEa2hamkgDTCMR-1yny44oX3I_3O6UlzFLwy2jWWkCCQ
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T10:42:32.035056700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: lazy_static
  version: 1.4.0
  revision: 421669662b35fcb455f2902daed2e20bbbba79b6
  digest: 95REZRx8ItDao_V9l7sOsW9-OB6Jc5C7azc9mNC07fI
package-diff-base:
  source: "https://crates.io"
  name: lazy_static
  version: 1.3.0
  revision: 03f62910a94886987cdb686c7509bbdc846481e3
  digest: 21bjQkc4fD-Kvjb0xv1fN7M4oaembbxoEDirmvOQwbg
review:
  thoroughness: high
  understanding: high
  rating: positive
comment: |
  1.4.0:  Read diff, looks fine.
  1.3.0:  Read all of src, skimmed all of tests.  core_lazy.rs looks a little odd, but is 100% safe code - any issues would be in it's core dependency, spin.  inline_lazy.rs contains unsafe blocks... look safe, but downgrades rating to merely positive.  lib.rs is just safe macros.  Tests all pass.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
bW-yCt94w53nltaweNxVLUbUSU6ad8w5h7y_7EbEtdf4TJI7WE9tIitsychEig-ocoOQlHiRj74flYQiELoXAw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:21:11.323775200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: warmy
  version: 0.13.0
  revision: 936c095d3ef1f581897bea7113a6415afb453311
  digest: qtom3iCAxYEF054ycEN79jtrYqfibZMAaLQ8msqc0SY
package-diff-base:
  source: "https://crates.io"
  name: warmy
  version: 0.12.0
  revision: a1e2e8162f8bb9061b58cd66cfc0aaefebd0cbc7
  digest: WrTgwvpdKO6GHtzIY3FcEmEq4Ea_8UFRGAEyBkVvVl4
review:
  thoroughness: low
  understanding: low
  rating: positive
comment: |
  0.13.0:  RON support, lockfile/CI changes.  LGTM.
  0.12.0:  Looks good to me.  Some of the finer points are a little obtuse to me (RE: reloads, dependencies, an the inspect trait.)
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | examples/toml/hello.html                      | +1    | |
  | examples/toml/main.rs                         | +1    | |
  | src/context.rs                                | +1    | |
  | src/json.rs                                   | +1    | |
  | [src/key.rs](src/key.rs)                      | +1    | |
  | src/lib.rs                                    | +1    | |
  | src/load.rs                                   | +1    | |
  | src/res.rs                                    | +1    | |
  | src/toml.rs                                   | +1    | |
  | tests/lib.rs                                  | +1    | |
  | .cargo_vcs_info.json                          | +1    | |
  | .cargo-ok                                     | +1    | |
  | .gitignore                                    | +1    | |
  | .travis.yml                                   | +1    | |
  | Cargo.toml                                    | +1    | |
  | Cargo.toml.orig                               | +1    | |
  | CHANGELOG.md                                  | +1    | |
  | LICENSE                                       | +1    | |
  | README.md                                     | +1    | |
  | rustfmt.toml                                  | +1    | Ew 2 space indents gross
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1    | No unsafe code
  | fs        | +1    | Nothing fishy
  | io        | +1    | Nothing fishy
  | docs      | +1    | Good god there are a lot.  Needs more concrete motivating examples though.
  | tests     | +1    | |
  
  src/key.rs
  ----------
  | Line  | What  | Notes |
  | -----:| ----- | ----- |
  | 12    | Key   | `'static` lifetime... minor leak? but I probably don't care?
  
  TIL
  ---
  cargo-sync-readme
  cargo-outdated
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
Vq7md231i9xbc2Fuxu_iH35WOQKlHohL-mtOKc1v2E_ZLkxjtm6R7N3jyqIjw4zy_3t0lf_8QySAQtenRXteDA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:29:55.770920200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: require_unsafe_in_body
  version: 0.2.0-alpha
  revision: 23c74e9e01621e331851d2f810150b9241ef94a7
  digest: oUa3rwD3LvMZt2KMy7p9XBY_-Jf5z-JRbg-gsHYw30o
review:
  thoroughness: medium
  understanding: low
  rating: positive
comment: |
  0.2.0-alpha:  Significant refactoring, adding support for generics.  LGTM?
  0.1.2:  Seems solid, although my syn-fu is weak, limiting my ability to review this.
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | src/docs/require_unsafe_in_bodies.md          | +1 | |
  | src/docs/require_unsafe_in_body.md            | +1 | |
  | src/utils/macros.rs                           | +1 | |
  | src/utils/mod.rs                              | +1 | |
  | src/lib.rs                                    | +1 | understanding: low - I'm barely following along
  | src/tests.rs                                  | +1 | |
  | tests/ui/body_on_method_2.rs                  | +1 | |
  | tests/ui/body_on_method_2.stderr              | +1 | |
  | tests/ui/body_on_method.rs                    | +1 | |
  | tests/ui/body_on_method.stderr                | +1 | |
  | tests/ui/readme.rs                            | +1 | |
  | tests/ui/readme.stderr                        | +1 | |
  | tests/impl_method_2.rs                        | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/impl_method.rs                          | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/trait_default_method.rs                 | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/ui.rs                                   | +1 | The cfgs on unit-tests look the wrong way around?
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | Cargo.toml                                    | +1 | MIT
  | Cargo.toml.orig                               | +1 | MIT
  | LICENSE                                       | +1 | MIT
  | Makefile                                      | +1 | Unixy
  | README.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1    | Wrangles unsafe but doesn't actually use it itself
  | fs        | +1    | None
  | io        | +1    | Modifies codegen through syn
  | docs      | +1    | |
  | tests     | +1    | |
  
  TIL
  ---
  ```rs
  let Struct { ref member, ref mut member2, .. } = to_destructure;
  ```
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
8FN3bd_sDtrrpXXA9gGdXe5gPSYXDfyqA-UsAN7ef22COyrKdJjD7qPy-Z9XnH8yVT87cXnbhTXXbE584g3WBw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:34:14.673686500-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: require_unsafe_in_body
  version: 0.2.0
  revision: 0920d4ef6482ceaa2807a17372be3221053b2129
  digest: rkvU8QhHqYup1ET1RLgkQENb1l8bfABNZXIG0TqwpHI
package-diff-base:
  source: "https://crates.io"
  name: require_unsafe_in_body
  version: 0.2.0-alpha
  revision: 23c74e9e01621e331851d2f810150b9241ef94a7
  digest: oUa3rwD3LvMZt2KMy7p9XBY_-Jf5z-JRbg-gsHYw30o
review:
  thoroughness: low
  understanding: low
  rating: positive
comment: |
  0.2.0:  More refactoring surrounding generics.
  0.2.0-alpha:  Significant refactoring, adding support for generics.  LGTM?
  0.1.2:  Seems solid, although my syn-fu is weak, limiting my ability to review this.
  
  Detail
  ======
  
  | File                                          | Rating | Notes |
  | --------------------------------------------- | ------ | ----- |
  | src/docs/require_unsafe_in_bodies.md          | +1 | |
  | src/docs/require_unsafe_in_body.md            | +1 | |
  | src/utils/macros.rs                           | +1 | |
  | src/utils/mod.rs                              | +1 | |
  | src/lib.rs                                    | +1 | understanding: low - I'm barely following along
  | src/tests.rs                                  | +1 | |
  | tests/ui/body_on_method_2.rs                  | +1 | |
  | tests/ui/body_on_method_2.stderr              | +1 | |
  | tests/ui/body_on_method.rs                    | +1 | |
  | tests/ui/body_on_method.stderr                | +1 | |
  | tests/ui/readme.rs                            | +1 | |
  | tests/ui/readme.stderr                        | +1 | |
  | tests/impl_method_2.rs                        | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/impl_method.rs                          | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/trait_default_method.rs                 | +1 | The cfgs on unit-tests look the wrong way around?
  | tests/ui.rs                                   | +1 | The cfgs on unit-tests look the wrong way around?
  | .cargo_vcs_info.json                          | +1 | |
  | .cargo-ok                                     | +1 | |
  | .gitignore                                    | +1 | |
  | Cargo.toml                                    | +1 | MIT
  | Cargo.toml.orig                               | +1 | MIT
  | LICENSE                                       | +1 | MIT
  | Makefile                                      | +1 | Unixy
  | README.md                                     | +1 | |
  
  | Other     | Rating | Notes |
  | --------- | ------ | ----- |
  | unsafe    | +1    | Wrangles unsafe but doesn't actually use it itself
  | fs        | +1    | None
  | io        | +1    | Modifies codegen through syn
  | docs      | +1    | |
  | tests     | +1    | |
  
  TIL
  ---
  ```rs
  let Struct { ref member, ref mut member2, .. } = to_destructure;
  ```
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
Ca-__HPuokuxpTXU408SFVoa9ujcipGBmMwyOesYuUisdN2IQinHUocznzFP2OejmjjqXFFqDbZDy0g90xYnBw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:36:01.272632600-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.12
  revision: c7153e4cf9b1694c49385057633ab5ad6b602b38
  digest: WqfZMcbmdwcOg6mLIp2wyihDrMINHBXIxun-uQfUCfc
package-diff-base:
  source: "https://crates.io"
  name: cargo-dinghy
  version: 0.4.11
  revision: 4b1fed4d7a2a996c3be5e741e8768e9bb67051bd
  digest: Rd_BtsF4rMcS-YS9C_uuIUJ_6g5ihmmIw9zqOZ2atnQ
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |
  0.4.12: Trivial version bumps.
  0.4.11: Nice and solid looking code.  100% safe code.
  
  Reviewed:
      src\cli.rs:         +1
      src\main.rs:        +1
          151 run_lldb
              Nonterminating loops are problematic, but I think the side effects here should make this work OK?
              (see https://github.com/rust-lang/rust/issues/28728 )
      Cargo.toml:         +1
      Cargo.toml.orig:    +1
          13  readme path references unpackaged readme
  
  TIL:
      Using traits to extend clap::App so flags can be reused per-subcommand is interesting.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
pMgYPQqb8riFgALG1EDNIE2bdpbUZSGRZE_6_FC99609xFDN6tK4_wAARjsWnPqGKTKS1ZFf1o1ghftki0rEDA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:37:00.391936900-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.12
  revision: 40a232b03d6c5afef18f1101b9a6842d59959726
  digest: DF1MThbK5NP1IwEp0q6MKfIcZxccQSvXdw4ibsinQfc
package-diff-base:
  source: "https://crates.io"
  name: dinghy-lib
  version: 0.4.11
  revision: ac155d160b1d6ed4031d3944dc076f6e5cec508f
  digest: qdzqoM1oVvQiujz5Ym13399xTf_9neZhAUD4tt_UIfY
review:
  thoroughness: low
  understanding: low
  rating: neutral
comment: |
  0.4.12:  Trivial version bumps
  0.4.11
  thoroughness: low - mostly due to iOS FFI, shell stuff not being super thorough, and review fatigue causing my eyes to glaze over in places.
  understanding: low - lots of shell/path stuff that I don't know well enough to verify
  rating: neutral - see concerns bellow.
  
  
  
  Concerns
  ========
  - Looks like lots of stuff might not work on windows... although there *is* windows-specific code, so maybe?
  - Lots of unimplemented!()
  - iOS support is chock full of unsafe { ... } for FFI.  I haven't verified the FFI signatures.
  - iOS support also uses unsafe { ... } for several objective C casts.  Needs some sanity checked utility functions.
  - iOS support has some potential UB during panics due to unwinding over FFI boundaries.
  - Implements some code signing stuff for iOS.  Necessary, and just your local certs, but I haven't fully reasoned through what security impacts if any that has.
  - Few unit tests visible in the crate itself (maybe they're separate and unpackaged?)
  - Sandboxing concerns
      - Remotes into other devices, including over ssh.
      - Frequent use of shell commands could lead to build server RCEs given malicious project metadata
      - Malicious projects will just use a build.rs file though, front door is open so to speak.
  
  
  
  Details
  =======
  src\android\device.rs           +1
      14  Odd place to install...
  src\android\mod.rs              +1
      155 Could also check android studio SDK install path
  
  src\host\device.rs              +1
  src\host\mod.rs                 +1
  src\host\platform.rs            +1
  
  src\ios\device.rs               0
      50  Not sure if the underlying iOS APIs are thread safe, but this seems acceptable.
      277 unsafe { ... } for FFI.  Looks generally safe except for scary mem::transmute(kCFBooleanTrue), but even that may be right.
      303 unsafe { ... } for FFI.  Looks safe to me.
      367 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      419 unsafe { ... } for FFI.  Looks safe to me.  
      440 unsafe { ... } for FFI.  Looks safe to me.
      454 unsafe { ... } for FFI.  Looks safe to me.
      487 unsafe { ... } for FFI.  Looks safe to me, but needlessly large.
      519 This thread just eats errors.
      683 unsafe { ... } for FFI.  Transmute... probably safe.
      690 unsafe { ... } for FFI.  Looks safe to me.
      691 unsafe { ... } for FFI.  Scary Core Foundation related transmutes... probably OK, but some utilities to sanity check these conversions in debug would be nice.
      696 unsafe { ... } for FFI.  Another scary-but-probably-safe transmute.
  src\ios\helpers.py              +1
  src\ios\mobiledevice_sys.rs     0
      FFI, not perfectly verified since I don't have an OS X machine to check the headers out on.
      Ref: https://github.com/PanayotCankov/device.io/blob/master/idb/MobileDevice.h
      Various minor const differences, a few functions missing in ref, a few likely improved definitions in places.
      33  am_device_notification_callback_info has    "extra" field vs reference, "subscription".  iOS internal struct?
  src\ios\mod.rs                  0
      43  unsafe { ... } for FFI.  Looks safe to me.
      55  technically unsound inner fn (uses ptrs)
      61  Scary looking as hell, but I think this is just going Box (40) -> void* (48) -> Box (here).
      62  UNDEFINED BEHAVIOR:  Possible panic unwind through FFI, technically an hazard.
          I would've missed this edge case but for the comment, so I'm not docking points.
          Unlikely to cause severe problems, but would be worth fixing.
  src\ios\platform.rs             +1
  src\ios\xcode.rs                +1
      25  Dead code not reviewed
      91  I have not thoroughly audited this code signing stuff, but looks OK.
      199 com.zoy.kali.Dinghy?  A bit hardcoded...
  
  src\platform\mod.rs                 +1
  src\platform\regular_platform.rs    +1
      44  Since when does "regular" mean "*nix" - might not work on windows.
  
  src\script\device.rs            +1
  src\script\mod.rs               +1
  
  src\ssh\device.rs               0
  src\ssh\mod.rs                  +1
  
  src\compiler.rs                 +1
      475 Isn't this *unbanned*?
  src\config.rs                   +1
  src\device.rs                   +1
  src\errors.rs                   +1
  src\lib.rs                      +1
      87  random sleep? why?
  src\overlay.rs                  +1
  src\project.rs                  +1
  src\toolchain.rs                +1
  src\utils.rs                    +1
  
  build.rs                        +1
  Cargo.toml                      +1
  Cargo.toml.orig                 +1
  
  
  
  TIL
  ===
  Neat loop pattern:
  
  ```
  for (a,     b,      c) in &[
      ("a",   "b",    "c"),
      ("aa",  "bb",   "cc"),
  ] {
      ...
  }
  ```
  
  Sysroot paths:  ndk/toolchains/llvm/prebuilt/sysroot/usr/lib/{binutils_cpu}-linux-{abi_kind}"
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
KZoetE2dJ7Rcn6Z_oprLII4A6Y3IaYK-UPPNwUn8uFpwpPHHoVXrWacwNGm-OAycj7gzSgI2pfWy-aughKnqDw
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2019-09-03T11:37:52.203782400-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.12
  revision: 86168d7d01de47f06741cd6430ff9af71b13a4c2
  digest: twtDrhKvr5oxpDt61eNL0u42kj49cmH2RGpEAEsFhRA
package-diff-base:
  source: "https://crates.io"
  name: dinghy-build
  version: 0.4.11
  revision: 1fa5b89b2bb50264a5fd93d9791b843763cf7682
  digest: 70P30qFd_VRtAAJO0wqEDS2TWJFXeQT3T-eQKFXZP7A
review:
  thoroughness: medium
  understanding: low
  rating: positive
comment: |
  0.4.12:  Trivial version bumps.
  0.4.11
  Some of the build/path stuff seems a little off... but might be correct?
  All safe code, no security problems.
  
  Reviewed:
  
      src\build_env.rs    +1
      src\build.rs        +1
      src\lib.rs          0
          102 Is this really correct for specifying the *host* environment?
          105 ..
      src\utils.rs        0
          14  Isn't this generating /../../../ ?  Doesn't seem right...
  
      Cargo.toml          +1
      Cargo.toml.orig     +1
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
hMPd_BrWla3bQKc2DAshtlITnSfRD24vTNdxJ2lQHf9_yms_p4DlNrHaMynbc9U0xlvYghH8Gxv3Xp7Z804WDg
-----END CREV PACKAGE REVIEW-----

