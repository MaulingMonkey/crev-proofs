----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-06T02:38:42.563915200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: waker-fn
  version: 1.0.0
  revision: 26defc87b2fe7e9a46bb59285315e3e4dc5fe79a
  digest: p28usGEygy2AcO7WqHO_37ULyz6TClHWOzJIu2sccAk
review:
  thoroughness: high
  understanding: high
  rating: positive
comment: |-
  Basic 0-dependencies Fn-based [Waker] source.
  
  This could eventually be made safe when [Wake] (not [Waker]!) stabilizes.
  In the meantime, this crate manually creates a [Waker] via [RawWaker].
  This requires some `unsafe` code, but this crate appropriately uses just about
  the bare minimum necessary to accomplish the task, and appears to do so soundly and correctly.
  Additionally, the code is minimal (63 LOC including comments and whitespace for 1.1.0) and straightforward.
  
  [Wake]:     https://doc.rust-lang.org/std/task/trait.Wake.html
  [Waker]:    https://doc.rust-lang.org/std/task/struct.Waker.html
  [RawWaker]: https://doc.rust-lang.org/std/task/struct.RawWaker.html
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/waker-fn.md)
----- SIGN CREV PROOF -----
vBavRFG_lUj1tq1qRV1RYdcKNXVBb_MzVia5x0l3FSe-EWbnzC1t96BuP25jStimN5IvR0vnDwU0Ih8j6BmtBA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-06T02:41:30.169182400-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: waker-fn
  version: 1.1.0
  revision: f1419be1139111ecf8a1267468edb3e9e7ae46b1
  digest: Ccn0e6uclXAyYcpB0RitkEMUx2fff_XpvNhk1ZzBV_I
review:
  thoroughness: high
  understanding: high
  rating: positive
comment: |-
  Basic 0-dependencies Fn-based [Waker] source.
  
  This could eventually be made safe when [Wake] (not [Waker]!) stabilizes.
  In the meantime, this crate manually creates a [Waker] via [RawWaker].
  This requires some `unsafe` code, but this crate appropriately uses just about
  the bare minimum necessary to accomplish the task, and appears to do so soundly and correctly.
  Additionally, the code is minimal (63 LOC including comments and whitespace for 1.1.0) and straightforward.
  
  [Wake]:     https://doc.rust-lang.org/std/task/trait.Wake.html
  [Waker]:    https://doc.rust-lang.org/std/task/struct.Waker.html
  [RawWaker]: https://doc.rust-lang.org/std/task/struct.RawWaker.html
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/waker-fn.md)
----- SIGN CREV PROOF -----
1gQfTGxF957DXOQM8X0zZT8iCTh65mBrF-xNeQ6MU060DngdtrfDRd4hnbOH41FY7Yc_9eVDlq0Zmj-3Y7zJDw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T06:10:03.511887700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: num_cpus
  version: 1.11.1
  revision: 428811d2a00920479fdb7dc9e9e2902e52e92e4b
  digest: hq7XQRhnst14y3n-W6VgOURoIt592L4GKv97cgiFY3I
review:
  thoroughness: medium
  understanding: medium
  rating: positive
advisories:
  - ids:
      - "https://github.com/seanmonstar/num_cpus/pull/83"
    severity: medium
    comment: "std::mem::uninitialized was probably technically UB"
comment: |-
  Queries the OS for the number of CPU cores you have.
  
  Pros:
  *   You didn't have to write it.
  *   Handles all that hideously platform specific nonsense for you.
  
  Cons:
  *   Lots of (necessary) `unsafe`
  *   Linux cgroups support seems wildly overcomplicated.
  *   [Lies](https://github.com/seanmonstar/num_cpus/issues/95) and
      [lies](https://github.com/seanmonstar/num_cpus/issues/69) and
      [lies](https://github.com/seanmonstar/num_cpus/issues/34) and
      [lies](https://github.com/seanmonstar/num_cpus/issues/81).
      Not exactly this crate's fault - the system APIs are brittle and full of edge cases.
      Multi-processor **architectures** are full of edge cases.
  
  Alternatives:
  *   Just hardcode a reasonable number of threads for your workload!
      Spinning up threads for 64 CPU cores to all false-share a single cacheline
      because that's how many logical cores were detected isn't the right choice!
      And all your threads are probably blocked on I/O anyways!
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_cpus.md)
----- SIGN CREV PROOF -----
eqXSE8_oMo72-vapzL450xe9eozjG1JeaTLB0__XqIBAL9iKgVnNHMTsEg4_EHZr0flhfIX8JaC7PjIvUu9OCA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T06:12:36.945143-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: num_cpus
  version: 1.12.0
  revision: ae4492e91bd04a374905b7d62c60eea5f51c14f6
  digest: vYFAiH4CZX_3W_CpIP5OJHmSZOrbC2U7pg_uALxQUbw
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |-
  Queries the OS for the number of CPU cores you have.
  
  Pros:
  *   You didn't have to write it.
  *   Handles all that hideously platform specific nonsense for you.
  
  Cons:
  *   Lots of (necessary) `unsafe`
  *   Linux cgroups support seems wildly overcomplicated.
  *   [Lies](https://github.com/seanmonstar/num_cpus/issues/95) and
      [lies](https://github.com/seanmonstar/num_cpus/issues/69) and
      [lies](https://github.com/seanmonstar/num_cpus/issues/34) and
      [lies](https://github.com/seanmonstar/num_cpus/issues/81).
      Not exactly this crate's fault - the system APIs are brittle and full of edge cases.
      Multi-processor **architectures** are full of edge cases.
  
  Alternatives:
  *   Just hardcode a reasonable number of threads for your workload!
      Spinning up threads for 64 CPU cores to all false-share a single cacheline
      because that's how many logical cores were detected isn't the right choice!
      And all your threads are probably blocked on I/O anyways!
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_cpus.md)
----- SIGN CREV PROOF -----
XJHrahtAsz3S9ZiJmsmC8VG8CgGlRdJ5kWTCAyBx7ZORRpDHkRWfWbZaEksB6E3vgBFoeJyrs37TSqPxm4ffBA
----- END CREV PROOF -----

