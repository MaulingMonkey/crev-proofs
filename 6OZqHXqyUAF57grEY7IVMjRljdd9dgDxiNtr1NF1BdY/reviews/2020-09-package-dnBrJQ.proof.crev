----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-06T02:38:42.563915200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: waker-fn
  version: 1.0.0
  revision: 26defc87b2fe7e9a46bb59285315e3e4dc5fe79a
  digest: p28usGEygy2AcO7WqHO_37ULyz6TClHWOzJIu2sccAk
review:
  thoroughness: high
  understanding: high
  rating: positive
comment: |-
  Basic 0-dependencies Fn-based [Waker] source.
  
  This could eventually be made safe when [Wake] (not [Waker]!) stabilizes.
  In the meantime, this crate manually creates a [Waker] via [RawWaker].
  This requires some `unsafe` code, but this crate appropriately uses just about
  the bare minimum necessary to accomplish the task, and appears to do so soundly and correctly.
  Additionally, the code is minimal (63 LOC including comments and whitespace for 1.1.0) and straightforward.
  
  [Wake]:     https://doc.rust-lang.org/std/task/trait.Wake.html
  [Waker]:    https://doc.rust-lang.org/std/task/struct.Waker.html
  [RawWaker]: https://doc.rust-lang.org/std/task/struct.RawWaker.html
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/waker-fn.md)
----- SIGN CREV PROOF -----
vBavRFG_lUj1tq1qRV1RYdcKNXVBb_MzVia5x0l3FSe-EWbnzC1t96BuP25jStimN5IvR0vnDwU0Ih8j6BmtBA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-06T02:41:30.169182400-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: waker-fn
  version: 1.1.0
  revision: f1419be1139111ecf8a1267468edb3e9e7ae46b1
  digest: Ccn0e6uclXAyYcpB0RitkEMUx2fff_XpvNhk1ZzBV_I
review:
  thoroughness: high
  understanding: high
  rating: positive
comment: |-
  Basic 0-dependencies Fn-based [Waker] source.
  
  This could eventually be made safe when [Wake] (not [Waker]!) stabilizes.
  In the meantime, this crate manually creates a [Waker] via [RawWaker].
  This requires some `unsafe` code, but this crate appropriately uses just about
  the bare minimum necessary to accomplish the task, and appears to do so soundly and correctly.
  Additionally, the code is minimal (63 LOC including comments and whitespace for 1.1.0) and straightforward.
  
  [Wake]:     https://doc.rust-lang.org/std/task/trait.Wake.html
  [Waker]:    https://doc.rust-lang.org/std/task/struct.Waker.html
  [RawWaker]: https://doc.rust-lang.org/std/task/struct.RawWaker.html
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/waker-fn.md)
----- SIGN CREV PROOF -----
1gQfTGxF957DXOQM8X0zZT8iCTh65mBrF-xNeQ6MU060DngdtrfDRd4hnbOH41FY7Yc_9eVDlq0Zmj-3Y7zJDw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T06:10:03.511887700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: num_cpus
  version: 1.11.1
  revision: 428811d2a00920479fdb7dc9e9e2902e52e92e4b
  digest: hq7XQRhnst14y3n-W6VgOURoIt592L4GKv97cgiFY3I
review:
  thoroughness: medium
  understanding: medium
  rating: positive
advisories:
  - ids:
      - "https://github.com/seanmonstar/num_cpus/pull/83"
    severity: medium
    comment: "std::mem::uninitialized was probably technically UB"
comment: |-
  Queries the OS for the number of CPU cores you have.
  
  Pros:
  *   You didn't have to write it.
  *   Handles all that hideously platform specific nonsense for you.
  
  Cons:
  *   Lots of (necessary) `unsafe`
  *   Linux cgroups support seems wildly overcomplicated.
  *   [Lies](https://github.com/seanmonstar/num_cpus/issues/95) and
      [lies](https://github.com/seanmonstar/num_cpus/issues/69) and
      [lies](https://github.com/seanmonstar/num_cpus/issues/34) and
      [lies](https://github.com/seanmonstar/num_cpus/issues/81).
      Not exactly this crate's fault - the system APIs are brittle and full of edge cases.
      Multi-processor **architectures** are full of edge cases.
  
  Alternatives:
  *   Just hardcode a reasonable number of threads for your workload!
      Spinning up threads for 64 CPU cores to all false-share a single cacheline
      because that's how many logical cores were detected isn't the right choice!
      And all your threads are probably blocked on I/O anyways!
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_cpus.md)
----- SIGN CREV PROOF -----
eqXSE8_oMo72-vapzL450xe9eozjG1JeaTLB0__XqIBAL9iKgVnNHMTsEg4_EHZr0flhfIX8JaC7PjIvUu9OCA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T06:12:36.945143-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: num_cpus
  version: 1.12.0
  revision: ae4492e91bd04a374905b7d62c60eea5f51c14f6
  digest: vYFAiH4CZX_3W_CpIP5OJHmSZOrbC2U7pg_uALxQUbw
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |-
  Queries the OS for the number of CPU cores you have.
  
  Pros:
  *   You didn't have to write it.
  *   Handles all that hideously platform specific nonsense for you.
  
  Cons:
  *   Lots of (necessary) `unsafe`
  *   Linux cgroups support seems wildly overcomplicated.
  *   [Lies](https://github.com/seanmonstar/num_cpus/issues/95) and
      [lies](https://github.com/seanmonstar/num_cpus/issues/69) and
      [lies](https://github.com/seanmonstar/num_cpus/issues/34) and
      [lies](https://github.com/seanmonstar/num_cpus/issues/81).
      Not exactly this crate's fault - the system APIs are brittle and full of edge cases.
      Multi-processor **architectures** are full of edge cases.
  
  Alternatives:
  *   Just hardcode a reasonable number of threads for your workload!
      Spinning up threads for 64 CPU cores to all false-share a single cacheline
      because that's how many logical cores were detected isn't the right choice!
      And all your threads are probably blocked on I/O anyways!
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_cpus.md)
----- SIGN CREV PROOF -----
XJHrahtAsz3S9ZiJmsmC8VG8CgGlRdJ5kWTCAyBx7ZORRpDHkRWfWbZaEksB6E3vgBFoeJyrs37TSqPxm4ffBA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T06:13:00.857997600-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: num_cpus
  version: 1.13.0
  revision: b347731fc0c008dbb88b406c595b1e644458fffe
  digest: ylzvHS5m2bNhDRIC9wOTfQgoBRWDZsjZ6-_ITvjCx2A
review:
  thoroughness: low
  understanding: low
  rating: positive
comment: |-
  Queries the OS for the number of CPU cores you have.
  
  Pros:
  *   You didn't have to write it.
  *   Handles all that hideously platform specific nonsense for you.
  
  Cons:
  *   Lots of (necessary) `unsafe`
  *   Linux cgroups support seems wildly overcomplicated.
  *   [Lies](https://github.com/seanmonstar/num_cpus/issues/95) and
      [lies](https://github.com/seanmonstar/num_cpus/issues/69) and
      [lies](https://github.com/seanmonstar/num_cpus/issues/34) and
      [lies](https://github.com/seanmonstar/num_cpus/issues/81).
      Not exactly this crate's fault - the system APIs are brittle and full of edge cases.
      Multi-processor **architectures** are full of edge cases.
  
  Alternatives:
  *   Just hardcode a reasonable number of threads for your workload!
      Spinning up threads for 64 CPU cores to all false-share a single cacheline
      because that's how many logical cores were detected isn't the right choice!
      And all your threads are probably blocked on I/O anyways!
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_cpus.md)
----- SIGN CREV PROOF -----
2iLEAitzzChV1NFw-I-KWoAVLCLma9ceIMIQSiWQYs3zwadzR946ZjWL_QYO2BnKXLc6cgtnymZnFBcuUJk5Cw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:48:14.335471100-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 0.2.0
  digest: Mu50E-U6CHB_HCAMFtuj02RsIU1TCIaCf2IfQK355WY
review:
  thoroughness: medium
  understanding: high
  rating: positive
advisories:
  - ids:
      - "https://github.com/rust-threadpool/rust-threadpool/pull/6"
    severity: medium
    comment: Removed unsound JoinGuard based ScopedPool API
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
84eoF8kVHIP7bkLfKN0jI3qJZzwau6iVuiKsytF74HeVwpdM-eJ_xOeQ-d1zidTUkGqV1h_ePs0tgHjoDrkBDw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:49:51.723708200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 0.2.1
  digest: Ww30kOoRdH3Tu9i-PXPatMVMwsv79U4a3d4NHBwurSU
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
LKjPMqVtDwGRybc8E6uRK48bnuSiap9i5Nd14OBl2OIpeLCUs7X3oys8XKJcmbjZ_yq08sb6QbuL-RUTOfsPBw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:51:40.841338-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.0.0
  digest: E6k1hCQaYZ8xz_cVK6Qi3kOLoYExc0XtbY_TIcMu22I
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
qNp-z4H3T2Fv6fTcR-ejm8qkyNOo9n5uMNhSLQwGIJCHA8of7UIO6Ya2yPNjs4Yg_l0sCvxBOhxWyNkLnJQoBA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:52:15.542605600-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.0.1
  digest: t9whT-iGSasr7d7Q0sANPLExfQOp9X0-bCvNkWGiDIw
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
TyjQRUswBsv-sdsAwL5HxIYPJnUdnwmJ0s62m0-X-cUGvzx8-66MfGw4Oh92KqSNXrBzPSEB3zv5s8yBRjaKAg
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:52:28.666698200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.0.2
  digest: 5nlSkiZs3NqqwAcgvvDQ8WGy2ShDcPRWUIniluhohBU
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
dBFFxG11XxGDUvO7DxFSNMeiKGWTQh89F1ML-XtZi72R3En8OhclYkqXWSxOKiAoiBzvZl1A7agwlCwSkjaMDg
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:52:53.059154100-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.1.0
  digest: rgQ9HGBW71UX7XxrmF2E3mUuLNijvKoYVbyfWg3YUWo
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
lEZweWo-LejjGKwlS1rxr-2oykbpCkv-uvPuNvaMK_YkHfeIRNRCDsRj4Dv3NiqN7suqyirk1hvA7dwTxFnPBQ
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:53:04.402175-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.1.1
  digest: klPCTFUVTAupdUSMQ9oH4ZW80p38hQ1JxkSS9qSN9b4
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
9P5yJ4dsRnmNv3Nu6Pb0TsF8WVoXrZ4znzymQBOigYC-vfIN_4khQxcpH89Nr9wF5otnGBAo6Rapa2MSz-wmCw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:53:17.005977600-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.2.0
  digest: 59QZ70OIO268eK1O9DdoxbQGiTZ2cehZILAGUBqXC2I
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
kGGPVe3RBUG-fr6BAvyqNKJHOq5ovJSrXOh5RxSNCpTvaYS0wo9fsInyp2M6FDrUC0zFuE67yECwRonihpukDw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:53:30.663332900-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.3.0
  digest: cGrJnsWCMUYi2JXuoEZ7Sg34IV4Ko8g6wSU2nAmnKtA
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
aC545HyUJaPOfiA0-poMzFq6kLkYSFjbIdXC0ud1OQlHYBKrqtXLm1Zgf7YI4LorOumjbUbj1kJ7xuzf7HtAAw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:53:39.881210300-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.3.1
  digest: t7fc4LvfUwLx6iSP_fQGeMdeFw1TO3czi8ZjszA9GEo
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
529wdrKhLcGbSMyUskuh2CSnJvweIL39VHhlzRyOTSif3orzXPfPY3ZrISo9Lp3ayd7wUe_Tjh4cHsb2UREzCw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:53:48.380386300-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.3.2
  digest: lVzb66PZIIj_XfeRFgf5-NDerxECQGsGrKdHeaLbyhs
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
qDJpo0SmyqlKDuVsAmrTSu_sIvD7qDgBjWvuT_l7tE-K7oTBCWZPtSnfXEcBLSAFqFIbpiWv-vYAsm_0_LA_Dg
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:54:09.413971600-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.4.0
  digest: 1xlRPz4QddiLwPBji6nv0du2R3F93KpKcJM7sNrFdAw
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
FaRTX7t8aga4963EoQjygXTjkOUSsh4vGbG8DfrpJuvqV-JtOYb0JqiMNfp90BRfzLoxcp3SKC11Ginc0vZODA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:54:18.850543800-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.4.1
  digest: zdTJWqqYddr8R8QyoJwzvFKEcgvt5VsXiPPrkBv0bsc
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
y7L8PYuDz9jaUruwWEZAjO2Z63g3etOevazxMsD1kyR6E0CDWuwYSbAQ3wD1yYV5BVYZGfTbxBABOb6bUDJcCQ
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:54:28.952752900-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.5.0
  digest: 5f0_ZspL_Fp2oRBF-gUh6NebCAM5x4xa1-koH8jnwjM
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
7qo2YPA1DEROwofPykeb_0T5F_taP0-eFlFvZ2N6Ca2lHg6ZLu8I2czgs2ZLCTd4JN0u4-RS45ApurdmMSZSAA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:54:38.274372-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.6.0
  digest: WwfEqd0ApFc4vAbULQnfYtiMrqxs18ZxPmKFZGfAerk
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
WTADWYRzHVnJlefpwvDvfC0h8nFjIZx2dV_cKkNXRtK1iI7c0elBybkOlkyLn8qeo6LLaOIlGBIVQfRS8QJJBg
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:54:50.127268100-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.7.0
  digest: mwYjv8TESPcFdlrEtB8haknobxfpW7oPxdYzujICfLY
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
w-scVrmxUZ4Yv0IQnCHuweT99UbTZBD4CMD0orH4WNADWpYmY__VXyDzRVQGVNfztCh0pp41jd-P9LfXbBN7Bw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:55:00.346556400-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.8.0
  revision: 906566d7c5745853aaaaf99a4492b817d5722858
  digest: 7nncb0XCcoxAE-UrkqOCDcK1RwNSmYF5BB8G-obq59g
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
g6y0F6TFeUEl-ZYBhCrwzBHcK5TriRgnXzNLpV6_BKwEmk3mgb5U63KkOLp09vriAC5RvwRBCnPg1iYtHVrsCg
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-07T09:55:10.532640200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: threadpool
  version: 1.8.1
  revision: f27711f02c383a1267cf1f35b9d21c7eb3f1d82f
  digest: 9NZpCBCapMX7-9nitpNYXd2zfrMTIaXcOtWJcoYkK08
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |-
  Simple basic thread pool
  
  Pros:
  * Documented/tested MSRV
  * Uses basic well tested mpsc channels
  * No unsafe
  * Well tested, documented, looks solid
  
  Cons:
  * No high performance work stealing queues to break up sync points for work submission
  * No auto-scaling options
  * Ignores OS thread pools (which might have better auto-scaling magic)
  * Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)
----- SIGN CREV PROOF -----
jCw8OCwViSg5pHJO_eJb1jPhI-cDXFn3DlF0TZSKG7-6soIV1UzGfdhtGyoFl2JQ_-Nfzd1uRawAvMKp0HJBBw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-11T11:34:31.685185800-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: read_write_at
  version: 0.1.0
  revision: b8d1555d335a38af8711e1a01b5be9f027189a7c
  digest: F7sm80D2xZmvInkgh4I7pcslCdTZko-s5z_2PPswvVE
review:
  thoroughness: high
  understanding: high
  rating: positive
alternatives:
  - source: "https://crates.io/crates/buffered_offset_reader"
    name: "Less generalized alternative, but implements read_at/write_at on &self for File by default"
comment: |-
  Offset read/write with `&self`
  
  Pros:
  * No runtime dependencies
  * Very thorough, well documented
  
  Cons:
  * `File` isn't `ReadAt`/`WriteAt` on windows due to seeks... reasonable but annoying
  * A couple of minor API holes to be fixed
----- SIGN CREV PROOF -----
JdvaInJtCxyEzX-TGMhuL4l3DQTlMjU8nMy6Ae_ok9CqNoFacP6QSWm_8H3pJ7bA88MFBRfekttXrTN4CKsSCA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-11T11:37:00.813182900-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: buffered_offset_reader
  version: 0.1.0
  revision: 5f8c98b753fd51952ffb798b1452e6eb9a10b976
  digest: TbMnGtV9oJf-Azw0_EudYq3WgvDNNBZGyJzHxB66Bxg
review:
  thoroughness: high
  understanding: high
  rating: positive
alternatives:
  - source: "https://crates.io/crates/read_write_at"
    name: "More generalized, less kludgy.  However, File::read_at/write_at require &mut self on windows by default"
comment: |-
  Offset read/write with `&self`
  
  Pros:
  * No runtime dependencies
  * `read_at(&self, ...)`
  
  Cons:
  * `BufOffsetReader` is a bit kludgy - `u64 as usize` casts should probably `Err` instead
  * Implementing traits directly on `File` makes for inconsistent seek behavior when used by reference
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/buffered_offset_reader.md)
----- SIGN CREV PROOF -----
Nhyaq8UTRM7Cm3XRsCT8o1zASLHmTNwvnPSe5l_UZNgDdteM46HRltZxByiImxUiK1LzHirARjcpEqd5m-EIAA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-11T11:40:02.007685500-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: buffered_offset_reader
  version: 0.1.1
  revision: 439802c23408d33a42842de1d514dc664eb0bdb4
  digest: iugm0-0G_yVkVUa6eD8ofn1vHTnbefPsJKxJSZyomCg
review:
  thoroughness: high
  understanding: high
  rating: positive
alternatives:
  - source: "https://crates.io/crates/read_write_at"
    name: "More generalized, less kludgy.  However, File::read_at/write_at require &mut self on windows by default"
comment: |-
  Offset read/write with `&self`
  
  Pros:
  * No runtime dependencies
  * `read_at(&self, ...)`
  
  Cons:
  * `BufOffsetReader` is a bit kludgy - `u64 as usize` casts should probably `Err` instead
  * Implementing traits directly on `File` makes for inconsistent seek behavior when used by reference
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/buffered_offset_reader.md)
----- SIGN CREV PROOF -----
V79XR5vUVbT06wBm8FxcCnoWsteIhoRvbTh6kqsaZDO_FrNgWd2CnZjz9tEFj36iStI0o3cX1Sja4NW5lsg0BA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-11T11:40:19.862529-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: buffered_offset_reader
  version: 0.2.0
  revision: 6629438325fa9057a0bf4ec2fb62e9c03d250406
  digest: NswWQO-WzNwCYXe3m50thkxo1EImSRBCC3vpz48pi4M
review:
  thoroughness: high
  understanding: high
  rating: positive
alternatives:
  - source: "https://crates.io/crates/read_write_at"
    name: "More generalized, less kludgy.  However, File::read_at/write_at require &mut self on windows by default"
comment: |-
  Offset read/write with `&self`
  
  Pros:
  * No runtime dependencies
  * `read_at(&self, ...)`
  
  Cons:
  * `BufOffsetReader` is a bit kludgy - `u64 as usize` casts should probably `Err` instead
  * Implementing traits directly on `File` makes for inconsistent seek behavior when used by reference
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/buffered_offset_reader.md)
----- SIGN CREV PROOF -----
SJ9CIyhJXUvTfxKbGqQycyaa4AJujbwY4ebfOBnYYku7b7M2ihwWzHgZ271BATeXJmiDryFPNGrDS3y3whNrDQ
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-11T11:40:29.167086800-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: buffered_offset_reader
  version: 0.3.0
  revision: 22a82b4a38ded84ae7631594c4042f53cad3d599
  digest: YzA9JR8bZdOAfAKg7gKMT2tmZWmsvgrIaq-XhbRV3Gg
review:
  thoroughness: high
  understanding: high
  rating: positive
alternatives:
  - source: "https://crates.io/crates/read_write_at"
    name: "More generalized, less kludgy.  However, File::read_at/write_at require &mut self on windows by default"
comment: |-
  Offset read/write with `&self`
  
  Pros:
  * No runtime dependencies
  * `read_at(&self, ...)`
  
  Cons:
  * `BufOffsetReader` is a bit kludgy - `u64 as usize` casts should probably `Err` instead
  * Implementing traits directly on `File` makes for inconsistent seek behavior when used by reference
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/buffered_offset_reader.md)
----- SIGN CREV PROOF -----
4nRAFVli_cvmWnX8w4kgJ4s1-bOosWy0NtWsjfajLorwssBGw5sp67YQwlV7xSUEE9rGYvgnqui7RoS3EnSLAQ
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-11T11:40:40.606271400-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: buffered_offset_reader
  version: 0.4.0
  revision: 0ecca001c1b156e0872a2a50383416f23b0b0f3d
  digest: K0WBU1UR8y7L8c3uXLYwzk8R6GDjuqDyUxE1m8RttWQ
review:
  thoroughness: high
  understanding: high
  rating: positive
alternatives:
  - source: "https://crates.io/crates/read_write_at"
    name: "More generalized, less kludgy.  However, File::read_at/write_at require &mut self on windows by default"
comment: |-
  Offset read/write with `&self`
  
  Pros:
  * No runtime dependencies
  * `read_at(&self, ...)`
  
  Cons:
  * `BufOffsetReader` is a bit kludgy - `u64 as usize` casts should probably `Err` instead
  * Implementing traits directly on `File` makes for inconsistent seek behavior when used by reference
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/buffered_offset_reader.md)
----- SIGN CREV PROOF -----
YHV-wpTeyKjUK0tJk0FZOHBpDfnYAyvqmE4zeFBjegh0uD9zVTPrB1UbcScRu4662pjYyNR_hC_FUYqMMDarAg
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-11T11:40:51.256453300-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: buffered_offset_reader
  version: 0.5.0
  revision: 579bd0d3e9977ba4ae43472f3c90771a72994789
  digest: w_iJPIleY5hcKQsJgyHV_kJmqFTMGKW94E270CGRBdo
review:
  thoroughness: high
  understanding: high
  rating: positive
alternatives:
  - source: "https://crates.io/crates/read_write_at"
    name: "More generalized, less kludgy.  However, File::read_at/write_at require &mut self on windows by default"
comment: |-
  Offset read/write with `&self`
  
  Pros:
  * No runtime dependencies
  * `read_at(&self, ...)`
  
  Cons:
  * `BufOffsetReader` is a bit kludgy - `u64 as usize` casts should probably `Err` instead
  * Implementing traits directly on `File` makes for inconsistent seek behavior when used by reference
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/buffered_offset_reader.md)
----- SIGN CREV PROOF -----
KMUjlzemEsGAcRax4ozt_668qiLY9tr33DalX8MZjZ6-re3QEbpXDhjsiUezwEP3RDicXn7VKMKapCdZ41VfCQ
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-11T11:41:00.181661700-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: buffered_offset_reader
  version: 0.6.0
  revision: 6883f28ebc8b68a5d5a1b3cdf0b6e037f7e8ef4b
  digest: kMO3vkPA6n-1X1KV8Mo3u0uWZyw6-Mk-fVj8mAnOE2o
review:
  thoroughness: high
  understanding: high
  rating: positive
alternatives:
  - source: "https://crates.io/crates/read_write_at"
    name: "More generalized, less kludgy.  However, File::read_at/write_at require &mut self on windows by default"
comment: |-
  Offset read/write with `&self`
  
  Pros:
  * No runtime dependencies
  * `read_at(&self, ...)`
  
  Cons:
  * `BufOffsetReader` is a bit kludgy - `u64 as usize` casts should probably `Err` instead
  * Implementing traits directly on `File` makes for inconsistent seek behavior when used by reference
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/buffered_offset_reader.md)
----- SIGN CREV PROOF -----
9Joc7HQdo-_r1VcZcCtD1a0Eo1zliB9pVAHlVo75-sr78r7RIowjNR-wpLhSQmADZTrFQRtcLwsJY3AX80MIAw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-09-11T11:41:38.564529500-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: read_write_at
  version: 0.1.0
  revision: b8d1555d335a38af8711e1a01b5be9f027189a7c
  digest: F7sm80D2xZmvInkgh4I7pcslCdTZko-s5z_2PPswvVE
review:
  thoroughness: high
  understanding: high
  rating: positive
alternatives:
  - source: "https://crates.io/crates/buffered_offset_reader"
    name: "Less generalized alternative, but implements read_at/write_at on &self for File by default"
comment: |-
  Offset read/write with `&self`
  
  Pros:
  * No runtime dependencies
  * Very thorough, well documented
  
  Cons:
  * `File` isn't `ReadAt`/`WriteAt` on windows due to seeks... reasonable but annoying
  * A couple of minor API holes to be fixed
  
  [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/read_write_at.md)
----- SIGN CREV PROOF -----
baliwbBFzq4K_mu0ibDrJu7Y4nLb8ZlfPv21Vo1Juk3rTwN9zIaPLucL58rcsxhu4ME_Mrqa3FdckE5NFJbHCA
----- END CREV PROOF -----

