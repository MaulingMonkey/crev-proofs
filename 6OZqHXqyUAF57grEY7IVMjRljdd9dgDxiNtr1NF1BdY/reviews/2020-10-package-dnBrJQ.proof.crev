----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-10-11T03:55:20.453554800-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: aseprite
  version: 0.1.0
  digest: _aUQXCs-trWWxbbIbt2irfxLxa-gZKoWGF-sQu8CFjc
review:
  thoroughness: medium
  understanding: high
  rating: negative
comment: |-
  Private fields make this unusable until 0.1.2
----- SIGN CREV PROOF -----
JTez-2WwYqy-nkFkAXN-WSyA3WT-0f_Fjij3wimcRS5Ju0luAjPnVgpGnq0D7hx0bniuJYJGdsb3NXa3UPiTDw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-10-11T03:56:05.164606300-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: aseprite
  version: 0.1.1
  digest: VxAdZzdFAAfYtaI8N0cr51gP3PdD-PUOk9ZWq7M3nWc
review:
  thoroughness: medium
  understanding: high
  rating: negative
comment: |-
  Private fields make this unusable until 0.1.2
----- SIGN CREV PROOF -----
l-2bB_Gg-jbS0Mj38bvrDq52ItAziaV0iCZ9en6OimJNycrqmvb-pJN9drrQpvYLfyLt0NNHED5o3TFN70OSBw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-10-11T03:56:33.265325-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: aseprite
  version: 0.1.2
  digest: jrZmi4CTvdxVA7wossNNRgjpWNIc1kJOo8T0qQbxssU
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |-
  \[[Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/aseprite.md)\]
  Parses JSON [aseprite](https://www.aseprite.org/) exports
  
  Pros:
  * Looks fairly exhaustive, self contained
  * No direct disk I/O
  
  Cons:
  * Exahustively matchable structs make most version bumps technically breaking changes
  * Requires non-default export options (fixed in an unmerged PR)
  * Enum deserialization is brittle when it comes to new options
  * Limited maintainence
----- SIGN CREV PROOF -----
SmpYRe66LoTvzTikTdDEewwKV2N-Oc9D1SEfY6CZGCrehFLd4Y1TwKbpolXr4xIvpGSvLJuzGdrIZFsVoDEHDA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-10-11T03:58:38.350685200-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: aseprite
  version: 0.1.3
  digest: KpthrIDFTluLyGR3-KzhHlk02CaKNsp6QHEY_BkhBCM
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |-
  \[[Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/aseprite.md)\]
  Parses JSON [aseprite](https://www.aseprite.org/) exports
  
  Pros:
  * Looks fairly exhaustive, self contained
  * No direct disk I/O
  
  Cons:
  * Exahustively matchable structs make most version bumps technically breaking changes
  * Requires non-default export options (fixed in an unmerged PR)
  * Enum deserialization is brittle when it comes to new options
  * Limited maintainence
----- SIGN CREV PROOF -----
ZTPPyELu7PFB2MCrz9CiBoi3sKNihrf0qNvnOoUx8aIoUDn0aWWdPCu-MU2ACoL81HUk9fsPyHgozUp0iFyECg
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-10-11T04:23:42.138663100-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: nonmax
  version: 0.2.0
  revision: 12a39752ee08a8bdf3ee7cd264fc528bedf1739b
  digest: BgyKyw5u_Ad7LQVTOUNYhY4lkQ22x637HFcNc9XjpCA
review:
  thoroughness: high
  understanding: high
  rating: positive
comment: |-
  \[[Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/nonmax.md)\]
  std::num::NonZero___ equivalents
  
  Pros:
  * Works
  * Can represent 0
  * Clever cheap xors for implementation
  
  Cons:
  * Missing [a lot of traits](https://doc.rust-lang.org/std/num/struct.NonZeroI32.html#trait-implementations) vs equivalent `NonZero*`s
  * Extra pointless unsafe in `new` impl
----- SIGN CREV PROOF -----
uPHKov5kgpVaDaXePqWlbBe0O6Od08KJDDND8kSldy0G6gv5o29COiYJ8OuFbA72gSH4fAtQMjLF1t0lwM9bAQ
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-10-11T04:25:01.346892-07:00"
from:
  id-type: crev
  id: 6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY
  url: "https://github.com/MaulingMonkey/crev-proofs"
package:
  source: "https://crates.io"
  name: nonmax
  version: 0.3.0
  revision: 214f6ea86cf1201293bf18708506833ef67925ad
  digest: "-4uiox59BP4gl7azhJC8bayQs1lhNvMl8GXRyYACZAE"
review:
  thoroughness: high
  understanding: high
  rating: positive
comment: |-
  \[[Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/nonmax.md)\]
  std::num::NonZero___ equivalents
  
  Pros:
  * Works
  * Can represent 0
  * Clever cheap xors for implementation
  
  Cons:
  * Missing [a lot of traits](https://doc.rust-lang.org/std/num/struct.NonZeroI32.html#trait-implementations) vs equivalent `NonZero*`s
  * Extra pointless unsafe in `new` impl
----- SIGN CREV PROOF -----
AcV67N51OSoHXIMFNRrkavHuPvAopexqxWHXXD2fBipxv-lFsfd3STWBSYcS3wgTc7vxHxqxBOmF8I2c2rNKDw
----- END CREV PROOF -----

